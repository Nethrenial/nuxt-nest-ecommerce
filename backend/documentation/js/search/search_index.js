var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AddUserAddressDto.html",[0,0.062,1,2.114]],["body/classes/AddUserAddressDto.html",[0,0.086,1,2.953,2,1.728,3,0.266,4,0.235,5,0.235,6,5.316,7,2.165,8,2.674,9,0.438,10,1.465,11,3.34,12,4.074,13,4.074,14,4.074,15,4.074,16,0.878,17,0.024,18,2.304,19,2.392,20,4.095,21,1.257,22,3.577,23,3.577,24,3.577,25,3.577,26,3.033,27,0.366,28,3.531,29,3.531,30,1.862,31,0.266,32,0.017,33,0.017]],["title/modules/AppModule.html",[34,1.118,35,2.32]],["body/modules/AppModule.html",[0,0.057,3,0.238,4,0.21,5,0.21,17,0.025,27,0.649,31,0.238,32,0.016,33,0.016,34,1.445,35,4.541,36,1.439,37,2.008,38,2.711,39,2.711,40,3.714,41,3.412,42,3.412,43,3.412,44,3.154,45,2.322,46,1.664,47,1.664,48,3.197,49,2.512,50,0.536,51,3.197,52,1.959,53,1.177,54,3.197,55,2.711,56,3.197,57,3.197,58,1.036,59,1.664,60,2.711,61,1.959,62,1.664,63,2.711,64,3.197,65,3.197,66,3.197,67,3.197,68,6.528,69,3.197,70,2.711,71,3.197,72,2.711,73,2.711,74,3.197,75,3.197,76,3.197,77,3.197,78,1.177,79,1.8]],["title/controllers/AuthenticationController.html",[80,1.356,81,2.32]],["body/controllers/AuthenticationController.html",[0,0.037,3,0.156,4,0.137,5,0.137,7,1.793,9,0.256,16,0.749,17,0.025,19,1.927,21,1.013,27,0.614,31,0.156,32,0.011,33,0.011,50,0.351,59,1.089,78,0.77,80,0.822,81,2.193,82,1.774,83,1.282,84,1.774,85,1.056,86,3.261,87,1.867,88,3.261,89,3.261,90,1.697,91,2.764,92,2.093,93,2.986,94,2.093,95,2.093,96,1.588,97,1.4,98,1.491,99,2.784,100,1.588,101,2.093,102,2.093,103,2.695,104,2.093,105,1.467,106,2.093,107,2.093,108,2.093,109,2.093,110,2.093,111,2.093,112,1.774,113,2.772,114,3.261,115,2.093,116,2.764,117,1.282,118,1.407,119,2.093,120,1.282,121,1.407,122,2.085,123,1.564,124,1.575,125,1.282,126,2.085,127,1.011,128,1.564,129,1.774,130,1.407,131,2.093,132,2.193,133,1.011,134,3.261,135,1.407,136,1.011,137,2.093,138,1.774,139,1.282,140,2.093,141,3.261,142,1.774,143,2.093,144,0.879,145,1.935,146,1.475,147,2.093,148,2.44,149,1.9,150,2.093,151,2.093,152,2.093,153,1.562,154,3.261,155,2.093,156,2.093,157,2.093,158,4.524,159,2.093,160,2.093,161,2.093,162,2.093,163,2.093,164,2.093,165,3.261,166,2.995,167,2.093,168,2.764,169,2.193,170,2.093,171,2.093,172,2.093,173,2.093,174,2.093,175,2.764,176,2.193,177,2.093,178,2.093,179,2.093,180,2.093,181,3.261,182,2.093,183,2.093,184,1.774,185,2.093]],["title/modules/AuthenticationModule.html",[34,1.118,40,2.114]],["body/modules/AuthenticationModule.html",[0,0.053,3,0.22,4,0.194,5,0.194,17,0.025,27,0.665,31,0.22,32,0.015,33,0.015,34,1.367,36,1.33,37,1.899,40,4.137,42,3.326,44,3.074,45,2.197,46,1.538,47,1.538,49,2.772,50,0.495,52,3.017,53,1.088,59,1.538,60,2.505,78,1.554,79,2.377,81,3.312,87,0.957,90,1.538,122,3.074,123,2.209,127,1.428,186,2.505,187,2.505,188,2.955,189,3.62,190,3.62,191,3.62,192,2.955,193,4.221,194,1.428,195,2.505,196,2.955,197,2.955,198,2.955,199,2.955,200,2.955,201,2.505,202,1.811,203,2.595,204,2.955,205,2.955,206,2.955,207,2.209,208,2.955,209,2.955,210,2.209,211,2.955]],["title/injectables/AuthenticationService.html",[122,1.795,212,0.578]],["body/injectables/AuthenticationService.html",[0,0.031,3,0.128,4,0.113,5,0.113,7,1.218,9,0.212,16,0.689,17,0.025,18,2.065,21,1.039,27,0.536,31,0.128,32,0.01,33,0.01,50,0.289,53,0.635,58,0.906,70,1.463,84,1.463,85,0.906,87,1.753,90,0.898,91,2.372,96,1.547,97,1.363,98,1.452,100,1.547,105,1.259,112,2.372,113,2.487,116,2.372,122,1.456,124,1.876,125,1.058,129,1.463,136,1.96,144,1.175,145,2.306,146,1.299,148,2.435,149,1.873,153,1.54,166,2.637,168,2.372,169,1.882,202,1.058,203,2.429,207,2.091,210,2.091,212,0.469,213,0.635,214,1.463,215,4.529,216,2.798,217,4.058,218,2.798,219,2.798,220,3.528,221,1.463,222,4.263,223,1.726,224,2.798,225,4.774,226,1.726,227,1.726,228,2.798,229,2.485,230,1.726,231,2.729,232,2.798,233,1.726,234,1.726,235,1.726,236,4.774,237,1.726,238,3.78,239,1.463,240,1.463,241,1.463,242,1.463,243,2.372,244,1.29,245,1.463,246,1.463,247,2.637,248,1.726,249,1.986,250,1.29,251,1.161,252,1.726,253,1.463,254,2.372,255,2.798,256,1.726,257,0.972,258,1.726,259,2.372,260,1.726,261,1.726,262,2.729,263,2.285,264,1.463,265,1.463,266,3.528,267,1.726,268,1.726,269,3.528,270,1.726,271,1.463,272,1.726,273,2.798,274,2.798,275,4.058,276,4.058,277,4.058,278,2.798,279,1.882,280,2.372,281,1.726,282,1.726,283,1.726,284,2.798,285,1.726,286,1.726,287,1.726,288,1.726,289,2.798]],["title/classes/ConfirmEmailDto.html",[0,0.062,290,2.32]],["body/classes/ConfirmEmailDto.html",[0,0.101,2,2.208,3,0.34,4,0.3,5,0.3,9,0.56,10,1.717,16,0.659,17,0.024,18,1.949,19,1.796,20,3.074,21,0.944,27,0.468,28,3.179,29,3.179,30,2.378,31,0.34,32,0.02,33,0.02,127,2.727,136,2.96,290,3.797,291,4.786,292,3.875,293,4.57]],["title/classes/CreateChargeDto.html",[0,0.062,294,2.32]],["body/classes/CreateChargeDto.html",[0,0.097,2,2.065,3,0.318,4,0.28,5,0.28,9,0.524,10,1.646,16,0.781,17,0.024,18,1.869,19,2.128,20,2.875,21,1.118,27,0.437,28,3.048,29,3.048,30,2.224,31,0.318,32,0.019,33,0.019,229,2.817,294,3.641,295,3.092,296,5.037,297,3.623,298,5.037,299,5.037,300,5.942,301,4.274,302,4.274]],["title/classes/CreateUserDto.html",[0,0.062,303,2.32]],["body/classes/CreateUserDto.html",[0,0.08,2,2.152,3,0.331,4,0.292,5,0.292,9,0.546,10,1.69,16,0.874,17,0.024,18,2.297,21,1.251,31,0.331,32,0.019,33,0.019,58,1.962,97,1.729,257,3.41,303,3.737,304,5.375,305,3.776,306,4.455,307,4.455,308,4.455]],["title/guards/EmailConfirmationGuard.html",[309,2.579,310,2.32]],["body/guards/EmailConfirmationGuard.html",[0,0.072,3,0.302,4,0.266,5,0.266,9,0.498,16,0.586,17,0.024,21,0.839,27,0.536,31,0.302,32,0.018,33,0.018,50,0.681,58,1.315,85,1.697,93,2.531,96,1.315,97,1.159,98,1.234,99,1.961,100,1.315,138,3.442,139,2.488,148,1.827,153,1.402,212,0.878,262,2.731,263,2.286,310,3.524,311,4.06,312,3.916,313,3.442,314,6.129,315,4.441,316,5.196,317,4.06,318,4.06,319,4.06,320,4.06,321,4.06,322,3.442,323,4.06,324,4.06,325,4.06,326,2.488]],["title/controllers/EmailController.html",[80,1.356,327,2.32]],["body/controllers/EmailController.html",[0,0.072,3,0.299,4,0.263,5,0.263,9,0.492,16,0.579,17,0.024,19,1.577,21,0.829,27,0.59,31,0.299,32,0.018,33,0.018,50,0.673,58,1.684,78,1.478,80,1.577,83,2.459,85,1.684,87,1.869,96,1.3,97,1.146,98,1.22,100,1.3,105,1.806,117,2.459,120,2.459,146,1.478,149,1.686,153,1.386,327,3.498,328,3.402,329,4.408,330,4.013,331,4.89,332,5.2,333,4.013,334,4.408,335,3.002,336,3.402,337,3.402,338,3.402,339,3.402,340,2.089,341,4.013,342,4.013,343,4.013]],["title/modules/EmailModule.html",[34,1.118,41,1.942]],["body/modules/EmailModule.html",[0,0.072,3,0.3,4,0.264,5,0.264,17,0.024,27,0.625,31,0.3,32,0.018,33,0.018,34,1.689,36,1.813,37,2.345,41,3.715,45,2.713,46,2.097,47,2.097,49,2.268,50,0.675,52,3.194,53,1.483,78,1.919,79,2.935,203,1.946,327,3.887,335,3.593,336,3.415,344,3.415,345,3.415,346,3.415,347,4.029,348,3.506,349,4.029]],["title/injectables/EmailService.html",[212,0.578,335,1.795]],["body/injectables/EmailService.html",[0,0.063,3,0.263,4,0.232,5,0.232,7,1.218,9,0.433,10,1.452,16,0.781,17,0.025,21,1.118,27,0.594,31,0.263,32,0.017,33,0.017,50,0.592,53,1.299,85,1.547,96,1.547,97,1.363,98,1.452,100,1.143,144,1.483,145,2.615,146,1.299,153,1.218,203,3.017,212,0.801,213,1.299,326,2.163,329,4.049,331,4.589,335,2.485,337,4.589,338,2.992,340,1.837,350,2.992,351,5.413,352,2.638,353,4.776,354,4.776,355,3.529,356,4.776,357,4.776,358,2.992,359,3.529,360,3.529,361,3.529,362,3.529,363,3.529,364,3.529,365,3.529,366,4.776,367,3.529,368,3.529,369,3.529]],["title/controllers/EmailVerificationController.html",[80,1.356,370,2.32]],["body/controllers/EmailVerificationController.html",[0,0.057,3,0.238,4,0.21,5,0.21,9,0.392,16,0.644,17,0.025,19,1.754,21,0.922,27,0.599,31,0.238,32,0.016,33,0.016,50,0.536,58,1.665,59,2.675,78,1.177,80,1.257,83,1.959,85,1.445,87,1.963,93,2.687,96,1.445,97,1.274,98,1.357,99,2.156,100,1.445,117,1.959,118,2.151,120,1.959,121,2.151,126,2.322,127,2.483,128,2.39,132,2.151,133,1.545,139,1.959,144,1.343,145,1.545,146,1.177,148,1.439,149,2.159,176,2.151,290,3.741,339,2.711,370,3.001,371,2.711,372,4.462,373,3.336,374,3.783,375,3.197,376,4.462,377,3.197,378,4.462,379,3.197,380,4.462,381,3.783,382,3.197,383,3.197,384,3.197,385,3.197,386,3.197,387,3.197,388,1.8,389,1.959,390,3.197,391,3.197,392,3.197,393,3.197,394,3.197,395,3.197,396,3.197,397,3.197,398,3.197]],["title/modules/EmailVerificationModule.html",[34,1.118,42,1.942]],["body/modules/EmailVerificationModule.html",[0,0.063,3,0.263,4,0.232,5,0.232,17,0.025,27,0.654,31,0.263,32,0.017,33,0.017,34,1.547,36,1.588,37,2.149,41,3.517,42,3.781,44,3.25,45,2.485,46,1.837,47,1.837,49,2.689,50,0.592,52,2.927,53,1.299,58,1.547,59,1.837,78,1.758,79,2.689,126,3.521,127,1.705,128,2.638,195,2.992,201,4.049,202,2.163,348,3.212,370,3.641,399,2.992,400,2.992,401,3.529,402,2.992,403,3.529,404,3.529,405,3.529]],["title/injectables/EmailVerificationService.html",[126,1.795,212,0.578]],["body/injectables/EmailVerificationService.html",[0,0.037,3,0.153,4,0.135,5,0.135,7,1.112,9,0.252,11,1.262,16,0.702,17,0.025,18,1.98,21,1.005,27,0.528,31,0.153,32,0.011,33,0.011,50,0.345,53,0.758,58,1.747,59,2.685,72,1.746,73,1.746,85,1.043,87,1.858,96,1.577,97,1.389,98,1.48,100,1.453,105,0.927,124,2.119,125,1.262,126,1.676,127,2.493,136,2.351,144,1.353,145,2.167,146,1.651,148,2.426,149,2.045,153,1.112,202,1.262,203,2.605,207,2.408,210,1.54,212,0.54,213,0.758,215,4.541,222,4.375,229,2.064,231,1.385,247,1.54,251,1.385,254,1.746,259,1.746,262,3.274,263,2.74,264,2.731,271,1.746,279,3.017,280,1.746,335,2.806,373,1.54,374,2.731,381,3.362,406,1.746,407,3.221,408,3.221,409,3.221,410,2.06,411,2.06,412,3.221,413,2.06,414,3.221,415,2.06,416,3.221,417,2.06,418,3.221,419,2.06,420,3.221,421,2.166,422,2.06,423,2.06,424,3.221,425,3.221,426,2.06,427,2.06,428,2.06,429,3.221,430,2.06,431,2.06,432,2.06,433,1.746,434,2.06,435,2.06,436,2.06,437,3.221,438,3.966,439,3.221,440,2.06,441,2.06,442,2.06,443,2.06,444,2.06,445,2.06,446,2.06,447,2.06,448,2.06,449,2.06]],["title/injectables/JwtAuthenticationGuard.html",[133,1.667,212,0.578]],["body/injectables/JwtAuthenticationGuard.html",[0,0.087,3,0.364,4,0.321,5,0.321,17,0.024,27,0.602,31,0.364,32,0.021,33,0.021,50,0.819,133,2.842,194,2.362,212,0.986,213,1.8,388,2.752,450,3.654,451,3.654,452,2.362,453,4.144]],["title/injectables/JwtRefreshGuard.html",[135,2.32,212,0.578]],["body/injectables/JwtRefreshGuard.html",[0,0.086,3,0.359,4,0.316,5,0.316,17,0.024,27,0.597,31,0.359,32,0.02,33,0.02,50,0.808,90,2.509,135,3.924,136,2.818,194,2.329,212,0.978,213,1.775,388,2.715,451,3.604,452,2.329,453,4.087,454,4.087]],["title/injectables/JwtRefreshTokenStrategy.html",[189,2.114,212,0.578]],["body/injectables/JwtRefreshTokenStrategy.html",[0,0.054,3,0.226,4,0.199,5,0.199,7,1.484,9,0.372,16,0.62,17,0.025,21,0.888,27,0.627,31,0.226,32,0.015,33,0.015,50,0.508,53,1.116,85,1.392,87,1.618,90,2.827,96,1.392,97,1.227,98,1.307,99,2.96,100,0.982,105,1.364,124,2.135,125,1.858,136,1.465,144,1.806,145,2.077,146,1.583,148,1.934,149,1.274,153,1.484,169,2.039,189,2.634,194,1.465,203,2.878,212,0.721,213,1.116,249,3.059,250,2.266,251,2.039,279,3.359,326,1.858,352,2.266,452,1.465,455,4.234,456,2.57,457,3.213,458,4.994,459,3.032,460,4.298,461,3.032,462,2.57,463,3.213,464,2.039,465,3.213,466,3.213,467,2.039,468,2.266,469,2.57,470,2.57,471,3.032,472,2.57,473,3.032,474,3.032,475,3.644,476,3.032,477,3.032,478,3.032,479,2.57]],["title/injectables/JwtStrategy.html",[190,2.114,212,0.578]],["body/injectables/JwtStrategy.html",[0,0.06,3,0.25,4,0.221,5,0.221,9,0.412,16,0.666,17,0.025,21,0.954,27,0.645,31,0.25,32,0.016,33,0.016,50,0.563,53,1.237,85,1.496,87,1.71,96,1.496,97,1.318,98,1.404,99,2.549,100,1.089,105,1.512,124,2.419,125,2.059,144,1.94,145,2.231,146,1.7,153,1.595,190,2.83,194,1.623,203,3.046,212,0.774,213,1.237,221,2.849,249,3.199,250,2.512,251,2.26,279,2.26,452,1.623,457,3.453,462,2.849,463,2.512,464,2.26,465,2.512,466,2.512,467,2.26,468,2.512,469,2.849,470,2.849,472,2.849,480,2.849,481,3.361,482,4.619,483,3.361,484,2.849,485,3.361,486,3.361,487,3.361]],["title/injectables/LocalAuthenticationGuard.html",[130,2.32,212,0.578]],["body/injectables/LocalAuthenticationGuard.html",[0,0.087,3,0.364,4,0.321,5,0.321,17,0.024,27,0.602,31,0.364,32,0.021,33,0.021,50,0.819,130,3.956,194,2.362,212,0.986,213,1.8,450,3.654,451,3.654,452,2.362,488,4.144,489,4.889]],["title/injectables/LocalStrategy.html",[191,2.114,212,0.578]],["body/injectables/LocalStrategy.html",[0,0.065,3,0.272,4,0.24,5,0.24,7,1.261,9,0.448,16,0.705,17,0.025,18,2.178,21,1.009,27,0.627,31,0.272,32,0.017,33,0.017,50,0.612,58,1.583,85,1.583,87,1.784,96,1.583,97,1.395,98,1.486,100,1.183,122,3.283,123,2.73,144,1.534,153,1.261,191,2.995,194,1.764,212,0.819,213,1.344,257,3.311,340,1.9,452,1.764,457,3.653,463,2.73,464,2.456,466,2.73,468,2.73,484,3.096,490,3.096,491,3.652,492,3.652,493,4.886,494,3.652,495,4.886,496,3.096,497,2.456,498,3.652,499,3.652]],["title/classes/LoginDto.html",[0,0.062,103,2.32]],["body/classes/LoginDto.html",[0,0.098,2,2.099,3,0.323,4,0.285,5,0.285,9,0.532,10,1.663,16,0.789,17,0.024,18,2.169,19,2.15,21,1.13,27,0.445,28,3.08,29,3.08,30,2.261,31,0.323,32,0.019,33,0.019,58,1.939,103,3.679,257,3.371,500,3.683,501,5.076,502,4.344,503,3.683,504,4.344,505,3.683,506,3.683]],["title/classes/RegisterDto.html",[0,0.062,113,2.114]],["body/classes/RegisterDto.html",[0,0.094,2,1.984,3,0.306,4,0.27,5,0.27,9,0.503,10,1.605,16,0.841,17,0.024,18,2.25,19,2.292,20,2.763,21,1.205,27,0.42,28,3.284,29,3.284,30,2.137,31,0.306,32,0.018,33,0.018,58,1.889,97,1.665,113,3.235,257,3.284,501,4.944,503,3.482,505,3.482,506,3.482,507,3.482,508,4.107,509,4.107,510,4.107]],["title/interfaces/RequestWithUser.html",[93,1.667,511,1.795]],["body/interfaces/RequestWithUser.html",[3,0.342,4,0.301,5,0.301,7,2.369,9,0.563,10,1.721,16,0.662,17,0.024,27,0.579,31,0.342,32,0.02,33,0.02,93,2.735,99,2.965,389,2.813,452,2.735,467,3.088,497,3.088,511,2.389,512,3.088,513,3.892]],["title/controllers/StripePaymentsController.html",[80,1.356,514,2.32]],["body/controllers/StripePaymentsController.html",[0,0.064,3,0.267,4,0.236,5,0.236,9,0.44,16,0.518,17,0.025,19,1.411,21,0.741,27,0.624,31,0.267,32,0.017,33,0.017,50,0.602,61,2.2,62,2.514,78,1.322,80,1.411,83,2.2,85,1.565,87,1.769,93,2.821,96,1.163,97,1.025,98,1.091,99,2.637,100,1.163,117,2.96,118,3.249,120,2.96,121,2.414,132,2.414,133,1.734,139,2.2,146,1.322,149,1.508,176,2.414,294,3.928,295,2.514,340,1.868,388,2.021,389,2.2,514,3.249,515,3.043,516,4.628,517,5.46,518,3.59,519,3.59,520,3.59,521,2.841,522,2.683,523,3.043,524,3.59,525,3.59,526,3.59,527,3.59,528,3.59,529,3.59]],["title/modules/StripePaymentsModule.html",[34,1.118,43,1.942]],["body/modules/StripePaymentsModule.html",[0,0.071,3,0.296,4,0.261,5,0.261,17,0.024,27,0.623,31,0.296,32,0.018,33,0.018,34,1.676,36,1.792,37,2.328,43,3.705,45,2.693,46,2.073,47,2.073,49,2.243,50,0.668,52,3.171,53,1.466,61,3.171,62,2.073,78,1.905,79,2.913,295,2.073,348,3.48,514,3.866,521,3.587,522,2.977,530,3.377,531,3.377,532,3.377,533,3.983,534,3.983]],["title/injectables/StripePaymentsService.html",[212,0.578,521,1.795]],["body/injectables/StripePaymentsService.html",[0,0.051,3,0.214,4,0.189,5,0.189,9,0.353,10,1.261,16,0.766,17,0.024,18,2.255,21,1.097,27,0.497,31,0.214,32,0.014,33,0.014,50,0.483,53,1.061,58,1.72,61,3.699,62,2.928,85,1.343,87,1.898,96,1.573,97,1.606,98,1.476,100,1.343,105,1.866,144,1.211,145,2.346,146,1.061,148,1.297,149,1.211,153,1.431,203,2.83,212,0.695,213,1.061,215,4.379,229,2.527,263,1.623,295,2.928,298,4.117,299,4.502,326,1.766,340,1.5,352,2.155,373,2.155,516,4.117,521,2.158,535,2.444,536,4.146,537,4.146,538,2.883,539,5.31,540,2.883,541,4.146,542,2.883,543,2.883,544,2.883,545,2.883,546,2.883,547,2.883,548,2.883,549,4.146,550,2.883,551,2.883,552,2.883,553,2.883,554,2.883,555,2.883]],["title/interfaces/TokenPayload.html",[249,1.942,511,1.795]],["body/interfaces/TokenPayload.html",[3,0.364,4,0.321,5,0.321,9,0.599,10,1.789,16,0.705,17,0.023,31,0.364,32,0.021,33,0.021,229,3.283,231,4.404,249,3.312,511,2.544,512,3.288,556,4.144,557,3.654]],["title/classes/UpdateUserAddressDto.html",[0,0.062,558,2.114]],["body/classes/UpdateUserAddressDto.html",[0,0.083,2,1.639,3,0.252,4,0.223,5,0.223,7,2.131,8,2.536,9,0.416,10,1.414,11,3.25,12,3.965,13,3.965,14,3.965,15,3.965,16,0.862,17,0.024,18,2.281,19,2.349,21,1.235,26,2.877,27,0.347,28,3.476,29,3.476,30,1.766,31,0.252,32,0.016,33,0.016,98,2.009,558,2.849,559,5.233,560,5.977,561,3.393,562,3.393,563,3.393,564,3.393,565,6.173]],["title/controllers/UsersController.html",[80,1.356,566,2.32]],["body/controllers/UsersController.html",[0,0.043,1,2.98,3,0.179,4,0.158,5,0.158,7,2.145,9,0.294,11,1.472,16,0.63,17,0.025,19,1.911,21,1.004,27,0.583,31,0.179,32,0.013,33,0.013,50,0.403,78,0.885,80,0.944,83,1.472,85,1.174,87,2.039,93,2.954,96,1.414,97,1.246,98,1.328,100,1.691,105,2.188,117,2.676,118,3.271,120,1.472,121,1.616,124,1.716,132,1.616,133,1.161,139,1.472,146,0.885,153,1.679,176,3.271,229,2.855,310,1.616,312,1.796,340,1.25,388,1.353,389,1.472,558,2.98,566,2.439,567,2.037,568,3.625,569,3.702,570,4.863,571,3.702,572,3.702,573,2.403,574,4.971,575,3.625,576,2.403,577,2.403,578,2.403,579,2.403,580,2.403,581,4.971,582,3.625,583,3.625,584,2.403,585,2.403,586,3.625,587,2.403,588,2.403,589,2.037,590,4.366,591,2.403,592,2.037,593,2.403,594,2.037,595,3.074,596,2.037,597,2.403,598,2.403,599,4.863,600,2.403,601,2.403,602,3.625,603,3.625,604,2.403,605,2.403]],["title/modules/UsersModule.html",[34,1.118,44,1.795]],["body/modules/UsersModule.html",[0,0.069,3,0.289,4,0.255,5,0.255,17,0.024,27,0.617,31,0.289,32,0.018,33,0.018,34,1.648,36,1.746,37,2.289,43,3.613,44,3.492,45,2.647,46,2.019,47,2.019,49,2.864,50,0.65,62,2.019,63,3.29,78,1.873,79,2.864,124,2.699,295,2.019,348,3.422,566,3.817,592,3.29,606,3.29,607,3.29,608,3.29,609,3.88,610,3.88,611,3.88]],["title/injectables/UsersService.html",[124,1.356,212,0.578]],["body/injectables/UsersService.html",[0,0.018,1,1.725,3,0.073,4,0.065,5,0.065,7,2.245,9,0.121,10,0.529,11,3.325,12,2.104,13,2.104,14,2.104,15,2.104,16,0.691,17,0.025,18,1.654,21,0.989,27,0.392,31,0.073,32,0.006,33,0.006,50,0.165,58,1.757,62,0.513,85,0.563,87,1.966,90,2.329,96,1.504,97,1.405,98,1.412,100,1.701,105,1.93,124,0.683,136,2.162,144,0.414,146,0.363,148,2.089,149,2.165,153,1.481,169,1.169,184,1.474,212,0.291,213,0.363,229,3.097,231,2.385,238,1.978,239,0.835,240,0.835,241,0.835,242,0.835,243,1.474,244,0.736,253,0.835,257,0.979,262,1.169,263,2.415,265,2.386,295,0.513,303,1.893,326,1.725,334,3.795,340,0.513,475,2.723,479,0.835,497,0.663,521,1.845,522,0.736,523,0.835,558,1.725,569,1.978,571,1.474,572,1.978,574,1.474,581,3.795,589,4.452,594,0.835,595,1.474,596,0.835,612,0.835,613,3.212,614,2.333,615,1.738,616,1.738,617,1.738,618,1.738,619,1.738,620,1.738,621,0.985,622,1.738,623,0.985,624,0.985,625,1.738,626,3.206,627,6.503,628,5.573,629,0.985,630,0.985,631,1.738,632,1.738,633,0.985,634,2.814,635,2.814,636,2.814,637,1.738,638,0.985,639,1.738,640,0.985,641,1.738,642,1.738,643,4.075,644,1.738,645,0.985,646,1.738,647,2.814,648,1.738,649,0.985,650,1.738,651,1.738,652,0.985,653,1.738,654,3.545,655,1.738,656,0.985,657,1.738,658,1.738,659,0.985,660,0.985,661,1.738,662,2.814,663,1.738,664,0.985,665,0.985,666,1.738,667,0.985,668,0.985,669,1.738,670,2.814,671,2.814,672,0.985,673,0.985,674,2.333,675,0.985,676,2.814,677,0.985,678,1.738,679,1.738,680,0.985,681,1.738,682,2.333,683,0.985,684,0.985,685,1.738,686,0.985,687,0.985,688,1.738,689,0.985,690,0.985,691,0.985,692,0.985,693,0.985]],["title/interfaces/VerificationTokenPayload.html",[421,2.32,511,1.795]],["body/interfaces/VerificationTokenPayload.html",[3,0.362,4,0.319,5,0.319,9,0.596,10,1.784,16,0.702,17,0.023,18,2.174,31,0.362,32,0.02,33,0.02,58,2.118,127,2.351,421,3.945,511,2.532,512,3.273,557,3.637,694,4.125]],["title/coverage.html",[695,3.515]],["body/coverage.html",[0,0.104,1,1.581,5,0.169,6,2.187,7,1.32,8,2.858,16,0.372,17,0.024,32,0.013,33,0.013,34,0.835,59,1.989,62,1.989,80,2.114,81,1.735,82,2.187,90,1.342,93,1.246,103,1.735,113,1.581,122,1.342,124,1.014,126,1.342,127,2.433,130,1.735,133,1.246,135,1.735,136,1.246,189,1.581,190,1.581,191,1.581,212,1.058,214,2.187,249,1.452,263,1.452,290,1.735,291,2.187,292,2.187,294,1.735,295,2.37,296,2.187,297,2.187,303,1.735,304,2.187,305,2.187,309,1.928,310,1.735,312,1.928,313,2.187,327,1.735,328,2.187,335,1.342,350,2.187,370,1.735,371,2.187,388,2.152,389,1.581,406,2.187,421,1.735,450,2.858,454,2.187,455,2.187,456,2.187,480,2.187,488,2.187,490,2.187,500,2.187,507,2.187,511,2.37,513,2.187,514,1.735,515,2.187,521,1.342,535,2.187,556,2.187,557,2.858,558,1.581,559,2.187,566,1.735,567,2.187,612,2.187,694,2.187,695,1.928,696,2.579,697,2.579,698,2.579,699,6.937,700,5.037,701,2.579,702,5.634,703,4.555,704,5.831,705,5.634,706,2.187,707,3.823,708,2.187,709,2.858,710,2.579,711,2.187,712,3.823,713,2.579,714,2.579,715,2.579,716,2.579]],["title/dependencies.html",[37,1.866,717,2.445]],["body/dependencies.html",[0,0.091,17,0.025,30,2.019,32,0.018,33,0.018,37,1.746,50,0.65,53,1.429,55,3.29,61,2.378,142,3.29,166,2.901,194,1.875,202,2.378,244,2.901,358,3.29,464,3.817,465,2.901,467,3.422,496,3.29,497,2.61,718,3.88,719,5.675,720,3.88,721,3.88,722,3.88,723,3.88,724,3.88,725,3.88,726,3.88,727,3.88,728,3.88,729,3.88,730,3.88,731,3.88,732,3.88,733,3.88,734,3.88,735,3.88,736,3.88,737,3.88,738,3.88,739,3.88,740,3.88,741,3.88,742,3.88,743,3.88,744,3.88,745,3.88,746,3.88,747,3.88,748,3.88,749,3.88,750,3.88]],["title/miscellaneous/enumerations.html",[751,1.624,752,3.516]],["body/miscellaneous/enumerations.html",[9,0.625,17,0.022,32,0.021,33,0.021,245,5.115,246,4.325,247,4.51,751,2.872,752,4.325,753,5.102,754,6.034,755,5.102,756,4.325,757,5.102]],["title/miscellaneous/functions.html",[751,1.624,758,3.516]],["body/miscellaneous/functions.html",[9,0.647,17,0.021,32,0.021,33,0.021,709,3.947,711,5.526,751,2.973,758,4.477,759,4.477]],["title/index.html",[9,0.353,760,2.884,761,2.884]],["body/index.html",[4,0.244,17,0.024,32,0.017,33,0.017,433,3.15,626,2.778,695,2.778,762,3.716,763,3.716,764,4.944,765,3.716,766,3.716,767,3.716,768,3.716,769,3.716,770,3.716,771,5.556,772,3.716,773,3.716,774,3.716,775,3.716,776,6.471,777,3.716,778,3.716,779,3.716,780,6.34,781,3.716,782,3.716,783,4.944,784,3.716,785,3.716,786,3.716,787,3.716,788,4.944,789,4.944,790,3.716,791,3.716,792,3.716,793,4.944,794,4.944,795,3.716,796,3.716,797,3.716,798,3.716,799,3.716,800,3.15,801,3.716,802,3.716,803,3.716,804,3.716,805,3.716,806,3.716,807,3.716,808,3.716,809,3.716,810,3.15,811,3.716,812,3.716,813,3.716,814,3.716,815,3.716,816,3.716,817,3.15]],["title/modules.html",[36,2.116]],["body/modules.html",[17,0.02,32,0.02,33,0.02,35,3.185,36,2.13,40,2.902,41,2.666,42,2.666,43,2.666,44,2.464,800,5.725,818,6.753,819,6.753,820,6.753]],["title/overview.html",[821,3.986]],["body/overview.html",[2,1.452,17,0.024,32,0.015,33,0.015,35,4.428,36,1.352,37,1.922,38,2.548,39,2.548,40,4.124,41,3.441,42,3.671,43,3.441,44,3.354,45,2.223,46,1.564,47,1.564,78,1.107,122,2.586,124,2.402,126,3.18,186,2.548,187,2.548,189,3.046,190,3.046,191,3.046,213,1.107,309,2.247,335,3.18,344,2.548,345,2.548,346,2.548,399,2.548,400,2.548,402,2.548,512,2.022,521,3.18,530,2.548,531,2.548,532,2.548,606,2.548,607,2.548,608,2.548,821,2.548,822,3.006,823,3.006,824,3.006,825,3.006,826,3.006,827,3.006]],["title/properties.html",[10,1.261,717,2.445]],["body/properties.html",[10,1.582,17,0.024,32,0.021,33,0.021,626,3.889,810,4.41,817,4.41,828,5.202,829,5.202,830,5.202]],["title/miscellaneous/variables.html",[751,1.624,831,3.516]],["body/miscellaneous/variables.html",[0,0.079,7,1.525,9,0.541,16,0.797,17,0.024,32,0.019,33,0.019,34,1.79,87,1.431,99,2.134,133,2.134,148,2.487,149,1.856,153,1.908,175,3.745,315,3.745,316,3.745,322,3.745,452,2.134,706,3.745,708,4.686,709,3.302,751,2.487,756,3.745,759,3.745,831,3.745,832,4.417,833,4.417,834,5.527,835,4.417,836,4.417,837,4.417,838,4.417]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"classes/AddUserAddressDto.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateUserDto.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"controllers/StripePaymentsController.html":{},"modules/StripePaymentsModule.html":{},"injectables/StripePaymentsService.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateUserAddressDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":699,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":829,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":742,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":733,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":732,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":737,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":705,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":704,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":702,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":703,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":712,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":700,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":701,"title":{},"body":{"coverage.html":{}}}],["08",{"_index":547,"title":{},"body":{"injectables/StripePaymentsService.html":{}}}],["1",{"_index":826,"title":{},"body":{"overview.html":{}}}],["1.0.0",{"_index":739,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":735,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":253,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["11",{"_index":824,"title":{},"body":{"overview.html":{}}}],["11/13",{"_index":714,"title":{},"body":{"coverage.html":{}}}],["17.1.1",{"_index":718,"title":{},"body":{"dependencies.html":{}}}],["2.1.0",{"_index":720,"title":{},"body":{"dependencies.html":{}}}],["2020",{"_index":546,"title":{},"body":{"injectables/StripePaymentsService.html":{}}}],["23505",{"_index":757,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["27",{"_index":548,"title":{},"body":{"injectables/StripePaymentsService.html":{}}}],["3",{"_index":827,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":744,"title":{},"body":{"dependencies.html":{}}}],["3.15.2",{"_index":726,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":738,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":730,"title":{},"body":{"dependencies.html":{}}}],["4.4.0",{"_index":750,"title":{},"body":{"dependencies.html":{}}}],["404",{"_index":636,"title":{},"body":{"injectables/UsersService.html":{}}}],["5",{"_index":823,"title":{},"body":{"overview.html":{}}}],["5.0.1",{"_index":727,"title":{},"body":{"dependencies.html":{}}}],["5.2.1",{"_index":725,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":822,"title":{},"body":{"overview.html":{}}}],["6.7.5",{"_index":736,"title":{},"body":{"dependencies.html":{}}}],["7",{"_index":825,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":746,"title":{},"body":{"dependencies.html":{}}}],["8.0.0",{"_index":719,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":722,"title":{},"body":{"dependencies.html":{}}}],["8.2.2",{"_index":723,"title":{},"body":{"dependencies.html":{}}}],["84",{"_index":713,"title":{},"body":{"coverage.html":{}}}],["9.9.0",{"_index":747,"title":{},"body":{"dependencies.html":{}}}],["accesstokencookie",{"_index":158,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["action",{"_index":600,"title":{},"body":{"controllers/UsersController.html":{}}}],["address",{"_index":11,"title":{},"body":{"classes/AddUserAddressDto.html":{},"injectables/EmailVerificationService.html":{},"classes/UpdateUserAddressDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["address')@useguards(emailconfirmationguard)@useguards(jwtauthenticationguard",{"_index":576,"title":{},"body":{"controllers/UsersController.html":{}}}],["address.dto",{"_index":595,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["address.dto.ts",{"_index":8,"title":{},"body":{"classes/AddUserAddressDto.html":{},"classes/UpdateUserAddressDto.html":{},"coverage.html":{}}}],["address.dto.ts:10",{"_index":23,"title":{},"body":{"classes/AddUserAddressDto.html":{}}}],["address.dto.ts:12",{"_index":562,"title":{},"body":{"classes/UpdateUserAddressDto.html":{}}}],["address.dto.ts:14",{"_index":25,"title":{},"body":{"classes/AddUserAddressDto.html":{}}}],["address.dto.ts:17",{"_index":563,"title":{},"body":{"classes/UpdateUserAddressDto.html":{}}}],["address.dto.ts:18",{"_index":24,"title":{},"body":{"classes/AddUserAddressDto.html":{}}}],["address.dto.ts:22",{"_index":26,"title":{},"body":{"classes/AddUserAddressDto.html":{},"classes/UpdateUserAddressDto.html":{}}}],["address.dto.ts:27",{"_index":564,"title":{},"body":{"classes/UpdateUserAddressDto.html":{}}}],["address.dto.ts:6",{"_index":22,"title":{},"body":{"classes/AddUserAddressDto.html":{}}}],["address.dto.ts:7",{"_index":561,"title":{},"body":{"classes/UpdateUserAddressDto.html":{}}}],["address/:addressid",{"_index":602,"title":{},"body":{"controllers/UsersController.html":{}}}],["address/:addressid')@useguards(emailconfirmationguard)@useguards(jwtauthenticationguard",{"_index":583,"title":{},"body":{"controllers/UsersController.html":{}}}],["addressdata",{"_index":574,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["addresses",{"_index":671,"title":{},"body":{"injectables/UsersService.html":{}}}],["addressid",{"_index":581,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["adds",{"_index":625,"title":{},"body":{"injectables/UsersService.html":{}}}],["adduseraddress",{"_index":569,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["adduseraddress(id",{"_index":623,"title":{},"body":{"injectables/UsersService.html":{}}}],["adduseraddress(undefined",{"_index":573,"title":{},"body":{"controllers/UsersController.html":{}}}],["adduseraddressdto",{"_index":1,"title":{"classes/AddUserAddressDto.html":{}},"body":{"classes/AddUserAddressDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["age=${this.configservice.get",{"_index":284,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["age=0",{"_index":278,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["already",{"_index":264,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{}}}],["amazing",{"_index":801,"title":{},"body":{"index.html":{}}}],["amount",{"_index":298,"title":{},"body":{"classes/CreateChargeDto.html":{},"injectables/StripePaymentsService.html":{}}}],["apibody",{"_index":141,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["apiversion",{"_index":545,"title":{},"body":{"injectables/StripePaymentsService.html":{}}}],["app",{"_index":778,"title":{},"body":{"index.html":{}}}],["application",{"_index":431,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["applications",{"_index":770,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":35,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["async",{"_index":87,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"controllers/EmailController.html":{},"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/StripePaymentsController.html":{},"injectables/StripePaymentsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["auth",{"_index":365,"title":{},"body":{"injectables/EmailService.html":{}}}],["authenticate",{"_index":86,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["authenticate(@req",{"_index":185,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["authenticate(request",{"_index":92,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["authentication",{"_index":84,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["authentication.controller",{"_index":196,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["authentication.guard",{"_index":132,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailVerificationController.html":{},"controllers/StripePaymentsController.html":{},"controllers/UsersController.html":{}}}],["authentication.guard.ts",{"_index":450,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/LocalAuthenticationGuard.html":{},"coverage.html":{}}}],["authentication.service",{"_index":123,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/LocalStrategy.html":{}}}],["authentication/authentication.module",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["authentication=${token",{"_index":283,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["authenticationcontroller",{"_index":81,"title":{"controllers/AuthenticationController.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"coverage.html":{}}}],["authenticationmodule",{"_index":40,"title":{"modules/AuthenticationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules.html":{},"overview.html":{}}}],["authenticationservice",{"_index":122,"title":{"injectables/AuthenticationService.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["authguard",{"_index":451,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/LocalAuthenticationGuard.html":{}}}],["authguard('jwt",{"_index":453,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{}}}],["authguard('local",{"_index":489,"title":{},"body":{"injectables/LocalAuthenticationGuard.html":{}}}],["author",{"_index":810,"title":{},"body":{"index.html":{},"properties.html":{}}}],["await",{"_index":149,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/EmailController.html":{},"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"controllers/StripePaymentsController.html":{},"injectables/StripePaymentsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["backers",{"_index":802,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":420,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["badrequestexception('bad",{"_index":449,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["badrequestexception('email",{"_index":438,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["bcrypt",{"_index":244,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcryptcompare",{"_index":243,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["bcrypthash",{"_index":241,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["bcrypthash(refreshtoken",{"_index":693,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypthash(registrationdata.password",{"_index":252,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["body",{"_index":117,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailController.html":{},"controllers/EmailVerificationController.html":{},"controllers/StripePaymentsController.html":{},"controllers/UsersController.html":{}}}],["boolean",{"_index":319,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["bootstrap",{"_index":711,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":820,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":818,"title":{},"body":{"modules.html":{}}}],["building",{"_index":765,"title":{},"body":{"index.html":{}}}],["cache",{"_index":728,"title":{},"body":{"dependencies.html":{}}}],["canactivate",{"_index":314,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["canactivate(context",{"_index":315,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"miscellaneous/variables.html":{}}}],["catch",{"_index":259,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{}}}],["charge",{"_index":516,"title":{},"body":{"controllers/StripePaymentsController.html":{},"injectables/StripePaymentsService.html":{}}}],["charge(amount",{"_index":538,"title":{},"body":{"injectables/StripePaymentsService.html":{}}}],["charge.amount",{"_index":527,"title":{},"body":{"controllers/StripePaymentsController.html":{}}}],["charge.dto",{"_index":524,"title":{},"body":{"controllers/StripePaymentsController.html":{}}}],["charge.dto.ts",{"_index":297,"title":{},"body":{"classes/CreateChargeDto.html":{},"coverage.html":{}}}],["charge.dto.ts:6",{"_index":302,"title":{},"body":{"classes/CreateChargeDto.html":{}}}],["charge.dto.ts:9",{"_index":301,"title":{},"body":{"classes/CreateChargeDto.html":{}}}],["charge.paymentmethodid",{"_index":528,"title":{},"body":{"controllers/StripePaymentsController.html":{}}}],["city",{"_index":12,"title":{},"body":{"classes/AddUserAddressDto.html":{},"classes/UpdateUserAddressDto.html":{},"injectables/UsersService.html":{}}}],["class",{"_index":0,"title":{"classes/AddUserAddressDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserAddressDto.html":{}},"body":{"classes/AddUserAddressDto.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateUserDto.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"controllers/StripePaymentsController.html":{},"modules/StripePaymentsModule.html":{},"injectables/StripePaymentsService.html":{},"classes/UpdateUserAddressDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AddUserAddressDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserAddressDto.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":384,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["click",{"_index":432,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["client",{"_index":663,"title":{},"body":{"injectables/UsersService.html":{}}}],["cluster_appmodule",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule",{"_index":186,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_imports",{"_index":188,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["cluster_authenticationmodule_providers",{"_index":187,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_emailmodule",{"_index":344,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_exports",{"_index":345,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_providers",{"_index":346,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailverificationmodule",{"_index":399,"title":{},"body":{"modules/EmailVerificationModule.html":{},"overview.html":{}}}],["cluster_emailverificationmodule_exports",{"_index":402,"title":{},"body":{"modules/EmailVerificationModule.html":{},"overview.html":{}}}],["cluster_emailverificationmodule_imports",{"_index":401,"title":{},"body":{"modules/EmailVerificationModule.html":{}}}],["cluster_emailverificationmodule_providers",{"_index":400,"title":{},"body":{"modules/EmailVerificationModule.html":{},"overview.html":{}}}],["cluster_stripepaymentsmodule",{"_index":530,"title":{},"body":{"modules/StripePaymentsModule.html":{},"overview.html":{}}}],["cluster_stripepaymentsmodule_exports",{"_index":531,"title":{},"body":{"modules/StripePaymentsModule.html":{},"overview.html":{}}}],["cluster_stripepaymentsmodule_providers",{"_index":532,"title":{},"body":{"modules/StripePaymentsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":606,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":607,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":609,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":608,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code.enum",{"_index":248,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["code.enum.ts",{"_index":754,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["compare",{"_index":242,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["compared",{"_index":642,"title":{},"body":{"injectables/UsersService.html":{}}}],["configmodule",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailModule.html":{},"modules/EmailVerificationModule.html":{},"modules/StripePaymentsModule.html":{}}}],["configmodule.forroot",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":203,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/StripePaymentsService.html":{}}}],["configservice.get('jwt_access_secret",{"_index":208,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["configservice.get('jwt_access_token_expires_in",{"_index":211,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["configservice.get('jwt_access_token_secret",{"_index":486,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('jwt_refresh_token_secret",{"_index":473,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["confirm",{"_index":373,"title":{},"body":{"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{},"injectables/StripePaymentsService.html":{}}}],["confirm(@body",{"_index":395,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["confirm(confirmationdata",{"_index":375,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["confirmation",{"_index":381,"title":{},"body":{"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{}}}],["confirmation.guard",{"_index":593,"title":{},"body":{"controllers/UsersController.html":{}}}],["confirmation.guard.ts",{"_index":313,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"coverage.html":{}}}],["confirmation.guard.ts:11",{"_index":317,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["confirmationdata",{"_index":378,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["confirmationdata.token",{"_index":397,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["confirmed",{"_index":439,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["confirmemail",{"_index":407,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["confirmemail(email",{"_index":412,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["confirmemaildto",{"_index":290,"title":{"classes/ConfirmEmailDto.html":{}},"body":{"classes/ConfirmEmailDto.html":{},"controllers/EmailVerificationController.html":{},"coverage.html":{}}}],["connect",{"_index":672,"title":{},"body":{"injectables/UsersService.html":{}}}],["console.log('refresh",{"_index":173,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["console.log(cookies",{"_index":182,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["const",{"_index":148,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/StripePaymentsService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":144,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/StripePaymentsService.html":{},"injectables/UsersService.html":{}}}],["constructor(authenticationservice",{"_index":491,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(configservice",{"_index":352,"title":{},"body":{"injectables/EmailService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/StripePaymentsService.html":{}}}],["constructor(jwtservice",{"_index":410,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["constructor(private",{"_index":340,"title":{},"body":{"controllers/EmailController.html":{},"injectables/EmailService.html":{},"injectables/LocalStrategy.html":{},"controllers/StripePaymentsController.html":{},"injectables/StripePaymentsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(stripepaymentsservice",{"_index":621,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":221,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{}}}],["context",{"_index":318,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":322,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"miscellaneous/variables.html":{}}}],["controller",{"_index":80,"title":{"controllers/AuthenticationController.html":{},"controllers/EmailController.html":{},"controllers/EmailVerificationController.html":{},"controllers/StripePaymentsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailController.html":{},"controllers/EmailVerificationController.html":{},"controllers/StripePaymentsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('authentication",{"_index":143,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["controller('charge",{"_index":525,"title":{},"body":{"controllers/StripePaymentsController.html":{}}}],["controller('email",{"_index":339,"title":{},"body":{"controllers/EmailController.html":{},"controllers/EmailVerificationController.html":{}}}],["controller('users",{"_index":597,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"controllers/StripePaymentsController.html":{},"modules/StripePaymentsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cookie",{"_index":166,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"dependencies.html":{}}}],["cookies",{"_index":180,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["country",{"_index":13,"title":{},"body":{"classes/AddUserAddressDto.html":{},"classes/UpdateUserAddressDto.html":{},"injectables/UsersService.html":{}}}],["coverage",{"_index":695,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":614,"title":{},"body":{"injectables/UsersService.html":{}}}],["create(undefined",{"_index":629,"title":{},"body":{"injectables/UsersService.html":{}}}],["createcharge",{"_index":517,"title":{},"body":{"controllers/StripePaymentsController.html":{}}}],["createcharge(charge",{"_index":518,"title":{},"body":{"controllers/StripePaymentsController.html":{}}}],["createchargedto",{"_index":294,"title":{"classes/CreateChargeDto.html":{}},"body":{"classes/CreateChargeDto.html":{},"controllers/StripePaymentsController.html":{},"coverage.html":{}}}],["createcustomer",{"_index":536,"title":{},"body":{"injectables/StripePaymentsService.html":{}}}],["createcustomer(name",{"_index":541,"title":{},"body":{"injectables/StripePaymentsService.html":{}}}],["createdat",{"_index":687,"title":{},"body":{"injectables/UsersService.html":{}}}],["createduser",{"_index":255,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["createduser.password",{"_index":258,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["creates",{"_index":631,"title":{},"body":{"injectables/UsersService.html":{}}}],["createtransport",{"_index":357,"title":{},"body":{"injectables/EmailService.html":{}}}],["createuserdto",{"_index":303,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["credentials",{"_index":273,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["currency",{"_index":554,"title":{},"body":{"injectables/StripePaymentsService.html":{}}}],["currenthashedrefreshtoken",{"_index":682,"title":{},"body":{"injectables/UsersService.html":{}}}],["customer",{"_index":552,"title":{},"body":{"injectables/StripePaymentsService.html":{}}}],["customerid",{"_index":539,"title":{},"body":{"injectables/StripePaymentsService.html":{}}}],["data",{"_index":334,"title":{},"body":{"controllers/EmailController.html":{},"injectables/UsersService.html":{}}}],["database_url",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":688,"title":{},"body":{"injectables/UsersService.html":{}}}],["decodeconfirmationtoken",{"_index":408,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["decodeconfirmationtoken(token",{"_index":414,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["decorators",{"_index":19,"title":{},"body":{"classes/AddUserAddressDto.html":{},"controllers/AuthenticationController.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateChargeDto.html":{},"controllers/EmailController.html":{},"controllers/EmailVerificationController.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"controllers/StripePaymentsController.html":{},"classes/UpdateUserAddressDto.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":833,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":21,"title":{},"body":{"classes/AddUserAddressDto.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateUserDto.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"controllers/StripePaymentsController.html":{},"injectables/StripePaymentsService.html":{},"classes/UpdateUserAddressDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":588,"title":{},"body":{"controllers/UsersController.html":{}}}],["delete('/remove",{"_index":582,"title":{},"body":{"controllers/UsersController.html":{}}}],["deletes",{"_index":653,"title":{},"body":{"injectables/UsersService.html":{}}}],["dependencies",{"_index":37,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailModule.html":{},"modules/EmailVerificationModule.html":{},"modules/StripePaymentsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":626,"title":{},"body":{"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["desired",{"_index":628,"title":{},"body":{"injectables/UsersService.html":{}}}],["development",{"_index":779,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":696,"title":{},"body":{"coverage.html":{}}}],["dto",{"_index":666,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto/add",{"_index":594,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dto/confirm",{"_index":386,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["dto/create",{"_index":523,"title":{},"body":{"controllers/StripePaymentsController.html":{},"injectables/UsersService.html":{}}}],["dto/login.dto",{"_index":140,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["dto/register.dto",{"_index":129,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["dto/update",{"_index":596,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["e2e",{"_index":790,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":766,"title":{},"body":{"index.html":{}}}],["email",{"_index":58,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"injectables/StripePaymentsService.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{}}}],["email.controller",{"_index":349,"title":{},"body":{"modules/EmailModule.html":{}}}],["email.dto",{"_index":387,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["email.dto.ts",{"_index":292,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"coverage.html":{}}}],["email.dto.ts:6",{"_index":293,"title":{},"body":{"classes/ConfirmEmailDto.html":{}}}],["email.service",{"_index":336,"title":{},"body":{"controllers/EmailController.html":{},"modules/EmailModule.html":{}}}],["email/email.module",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["email_confirmation_url",{"_index":73,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailVerificationService.html":{}}}],["email_password",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["email_port",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["email_service",{"_index":74,"title":{},"body":{"modules/AppModule.html":{}}}],["email_user",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["email_verification_token_expiration_time",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailVerificationService.html":{}}}],["email_verification_token_secret",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["emailconfirmationguard",{"_index":310,"title":{"guards/EmailConfirmationGuard.html":{}},"body":{"guards/EmailConfirmationGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["emailconfirmationservice",{"_index":391,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["emailcontroller",{"_index":327,"title":{"controllers/EmailController.html":{}},"body":{"controllers/EmailController.html":{},"modules/EmailModule.html":{},"coverage.html":{}}}],["emailmodule",{"_index":41,"title":{"modules/EmailModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EmailModule.html":{},"modules/EmailVerificationModule.html":{},"modules.html":{},"overview.html":{}}}],["emailservice",{"_index":335,"title":{"injectables/EmailService.html":{}},"body":{"controllers/EmailController.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/EmailVerificationService.html":{},"coverage.html":{},"overview.html":{}}}],["emailverificationcontroller",{"_index":370,"title":{"controllers/EmailVerificationController.html":{}},"body":{"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"coverage.html":{}}}],["emailverificationmodule",{"_index":42,"title":{"modules/EmailVerificationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailVerificationModule.html":{},"modules.html":{},"overview.html":{}}}],["emailverificationservice",{"_index":126,"title":{"injectables/EmailVerificationService.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"coverage.html":{},"overview.html":{}}}],["enumerations",{"_index":752,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":247,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{},"miscellaneous/enumerations.html":{}}}],["error?.code",{"_index":260,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["error?.name",{"_index":446,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["executioncontext",{"_index":316,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":678,"title":{},"body":{"injectables/UsersService.html":{}}}],["exists",{"_index":265,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["expired",{"_index":448,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["expiresin",{"_index":210,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{}}}],["export",{"_index":31,"title":{},"body":{"classes/AddUserAddressDto.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateUserDto.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"controllers/StripePaymentsController.html":{},"modules/StripePaymentsModule.html":{},"injectables/StripePaymentsService.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateUserAddressDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{}}}],["exports",{"_index":348,"title":{},"body":{"modules/EmailModule.html":{},"modules/EmailVerificationModule.html":{},"modules/StripePaymentsModule.html":{},"modules/UsersModule.html":{}}}],["express",{"_index":467,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"dependencies.html":{}}}],["extends",{"_index":452,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"interfaces/RequestWithUser.html":{},"miscellaneous/variables.html":{}}}],["extractjwt",{"_index":462,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt.fromextractors",{"_index":470,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AddUserAddressDto.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateUserDto.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"controllers/StripePaymentsController.html":{},"modules/StripePaymentsModule.html":{},"injectables/StripePaymentsService.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateUserAddressDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["first",{"_index":325,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["framework",{"_index":764,"title":{},"body":{"index.html":{}}}],["function",{"_index":710,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":758,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/getallusers",{"_index":598,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/getallusers')@useguards(emailconfirmationguard)@useguards(jwtauthenticationguard",{"_index":578,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('refresh",{"_index":171,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["getallusers",{"_index":570,"title":{},"body":{"controllers/UsersController.html":{}}}],["getauthenticateduser",{"_index":216,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getauthenticateduser(email",{"_index":224,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getbyemail",{"_index":615,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyemail(email",{"_index":632,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyid",{"_index":616,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyid(id",{"_index":637,"title":{},"body":{"injectables/UsersService.html":{}}}],["getcookiesforlogout",{"_index":217,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtaccesstoken",{"_index":218,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtaccesstoken(userid",{"_index":228,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtrefreshtoken",{"_index":219,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtrefreshtoken(userid",{"_index":232,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getting",{"_index":760,"title":{"index.html":{}},"body":{}}],["getuserifrefreshtokenmatches",{"_index":617,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserifrefreshtokenmatches(refreshtoken",{"_index":639,"title":{},"body":{"injectables/UsersService.html":{}}}],["given",{"_index":654,"title":{},"body":{"injectables/UsersService.html":{}}}],["grow",{"_index":797,"title":{},"body":{"index.html":{}}}],["guard",{"_index":309,"title":{"guards/EmailConfirmationGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":311,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["guards/jwt",{"_index":134,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["guards/local",{"_index":131,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["hapi/joi",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["hash",{"_index":240,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["hashedpassword",{"_index":236,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["hashing",{"_index":658,"title":{},"body":{"injectables/UsersService.html":{}}}],["here",{"_index":433,"title":{},"body":{"injectables/EmailVerificationService.html":{},"index.html":{}}}],["host",{"_index":360,"title":{},"body":{"injectables/EmailService.html":{}}}],["httpcode",{"_index":119,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpcode(200",{"_index":154,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpcode(200)@useguards(localauthenticationguard)@post('login')@apibody({type",{"_index":102,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpexception",{"_index":238,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["httponly",{"_index":275,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["https://nestjs.com",{"_index":814,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":239,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["httpstatus.bad_request",{"_index":266,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpstatus.internal_server_error",{"_index":270,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpstatus.not_found",{"_index":679,"title":{},"body":{"injectables/UsersService.html":{}}}],["id",{"_index":627,"title":{},"body":{"injectables/UsersService.html":{}}}],["identifier",{"_index":697,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":321,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["import",{"_index":27,"title":{},"body":{"classes/AddUserAddressDto.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateChargeDto.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"controllers/StripePaymentsController.html":{},"modules/StripePaymentsModule.html":{},"injectables/StripePaymentsService.html":{},"classes/UpdateUserAddressDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailModule.html":{},"modules/EmailVerificationModule.html":{},"modules/StripePaymentsModule.html":{},"modules/UsersModule.html":{}}}],["include",{"_index":674,"title":{},"body":{"injectables/UsersService.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"classes/AddUserAddressDto.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateUserDto.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"controllers/StripePaymentsController.html":{},"injectables/StripePaymentsService.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateUserAddressDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AddUserAddressDto.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateUserDto.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"controllers/StripePaymentsController.html":{},"modules/StripePaymentsModule.html":{},"injectables/StripePaymentsService.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateUserAddressDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{}}}],["inject",{"_index":205,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["injectable",{"_index":212,"title":{"injectables/AuthenticationService.html":{},"injectables/EmailService.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/StripePaymentsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthenticationService.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailService.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/StripePaymentsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":213,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailService.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/StripePaymentsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["installation",{"_index":775,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":777,"title":{},"body":{"index.html":{}}}],["interface",{"_index":511,"title":{"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"interfaces/VerificationTokenPayload.html":{}},"body":{"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["interfaces",{"_index":512,"title":{},"body":{"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"interfaces/VerificationTokenPayload.html":{},"overview.html":{}}}],["isemail",{"_index":501,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["isemailverified",{"_index":692,"title":{},"body":{"injectables/UsersService.html":{}}}],["isnotempty",{"_index":29,"title":{},"body":{"classes/AddUserAddressDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateChargeDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserAddressDto.html":{}}}],["isnumber",{"_index":300,"title":{},"body":{"classes/CreateChargeDto.html":{}}}],["isoptional",{"_index":565,"title":{},"body":{"classes/UpdateUserAddressDto.html":{}}}],["ispasswordmatching",{"_index":289,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["isrefreshtokenmatching",{"_index":681,"title":{},"body":{"injectables/UsersService.html":{}}}],["isstring",{"_index":28,"title":{},"body":{"classes/AddUserAddressDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateChargeDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserAddressDto.html":{}}}],["isstring()@isnotempty",{"_index":20,"title":{},"body":{"classes/AddUserAddressDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateChargeDto.html":{},"classes/RegisterDto.html":{}}}],["isstring()@isnotempty()@isoptional",{"_index":560,"title":{},"body":{"classes/UpdateUserAddressDto.html":{}}}],["isstring()@isnotempty()@minlength(8",{"_index":503,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["joi",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.object",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["join",{"_index":804,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":465,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt_access_token_expires_in",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthenticationService.html":{}}}],["jwt_access_token_secret",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt_refresh_token_expires_in",{"_index":288,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["jwtauthenticationguard",{"_index":133,"title":{"injectables/JwtAuthenticationGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailVerificationController.html":{},"injectables/JwtAuthenticationGuard.html":{},"controllers/StripePaymentsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtfromrequest",{"_index":469,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":201,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/EmailVerificationModule.html":{}}}],["jwtmodule.registerasync",{"_index":204,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwtrefreshguard",{"_index":135,"title":{"injectables/JwtRefreshGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["jwtrefreshtokenstrategy",{"_index":189,"title":{"injectables/JwtRefreshTokenStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtservice",{"_index":222,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{}}}],["jwtstrategy",{"_index":190,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":811,"title":{},"body":{"index.html":{}}}],["license",{"_index":817,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":794,"title":{},"body":{"index.html":{}}}],["link",{"_index":392,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["link')@useguards(jwtauthenticationguard",{"_index":382,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["local",{"_index":496,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthenticationguard",{"_index":130,"title":{"injectables/LocalAuthenticationGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/LocalAuthenticationGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":191,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["login",{"_index":88,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["login(@req",{"_index":157,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["login(request",{"_index":101,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logindto",{"_index":103,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logout",{"_index":89,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logout(@req",{"_index":178,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logout(request",{"_index":106,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["mail",{"_index":337,"title":{},"body":{"controllers/EmailController.html":{},"injectables/EmailService.html":{}}}],["mail.options",{"_index":331,"title":{},"body":{"controllers/EmailController.html":{},"injectables/EmailService.html":{}}}],["manager",{"_index":729,"title":{},"body":{"dependencies.html":{}}}],["markemailasconfirmed",{"_index":618,"title":{},"body":{"injectables/UsersService.html":{}}}],["markemailasconfirmed(email",{"_index":644,"title":{},"body":{"injectables/UsersService.html":{}}}],["marks",{"_index":646,"title":{},"body":{"injectables/UsersService.html":{}}}],["matches",{"_index":641,"title":{},"body":{"injectables/UsersService.html":{}}}],["matching",{"_index":33,"title":{},"body":{"classes/AddUserAddressDto.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateUserDto.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"controllers/StripePaymentsController.html":{},"modules/StripePaymentsModule.html":{},"injectables/StripePaymentsService.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateUserAddressDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":277,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["metadata",{"_index":741,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":85,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/StripePaymentsController.html":{},"injectables/StripePaymentsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":505,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["minlength(8",{"_index":506,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["miscellaneous",{"_index":751,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":793,"title":{},"body":{"index.html":{}}}],["mixin(roleguardmixin",{"_index":838,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mode",{"_index":783,"title":{},"body":{"index.html":{}}}],["module",{"_index":34,"title":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailModule.html":{},"modules/EmailVerificationModule.html":{},"modules/StripePaymentsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailModule.html":{},"modules/EmailVerificationModule.html":{},"modules/StripePaymentsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":36,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailModule.html":{},"modules/EmailVerificationModule.html":{},"modules/StripePaymentsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":807,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":812,"title":{},"body":{"index.html":{}}}],["name",{"_index":97,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/RegisterDto.html":{},"controllers/StripePaymentsController.html":{},"injectables/StripePaymentsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["nest",{"_index":771,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":816,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/StripePaymentsController.html":{},"modules/StripePaymentsModule.html":{},"injectables/StripePaymentsService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"modules/StripePaymentsModule.html":{},"injectables/StripePaymentsService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":721,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":202,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":194,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":724,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":142,"title":{},"body":{"controllers/AuthenticationController.html":{},"dependencies.html":{}}}],["new",{"_index":263,"title":{},"body":{"injectables/AuthenticationService.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailVerificationService.html":{},"injectables/StripePaymentsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newaddress",{"_index":667,"title":{},"body":{"injectables/UsersService.html":{}}}],["newaddress.id",{"_index":673,"title":{},"body":{"injectables/UsersService.html":{}}}],["newuser",{"_index":685,"title":{},"body":{"injectables/UsersService.html":{}}}],["node.js",{"_index":763,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":358,"title":{},"body":{"injectables/EmailService.html":{},"dependencies.html":{}}}],["nodemailer/lib/mailer",{"_index":338,"title":{},"body":{"controllers/EmailController.html":{},"injectables/EmailService.html":{}}}],["nodemailertransport",{"_index":351,"title":{},"body":{"injectables/EmailService.html":{}}}],["npm",{"_index":776,"title":{},"body":{"index.html":{}}}],["null",{"_index":683,"title":{},"body":{"injectables/UsersService.html":{}}}],["number",{"_index":229,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateChargeDto.html":{},"injectables/EmailVerificationService.html":{},"injectables/StripePaymentsService.html":{},"interfaces/TokenPayload.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["number(this.configservice.get('email_port",{"_index":363,"title":{},"body":{"injectables/EmailService.html":{}}}],["object",{"_index":444,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["open",{"_index":795,"title":{},"body":{"index.html":{}}}],["optional",{"_index":98,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/StripePaymentsController.html":{},"injectables/StripePaymentsService.html":{},"classes/UpdateUserAddressDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":356,"title":{},"body":{"injectables/EmailService.html":{}}}],["otherwise",{"_index":634,"title":{},"body":{"injectables/UsersService.html":{}}}],["out",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailModule.html":{},"modules/EmailVerificationModule.html":{},"modules/StripePaymentsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":821,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":717,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":589,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["param('addressid",{"_index":603,"title":{},"body":{"controllers/UsersController.html":{}}}],["parameters",{"_index":96,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/StripePaymentsController.html":{},"injectables/StripePaymentsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parseintpipe",{"_index":590,"title":{},"body":{"controllers/UsersController.html":{}}}],["parser",{"_index":734,"title":{},"body":{"dependencies.html":{}}}],["pass",{"_index":367,"title":{},"body":{"injectables/EmailService.html":{}}}],["passport",{"_index":464,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":193,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["passportstrategy",{"_index":466,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":484,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passreqtocallback",{"_index":474,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["password",{"_index":257,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"injectables/UsersService.html":{}}}],["patch",{"_index":591,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('/update",{"_index":586,"title":{},"body":{"controllers/UsersController.html":{}}}],["path",{"_index":276,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["payload",{"_index":279,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":445,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["payload.types",{"_index":251,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["payload.types.ts",{"_index":557,"title":{},"body":{"interfaces/TokenPayload.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["payload.userid",{"_index":478,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["payment_method",{"_index":553,"title":{},"body":{"injectables/StripePaymentsService.html":{}}}],["paymentmethodid",{"_index":299,"title":{},"body":{"classes/CreateChargeDto.html":{},"injectables/StripePaymentsService.html":{}}}],["payments.controller",{"_index":534,"title":{},"body":{"modules/StripePaymentsModule.html":{}}}],["payments.controller.ts",{"_index":515,"title":{},"body":{"controllers/StripePaymentsController.html":{},"coverage.html":{}}}],["payments.controller.ts:13",{"_index":520,"title":{},"body":{"controllers/StripePaymentsController.html":{}}}],["payments.module",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["payments.module.ts",{"_index":533,"title":{},"body":{"modules/StripePaymentsModule.html":{}}}],["payments.service",{"_index":522,"title":{},"body":{"controllers/StripePaymentsController.html":{},"modules/StripePaymentsModule.html":{},"injectables/UsersService.html":{}}}],["payments.service.ts",{"_index":535,"title":{},"body":{"injectables/StripePaymentsService.html":{},"coverage.html":{}}}],["payments.service.ts:14",{"_index":542,"title":{},"body":{"injectables/StripePaymentsService.html":{}}}],["payments.service.ts:22",{"_index":540,"title":{},"body":{"injectables/StripePaymentsService.html":{}}}],["payments.service.ts:7",{"_index":537,"title":{},"body":{"injectables/StripePaymentsService.html":{}}}],["payments/dto/create",{"_index":296,"title":{},"body":{"classes/CreateChargeDto.html":{},"coverage.html":{}}}],["payments/stripe",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"controllers/StripePaymentsController.html":{},"modules/StripePaymentsModule.html":{},"injectables/StripePaymentsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["plaintextpassword",{"_index":225,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["please",{"_index":805,"title":{},"body":{"index.html":{}}}],["port",{"_index":362,"title":{},"body":{"injectables/EmailService.html":{}}}],["post",{"_index":120,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailController.html":{},"controllers/EmailVerificationController.html":{},"controllers/StripePaymentsController.html":{},"controllers/UsersController.html":{}}}],["post('/add",{"_index":575,"title":{},"body":{"controllers/UsersController.html":{}}}],["post('confirm",{"_index":376,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["post('login",{"_index":156,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('logout",{"_index":177,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('register",{"_index":114,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('resend",{"_index":380,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["post('send",{"_index":332,"title":{},"body":{"controllers/EmailController.html":{}}}],["post()@useguards(jwtauthenticationguard",{"_index":519,"title":{},"body":{"controllers/StripePaymentsController.html":{}}}],["postgreserrorcodes",{"_index":245,"title":{},"body":{"injectables/AuthenticationService.html":{},"miscellaneous/enumerations.html":{}}}],["postgreserrorcodes.uniqueviolation",{"_index":261,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["prefix",{"_index":83,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailController.html":{},"controllers/EmailVerificationController.html":{},"controllers/StripePaymentsController.html":{},"controllers/UsersController.html":{}}}],["prisma",{"_index":613,"title":{},"body":{"injectables/UsersService.html":{}}}],["prisma/client",{"_index":497,"title":{},"body":{"injectables/LocalStrategy.html":{},"interfaces/RequestWithUser.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["prismaclient",{"_index":662,"title":{},"body":{"injectables/UsersService.html":{}}}],["private",{"_index":145,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/StripePaymentsService.html":{}}}],["production",{"_index":785,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":762,"title":{},"body":{"index.html":{}}}],["project",{"_index":796,"title":{},"body":{"index.html":{}}}],["promise",{"_index":495,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["properties",{"_index":10,"title":{"properties.html":{}},"body":{"classes/AddUserAddressDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateUserDto.html":{},"injectables/EmailService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"injectables/StripePaymentsService.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateUserAddressDto.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"properties.html":{}}}],["provided",{"_index":274,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["providers",{"_index":79,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailModule.html":{},"modules/EmailVerificationModule.html":{},"modules/StripePaymentsModule.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":215,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{},"injectables/StripePaymentsService.html":{}}}],["read",{"_index":806,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":146,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"controllers/StripePaymentsController.html":{},"injectables/StripePaymentsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["reflect",{"_index":740,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":90,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["refresh(@req",{"_index":172,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh(request",{"_index":109,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh.guard",{"_index":137,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh.guard.ts",{"_index":454,"title":{},"body":{"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["refresh=${token",{"_index":287,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtoken",{"_index":475,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/UsersService.html":{}}}],["refreshtokencookie",{"_index":160,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refreshtokencookie.cookie",{"_index":167,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refreshtokencookie.token",{"_index":163,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["register",{"_index":91,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["register(@body",{"_index":147,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["register(registrationdata",{"_index":112,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["registerdto",{"_index":113,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/RegisterDto.html":{},"coverage.html":{}}}],["registrationdata",{"_index":116,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["registrationdata.email",{"_index":152,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["removerefreshtoken",{"_index":619,"title":{},"body":{"injectables/UsersService.html":{}}}],["removerefreshtoken(id",{"_index":648,"title":{},"body":{"injectables/UsersService.html":{}}}],["removes",{"_index":650,"title":{},"body":{"injectables/UsersService.html":{}}}],["removeuseraddress",{"_index":571,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["removeuseraddress(id",{"_index":651,"title":{},"body":{"injectables/UsersService.html":{}}}],["removeuseraddress(undefined",{"_index":580,"title":{},"body":{"controllers/UsersController.html":{}}}],["repository",{"_index":774,"title":{},"body":{"index.html":{}}}],["req",{"_index":118,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailVerificationController.html":{},"controllers/StripePaymentsController.html":{},"controllers/UsersController.html":{}}}],["request",{"_index":99,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailVerificationController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"controllers/StripePaymentsController.html":{},"miscellaneous/variables.html":{}}}],["request.cookies?.refresh",{"_index":476,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["request.res.setheader",{"_index":183,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["request.res.setheader('set",{"_index":165,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["request.user",{"_index":175,"title":{},"body":{"controllers/AuthenticationController.html":{},"miscellaneous/variables.html":{}}}],["request.user.stripecustomerid",{"_index":529,"title":{},"body":{"controllers/StripePaymentsController.html":{}}}],["request.user?.isemailverified",{"_index":323,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["request?.cookies?.authentication",{"_index":485,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["request?.cookies?.refresh",{"_index":471,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["requestwithuser",{"_index":93,"title":{"interfaces/RequestWithUser.html":{}},"body":{"controllers/AuthenticationController.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailVerificationController.html":{},"interfaces/RequestWithUser.html":{},"controllers/StripePaymentsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["resendconfirmationlink",{"_index":374,"title":{},"body":{"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{}}}],["resendconfirmationlink(@req",{"_index":393,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["resendconfirmationlink(request",{"_index":379,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["resendconfirmationlink(userid",{"_index":416,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["reset",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailModule.html":{},"modules/EmailVerificationModule.html":{},"modules/StripePaymentsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":549,"title":{},"body":{"injectables/StripePaymentsService.html":{}}}],["results",{"_index":32,"title":{},"body":{"classes/AddUserAddressDto.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateUserDto.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"controllers/StripePaymentsController.html":{},"modules/StripePaymentsModule.html":{},"injectables/StripePaymentsService.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateUserAddressDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":153,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/StripePaymentsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":100,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/StripePaymentsController.html":{},"injectables/StripePaymentsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["rimraf",{"_index":743,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":834,"title":{},"body":{"miscellaneous/variables.html":{}}}],["roleguard",{"_index":708,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["roleguardmixin",{"_index":835,"title":{},"body":{"miscellaneous/variables.html":{}}}],["roles",{"_index":690,"title":{},"body":{"injectables/UsersService.html":{}}}],["run",{"_index":780,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":745,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":426,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["scalable",{"_index":767,"title":{},"body":{"index.html":{}}}],["secret",{"_index":207,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{}}}],["secretorkey",{"_index":472,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["secure",{"_index":364,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendmail",{"_index":329,"title":{},"body":{"controllers/EmailController.html":{},"injectables/EmailService.html":{}}}],["sendmail(@body",{"_index":341,"title":{},"body":{"controllers/EmailController.html":{}}}],["sendmail(data",{"_index":330,"title":{},"body":{"controllers/EmailController.html":{}}}],["sendmail(options",{"_index":354,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendverificationlink",{"_index":409,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["sendverificationlink(email",{"_index":418,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["sent",{"_index":343,"title":{},"body":{"controllers/EmailController.html":{}}}],["server",{"_index":768,"title":{},"body":{"index.html":{}}}],["set",{"_index":184,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/UsersService.html":{}}}],["setcurrentrefreshtoken",{"_index":620,"title":{},"body":{"injectables/UsersService.html":{}}}],["setcurrentrefreshtoken(refreshtoken",{"_index":655,"title":{},"body":{"injectables/UsersService.html":{}}}],["sets",{"_index":657,"title":{},"body":{"injectables/UsersService.html":{}}}],["side",{"_index":769,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":209,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["something",{"_index":267,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AddUserAddressDto.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateUserDto.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"controllers/StripePaymentsController.html":{},"modules/StripePaymentsModule.html":{},"injectables/StripePaymentsService.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateUserAddressDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"index.html":{}}}],["sponsors",{"_index":799,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":759,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../postgres",{"_index":753,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../role.guard.ts",{"_index":832,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["src/authentication/authentication.controller.ts",{"_index":82,"title":{},"body":{"controllers/AuthenticationController.html":{},"coverage.html":{}}}],["src/authentication/authentication.controller.ts:30",{"_index":115,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:42",{"_index":104,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:63",{"_index":111,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:75",{"_index":108,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:87",{"_index":95,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.module.ts",{"_index":192,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["src/authentication/authentication.service.ts",{"_index":214,"title":{},"body":{"injectables/AuthenticationService.html":{},"coverage.html":{}}}],["src/authentication/authentication.service.ts:11",{"_index":223,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:18",{"_index":234,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:40",{"_index":226,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:54",{"_index":227,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:61",{"_index":230,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:72",{"_index":233,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:87",{"_index":237,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/dto/login.dto.ts",{"_index":500,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/authentication/dto/login.dto.ts:10",{"_index":504,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/authentication/dto/login.dto.ts:5",{"_index":502,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/authentication/dto/register.dto.ts",{"_index":507,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/authentication/dto/register.dto.ts:14",{"_index":510,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:5",{"_index":508,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:9",{"_index":509,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/guards/email",{"_index":312,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["src/authentication/guards/jwt",{"_index":388,"title":{},"body":{"controllers/EmailVerificationController.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"controllers/StripePaymentsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["src/authentication/guards/local",{"_index":488,"title":{},"body":{"injectables/LocalAuthenticationGuard.html":{},"coverage.html":{}}}],["src/authentication/guards/role.guard.ts",{"_index":706,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/authentication/strategies/jwt",{"_index":455,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["src/authentication/strategies/jwt.strategy.ts",{"_index":480,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/authentication/strategies/jwt.strategy.ts:10",{"_index":481,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/authentication/strategies/jwt.strategy.ts:25",{"_index":483,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/authentication/strategies/local.strategy.ts",{"_index":490,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/authentication/strategies/local.strategy.ts:14",{"_index":494,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/authentication/strategies/local.strategy.ts:8",{"_index":492,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/authentication/types/request",{"_index":389,"title":{},"body":{"controllers/EmailVerificationController.html":{},"interfaces/RequestWithUser.html":{},"controllers/StripePaymentsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["src/authentication/types/token",{"_index":556,"title":{},"body":{"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["src/common/enums/postgres",{"_index":246,"title":{},"body":{"injectables/AuthenticationService.html":{},"miscellaneous/enumerations.html":{}}}],["src/email",{"_index":127,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"classes/ConfirmEmailDto.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["src/email/email.controller.ts",{"_index":328,"title":{},"body":{"controllers/EmailController.html":{},"coverage.html":{}}}],["src/email/email.controller.ts:10",{"_index":333,"title":{},"body":{"controllers/EmailController.html":{}}}],["src/email/email.module",{"_index":404,"title":{},"body":{"modules/EmailVerificationModule.html":{}}}],["src/email/email.module.ts",{"_index":347,"title":{},"body":{"modules/EmailModule.html":{}}}],["src/email/email.service",{"_index":423,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["src/email/email.service.ts",{"_index":350,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{}}}],["src/email/email.service.ts:22",{"_index":355,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/email/email.service.ts:8",{"_index":353,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/main.ts",{"_index":709,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/stripe",{"_index":295,"title":{},"body":{"classes/CreateChargeDto.html":{},"controllers/StripePaymentsController.html":{},"modules/StripePaymentsModule.html":{},"injectables/StripePaymentsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/dto/add",{"_index":6,"title":{},"body":{"classes/AddUserAddressDto.html":{},"coverage.html":{}}}],["src/users/dto/create",{"_index":304,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":559,"title":{},"body":{"classes/UpdateUserAddressDto.html":{},"coverage.html":{}}}],["src/users/users.controller.ts",{"_index":567,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:27",{"_index":579,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:34",{"_index":577,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:44",{"_index":587,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.controller.ts:55",{"_index":584,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":195,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/EmailVerificationModule.html":{}}}],["src/users/users.module.ts",{"_index":610,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":125,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["src/users/users.service.ts",{"_index":612,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:123",{"_index":633,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:14",{"_index":622,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:140",{"_index":638,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:158",{"_index":640,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:175",{"_index":649,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:190",{"_index":630,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:209",{"_index":645,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:226",{"_index":656,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:25",{"_index":624,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:63",{"_index":660,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:99",{"_index":652,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":781,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":784,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":786,"title":{},"body":{"index.html":{}}}],["started",{"_index":761,"title":{"index.html":{}},"body":{}}],["starter",{"_index":773,"title":{},"body":{"index.html":{}}}],["state",{"_index":14,"title":{},"body":{"classes/AddUserAddressDto.html":{},"classes/UpdateUserAddressDto.html":{},"injectables/UsersService.html":{}}}],["statements",{"_index":698,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":808,"title":{},"body":{"index.html":{}}}],["strategies/jwt",{"_index":199,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["strategies/jwt.strategy",{"_index":198,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["strategies/local.strategy",{"_index":197,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["strategy",{"_index":463,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":18,"title":{},"body":{"classes/AddUserAddressDto.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateUserDto.html":{},"injectables/EmailVerificationService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"injectables/StripePaymentsService.html":{},"classes/UpdateUserAddressDto.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{}}}],["stripe",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"controllers/StripePaymentsController.html":{},"modules/StripePaymentsModule.html":{},"injectables/StripePaymentsService.html":{},"dependencies.html":{}}}],["stripe(configservice.get('stripe_secret_key",{"_index":544,"title":{},"body":{"injectables/StripePaymentsService.html":{}}}],["stripepaymentscontroller",{"_index":514,"title":{"controllers/StripePaymentsController.html":{}},"body":{"controllers/StripePaymentsController.html":{},"modules/StripePaymentsModule.html":{},"coverage.html":{}}}],["stripepaymentsmodule",{"_index":43,"title":{"modules/StripePaymentsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StripePaymentsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["stripepaymentsservice",{"_index":521,"title":{"injectables/StripePaymentsService.html":{}},"body":{"controllers/StripePaymentsController.html":{},"modules/StripePaymentsModule.html":{},"injectables/StripePaymentsService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["subject",{"_index":435,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["super",{"_index":468,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["super.canactivate(context",{"_index":836,"title":{},"body":{"miscellaneous/variables.html":{}}}],["support",{"_index":800,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":819,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":748,"title":{},"body":{"dependencies.html":{}}}],["table",{"_index":716,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":715,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":789,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":792,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":791,"title":{},"body":{"index.html":{}}}],["tests",{"_index":788,"title":{},"body":{"index.html":{}}}],["text",{"_index":429,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["thanks",{"_index":798,"title":{},"body":{"index.html":{}}}],["this.authenticationservice.getauthenticateduser(email",{"_index":499,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.authenticationservice.getcookiesforlogout",{"_index":181,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtaccesstoken(request.user.id",{"_index":174,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtaccesstoken(user.id",{"_index":159,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtrefreshtoken(user.id",{"_index":161,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.register(registrationdata",{"_index":150,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.configservice.get",{"_index":425,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["this.configservice.get('email_password",{"_index":368,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get('email_service",{"_index":361,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get('email_user",{"_index":366,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get('email_verification_token_secret",{"_index":424,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["this.configservice.get('jwt_access_token_expires_in",{"_index":282,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.configservice.get('jwt_access_token_secret",{"_index":281,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.configservice.get('jwt_refresh_token_expires_in",{"_index":286,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.configservice.get('jwt_refresh_token_secret",{"_index":285,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.configservice.get('stripe_currency",{"_index":555,"title":{},"body":{"injectables/StripePaymentsService.html":{}}}],["this.emailconfirmationservice.confirmemail(email",{"_index":398,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["this.emailconfirmationservice.decodeconfirmationtoken",{"_index":396,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["this.emailconfirmationservice.resendconfirmationlink(request.user.id",{"_index":394,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["this.emailservice.sendmail",{"_index":434,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["this.emailservice.sendmail(data",{"_index":342,"title":{},"body":{"controllers/EmailController.html":{}}}],["this.emailverificationservice.sendverificationlink",{"_index":151,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.getbyid(userid",{"_index":680,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.jwtservice.sign(payload",{"_index":280,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{}}}],["this.jwtservice.verify(token",{"_index":442,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["this.nodemailertransport",{"_index":359,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.nodemailertransport.sendmail",{"_index":369,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.prisma",{"_index":665,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.create",{"_index":686,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.findunique",{"_index":676,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.update",{"_index":670,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.useraddress.create",{"_index":668,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.useraddress.deletemany",{"_index":677,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.useraddress.updatemany",{"_index":675,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.sendverificationlink(user.email",{"_index":440,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["this.stripe",{"_index":543,"title":{},"body":{"injectables/StripePaymentsService.html":{}}}],["this.stripe.customers.create",{"_index":550,"title":{},"body":{"injectables/StripePaymentsService.html":{}}}],["this.stripe.paymentintents.create",{"_index":551,"title":{},"body":{"injectables/StripePaymentsService.html":{}}}],["this.stripepaymentsservice.charge",{"_index":526,"title":{},"body":{"controllers/StripePaymentsController.html":{}}}],["this.stripepaymentsservice.createcustomer(name",{"_index":691,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userservice.getuserifrefreshtokenmatches",{"_index":477,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["this.usersservice.adduseraddress(user.id",{"_index":601,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.create",{"_index":256,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.usersservice.getbyemail(email",{"_index":271,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{}}}],["this.usersservice.getbyid(payload.userid",{"_index":487,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.usersservice.getbyid(userid",{"_index":436,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["this.usersservice.markemailasconfirmed(email",{"_index":441,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["this.usersservice.removerefreshtoken(request.user.id",{"_index":179,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.usersservice.removeuseraddress(user.id",{"_index":605,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.setcurrentrefreshtoken",{"_index":162,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.usersservice.updateuseraddress(user.id",{"_index":604,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.verifypassword(plaintextpassword",{"_index":272,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["throw",{"_index":262,"title":{},"body":{"injectables/AuthenticationService.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailVerificationService.html":{},"injectables/UsersService.html":{}}}],["throws",{"_index":635,"title":{},"body":{"injectables/UsersService.html":{}}}],["token",{"_index":136,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["token.strategy",{"_index":200,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["token.strategy.ts",{"_index":456,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["token.strategy.ts:13",{"_index":459,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["token.strategy.ts:29",{"_index":461,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["token=${token",{"_index":428,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["tokenexpirederror",{"_index":447,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["tokenpayload",{"_index":249,"title":{"interfaces/TokenPayload.html":{}},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["touch",{"_index":809,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":731,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":326,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"injectables/EmailService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/StripePaymentsService.html":{},"injectables/UsersService.html":{}}}],["try",{"_index":254,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{}}}],["twitter",{"_index":815,"title":{},"body":{"index.html":{}}}],["type",{"_index":16,"title":{},"body":{"classes/AddUserAddressDto.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateUserDto.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"controllers/StripePaymentsController.html":{},"injectables/StripePaymentsService.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateUserAddressDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":443,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["types/request",{"_index":138,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/EmailConfirmationGuard.html":{}}}],["types/token",{"_index":250,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["types/verification",{"_index":422,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["typescript",{"_index":772,"title":{},"body":{"index.html":{}}}],["ui",{"_index":749,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":320,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["unauthorizedexception('confirm",{"_index":324,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["undefined",{"_index":169,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/UsersService.html":{}}}],["uniqueviolation",{"_index":755,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unit",{"_index":787,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":105,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/EmailController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/StripePaymentsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":830,"title":{},"body":{"properties.html":{}}}],["updatedat",{"_index":689,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateduser",{"_index":669,"title":{},"body":{"injectables/UsersService.html":{}}}],["updates",{"_index":661,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuseraddress",{"_index":572,"title":{},"body":{"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuseraddress(id",{"_index":659,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuseraddress(undefined",{"_index":585,"title":{},"body":{"controllers/UsersController.html":{}}}],["updateuseraddressdto",{"_index":558,"title":{"classes/UpdateUserAddressDto.html":{}},"body":{"classes/UpdateUserAddressDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["url",{"_index":427,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["usefactory",{"_index":206,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["useguards",{"_index":121,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailVerificationController.html":{},"controllers/StripePaymentsController.html":{},"controllers/UsersController.html":{}}}],["useguards(emailconfirmationguard",{"_index":599,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(jwtauthenticationguard",{"_index":176,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailVerificationController.html":{},"controllers/StripePaymentsController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthenticationguard)@get",{"_index":94,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwtauthenticationguard)@httpcode(200)@post('logout",{"_index":107,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwtrefreshguard",{"_index":170,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwtrefreshguard)@get('refresh",{"_index":110,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(localauthenticationguard",{"_index":155,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useinterceptors",{"_index":385,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":390,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["user",{"_index":7,"title":{},"body":{"classes/AddUserAddressDto.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailService.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/LocalStrategy.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateUserAddressDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":643,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.currenthashedrefreshtoken",{"_index":479,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/UsersService.html":{}}}],["user.dto",{"_index":664,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":305,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:2",{"_index":306,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:3",{"_index":307,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:4",{"_index":308,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.id",{"_index":164,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["user.isemailverified",{"_index":437,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["user.password",{"_index":168,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["user.types",{"_index":139,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailVerificationController.html":{},"controllers/StripePaymentsController.html":{},"controllers/UsersController.html":{}}}],["user.types.ts",{"_index":513,"title":{},"body":{"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["user?.roles.includes(role",{"_index":837,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdata",{"_index":684,"title":{},"body":{"injectables/UsersService.html":{}}}],["userid",{"_index":231,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{},"interfaces/TokenPayload.html":{},"injectables/UsersService.html":{}}}],["usernamefield",{"_index":498,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["users",{"_index":568,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":611,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":592,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.module",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":566,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":458,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["usersmodule",{"_index":44,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailVerificationModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":124,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["validate",{"_index":457,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":493,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":482,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(request",{"_index":460,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["validationschema",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":30,"title":{},"body":{"classes/AddUserAddressDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateChargeDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/UpdateUserAddressDto.html":{},"dependencies.html":{}}}],["value",{"_index":756,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":707,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":831,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verification",{"_index":372,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["verification.controller",{"_index":405,"title":{},"body":{"modules/EmailVerificationModule.html":{}}}],["verification.controller.ts",{"_index":371,"title":{},"body":{"controllers/EmailVerificationController.html":{},"coverage.html":{}}}],["verification.controller.ts:24",{"_index":383,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["verification.controller.ts:29",{"_index":377,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["verification.module",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{}}}],["verification.module.ts",{"_index":403,"title":{},"body":{"modules/EmailVerificationModule.html":{}}}],["verification.service",{"_index":128,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{}}}],["verification.service.ts",{"_index":406,"title":{},"body":{"injectables/EmailVerificationService.html":{},"coverage.html":{}}}],["verification.service.ts:17",{"_index":419,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["verification.service.ts:39",{"_index":417,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["verification.service.ts:47",{"_index":413,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["verification.service.ts:55",{"_index":415,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["verification.service.ts:9",{"_index":411,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["verification/dto/confirm",{"_index":291,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"coverage.html":{}}}],["verification/email",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"coverage.html":{}}}],["verification/types/verification",{"_index":694,"title":{},"body":{"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["verificationtokenpayload",{"_index":421,"title":{"interfaces/VerificationTokenPayload.html":{}},"body":{"injectables/EmailVerificationService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["verified",{"_index":647,"title":{},"body":{"injectables/UsersService.html":{}}}],["verifypassword",{"_index":220,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["verifypassword(plaintextpassword",{"_index":235,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["version",{"_index":828,"title":{},"body":{"properties.html":{}}}],["watch",{"_index":782,"title":{},"body":{"index.html":{}}}],["website",{"_index":813,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":430,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["went",{"_index":268,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["wrong",{"_index":269,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["you'd",{"_index":803,"title":{},"body":{"index.html":{}}}],["zip",{"_index":15,"title":{},"body":{"classes/AddUserAddressDto.html":{},"classes/UpdateUserAddressDto.html":{},"injectables/UsersService.html":{}}}],["zoom",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailModule.html":{},"modules/EmailVerificationModule.html":{},"modules/StripePaymentsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AddUserAddressDto.html":{"url":"classes/AddUserAddressDto.html","title":"class - AddUserAddressDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddUserAddressDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/add-user-address.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                city\n                            \n                            \n                                country\n                            \n                            \n                                state\n                            \n                            \n                                zip\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/add-user-address.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/add-user-address.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/add-user-address.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/add-user-address.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        zip\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/add-user-address.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class AddUserAddressDto {\n  @IsString()\n  @IsNotEmpty()\n  address: string;\n\n  @IsString()\n  @IsNotEmpty()\n  city: string;\n\n  @IsString()\n  @IsNotEmpty()\n  state: string;\n\n  @IsString()\n  @IsNotEmpty()\n  country: string;\n\n  @IsString()\n  @IsNotEmpty()\n  zip: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nEmailModule\n\nEmailModule\n\nAppModule -->\n\nEmailModule->AppModule\n\n\n\n\n\nEmailVerificationModule\n\nEmailVerificationModule\n\nAppModule -->\n\nEmailVerificationModule->AppModule\n\n\n\n\n\nStripePaymentsModule\n\nStripePaymentsModule\n\nAppModule -->\n\nStripePaymentsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthenticationModule\n                        \n                        \n                            EmailModule\n                        \n                        \n                            EmailVerificationModule\n                        \n                        \n                            StripePaymentsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersModule } from './users/users.module';\nimport { ConfigModule } from '@nestjs/config';\nimport * as Joi from '@hapi/joi';\nimport { AuthenticationModule } from './authentication/authentication.module';\nimport { EmailModule } from './email/email.module';\nimport { EmailVerificationModule } from './email-verification/email-verification.module';\nimport { StripePaymentsModule } from './stripe-payments/stripe-payments.module';\n\n@Module({\n  imports: [\n    UsersModule,\n    AuthenticationModule,\n    ConfigModule.forRoot({\n      validationSchema: Joi.object({\n        DATABASE_URL: Joi.string().required(),\n        JWT_ACCESS_TOKEN_SECRET: Joi.string().required(),\n        JWT_ACCESS_TOKEN_EXPIRES_IN: Joi.string().required(),\n        EMAIL_VERIFICATION_TOKEN_SECRET: Joi.string().required(),\n        EMAIL_VERIFICATION_TOKEN_EXPIRATION_TIME: Joi.string().required(),\n        EMAIL_CONFIRMATION_URL: Joi.string().required(),\n        EMAIL_SERVICE: Joi.string().required(),\n        EMAIL_PORT: Joi.string().required(),\n        EMAIL_USER: Joi.string().required(),\n        EMAIL_PASSWORD: Joi.string().required(),\n      }),\n    }),\n    EmailModule,\n    EmailVerificationModule,\n    StripePaymentsModule,\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthenticationController.html":{"url":"controllers/AuthenticationController.html","title":"controller - AuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authenticate\n                            \n                            \n                                    Async\n                                logIn\n                            \n                            \n                                    Async\n                                logOut\n                            \n                            \n                                refresh\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        authenticate\n                        \n                    \n                \n            \n            \n                \nauthenticate(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthenticationGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    logIn(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(200)@UseGuards(LocalAuthenticationGuard)@Post('login')@ApiBody({type: LoginDto})\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    logOut(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthenticationGuard)@HttpCode(200)@Post('logout')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refresh\n                        \n                    \n                \n            \n            \n                \nrefresh(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtRefreshGuard)@Get('refresh')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registrationData: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registrationData\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Body,\n  Req,\n  HttpCode,\n  Post,\n  UseGuards,\n  Get,\n} from '@nestjs/common';\nimport { AuthenticationService } from './authentication.service';\nimport { UsersService } from 'src/users/users.service';\nimport { EmailVerificationService } from 'src/email-verification/email-verification.service';\nimport { RegisterDto } from './dto/register.dto';\nimport { LocalAuthenticationGuard } from './guards/local-authentication.guard';\nimport { JwtAuthenticationGuard } from './guards/jwt-authentication.guard';\nimport { JwtRefreshGuard } from './guards/jwt-token-refresh.guard';\nimport { RequestWithUser } from './types/request-with-user.types';\nimport { LoginDto } from './dto/login.dto';\nimport { ApiBody } from '@nestjs/swagger';\n\n@Controller('authentication')\nexport class AuthenticationController {\n  constructor(\n    private readonly authenticationService: AuthenticationService,\n    private readonly usersService: UsersService,\n    private readonly emailVerificationService: EmailVerificationService,\n  ) {}\n\n  @Post('register')\n  async register(@Body() registrationData: RegisterDto) {\n    const user = await this.authenticationService.register(registrationData);\n    await this.emailVerificationService.sendVerificationLink(\n      registrationData.email,\n    );\n    return user;\n  }\n\n  @HttpCode(200)\n  @UseGuards(LocalAuthenticationGuard)\n  @Post('login')\n  @ApiBody({ type: LoginDto })\n  async logIn(@Req() request: RequestWithUser) {\n    const { user } = request;\n    const accessTokenCookie =\n      this.authenticationService.getCookieWithJwtAccessToken(user.id);\n    const refreshTokenCookie =\n      this.authenticationService.getCookieWithJwtRefreshToken(user.id);\n    await this.usersService.setCurrentRefreshToken(\n      refreshTokenCookie.token,\n      user.id,\n    );\n\n    request.res.setHeader('Set-Cookie', [\n      accessTokenCookie,\n      refreshTokenCookie.cookie,\n    ]);\n    user.password = undefined;\n    return user;\n  }\n\n  @UseGuards(JwtRefreshGuard)\n  @Get('refresh')\n  refresh(@Req() request: RequestWithUser) {\n    console.log('refresh');\n    const accessTokenCookie =\n      this.authenticationService.getCookieWithJwtAccessToken(request.user.id);\n\n    request.res.setHeader('Set-Cookie', accessTokenCookie);\n    return request.user;\n  }\n\n  @UseGuards(JwtAuthenticationGuard)\n  @HttpCode(200)\n  @Post('logout')\n  async logOut(@Req() request: RequestWithUser) {\n    await this.usersService.removeRefreshToken(request.user.id);\n    const cookies = this.authenticationService.getCookiesForLogOut();\n    console.log(cookies);\n    request.res.setHeader(\n      'Set-Cookie',\n      this.authenticationService.getCookiesForLogOut(),\n    );\n  }\n\n  @UseGuards(JwtAuthenticationGuard)\n  @Get()\n  authenticate(@Req() request: RequestWithUser) {\n    const user = request.user;\n    user.password = undefined;\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthenticationModule.html":{"url":"modules/AuthenticationModule.html","title":"module - AuthenticationModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthenticationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\ncluster_AuthenticationModule_imports\n\n\n\n\nEmailVerificationModule\n\nEmailVerificationModule\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\nAuthenticationModule -->\n\nEmailVerificationModule->AuthenticationModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthenticationModule -->\n\nUsersModule->AuthenticationModule\n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nJwtRefreshTokenStrategy\n\nJwtRefreshTokenStrategy\n\nAuthenticationModule -->\n\nJwtRefreshTokenStrategy->AuthenticationModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthenticationModule -->\n\nJwtStrategy->AuthenticationModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthenticationModule -->\n\nLocalStrategy->AuthenticationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/authentication/authentication.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthenticationService\n                        \n                        \n                            JwtRefreshTokenStrategy\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthenticationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EmailVerificationModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { UsersModule } from 'src/users/users.module';\nimport { AuthenticationService } from './authentication.service';\nimport { AuthenticationController } from './authentication.controller';\nimport { LocalStrategy } from './strategies/local.strategy';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { JwtRefreshTokenStrategy } from './strategies/jwt-refresh-token.strategy';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { EmailVerificationModule } from 'src/email-verification/email-verification.module';\n\n@Module({\n  imports: [\n    EmailVerificationModule,\n    UsersModule,\n    PassportModule,\n    ConfigModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get('JWT_ACCESS_SECRET'),\n        signOptions: {\n          expiresIn: configService.get('JWT_ACCESS_TOKEN_EXPIRES_IN'),\n        },\n      }),\n    }),\n  ],\n  providers: [\n    AuthenticationService,\n    LocalStrategy,\n    JwtStrategy,\n    JwtRefreshTokenStrategy,\n  ],\n  controllers: [AuthenticationController],\n})\nexport class AuthenticationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthenticationService.html":{"url":"injectables/AuthenticationService.html","title":"injectable - AuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getAuthenticatedUser\n                            \n                            \n                                    Public\n                                getCookiesForLogOut\n                            \n                            \n                                    Public\n                                getCookieWithJwtAccessToken\n                            \n                            \n                                    Public\n                                getCookieWithJwtRefreshToken\n                            \n                            \n                                    Public\n                                    Async\n                                register\n                            \n                            \n                                    Private\n                                    Async\n                                verifyPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/authentication.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getAuthenticatedUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAuthenticatedUser(email: string, plainTextPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    plainTextPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookiesForLogOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookiesForLogOut()\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookieWithJwtAccessToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookieWithJwtAccessToken(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookieWithJwtRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookieWithJwtRefreshToken(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { cookie: string; token: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registrationData: RegisterDto)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registrationData\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        verifyPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyPassword(plainTextPassword: string, hashedPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plainTextPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    hashedPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { hash as bcryptHash, compare as bcryptCompare } from 'bcrypt';\nimport { UsersService } from 'src/users/users.service';\nimport { RegisterDto } from './dto/register.dto';\nimport { PostgresErrorCodes } from 'src/common/enums/postgres-error-code.enum';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { TokenPayload } from './types/token-payload.types';\n\n@Injectable()\nexport class AuthenticationService {\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  public async register(registrationData: RegisterDto) {\n    const hashedPassword = await bcryptHash(registrationData.password, 10);\n    try {\n      const createdUser = await this.usersService.create({\n        ...registrationData,\n        password: hashedPassword,\n      });\n      createdUser.password = undefined;\n      return createdUser;\n    } catch (error) {\n      if (error?.code === PostgresErrorCodes.UniqueViolation) {\n        throw new HttpException(\n          'User with that email already exists',\n          HttpStatus.BAD_REQUEST,\n        );\n      }\n      throw new HttpException(\n        'Something went wrong',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n  public async getAuthenticatedUser(email: string, plainTextPassword: string) {\n    try {\n      const user = await this.usersService.getByEmail(email);\n      await this.verifyPassword(plainTextPassword, user.password);\n      user.password = undefined;\n      return user;\n    } catch (error) {\n      throw new HttpException(\n        'Wrong credentials provided',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n  }\n\n  public getCookiesForLogOut() {\n    return [\n      'Authentication=; HttpOnly; Path=/; Max-Age=0',\n      'Refresh=; HttpOnly; Path=/; Max-Age=0',\n    ];\n  }\n\n  public getCookieWithJwtAccessToken(userId: number) {\n    const payload: TokenPayload = { userId };\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_ACCESS_TOKEN_SECRET'),\n      expiresIn: this.configService.get('JWT_ACCESS_TOKEN_EXPIRES_IN'),\n    });\n    return `Authentication=${token}; HttpOnly; Path=/; Max-Age=${this.configService.get(\n      'JWT_ACCESS_TOKEN_EXPIRES_IN',\n    )}`;\n  }\n\n  public getCookieWithJwtRefreshToken(userId: number) {\n    const payload: TokenPayload = { userId };\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_REFRESH_TOKEN_SECRET'),\n      expiresIn: this.configService.get('JWT_REFRESH_TOKEN_EXPIRES_IN'),\n    });\n    const cookie = `Refresh=${token}; HttpOnly; Path=/; Max-Age=${this.configService.get(\n      'JWT_REFRESH_TOKEN_EXPIRES_IN',\n    )}`;\n    return {\n      cookie,\n      token,\n    };\n  }\n\n  private async verifyPassword(\n    plainTextPassword: string,\n    hashedPassword: string,\n  ) {\n    const isPasswordMatching = await bcryptCompare(\n      plainTextPassword,\n      hashedPassword,\n    );\n    if (!isPasswordMatching) {\n      throw new HttpException(\n        'Wrong credentials provided',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConfirmEmailDto.html":{"url":"classes/ConfirmEmailDto.html","title":"class - ConfirmEmailDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConfirmEmailDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email-verification/dto/confirm-email.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/email-verification/dto/confirm-email.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class ConfirmEmailDto {\n  @IsString()\n  @IsNotEmpty()\n  token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateChargeDto.html":{"url":"classes/CreateChargeDto.html","title":"class - CreateChargeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateChargeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripe-payments/dto/create-charge.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                amount\n                            \n                            \n                                paymentMethodId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stripe-payments/dto/create-charge.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        paymentMethodId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stripe-payments/dto/create-charge.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsNumber } from 'class-validator';\n\nexport class CreateChargeDto {\n  @IsString()\n  @IsNotEmpty()\n  paymentMethodId: string;\n\n  @IsNumber()\n  amount: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateUserDto {\n  email: string;\n  name: string;\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/EmailConfirmationGuard.html":{"url":"guards/EmailConfirmationGuard.html","title":"guard - EmailConfirmationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    EmailConfirmationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/authentication/guards/email-confirmation.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/guards/email-confirmation.guard.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  Injectable,\n  CanActivate,\n  ExecutionContext,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { RequestWithUser } from '../types/request-with-user.types';\n\n@Injectable()\nexport class EmailConfirmationGuard implements CanActivate {\n  canActivate(context: ExecutionContext) {\n    const request: RequestWithUser = context.switchToHttp().getRequest();\n\n    if (!request.user?.isEmailVerified) {\n      throw new UnauthorizedException('Confirm your email first');\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmailController.html":{"url":"controllers/EmailController.html","title":"controller - EmailController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmailController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email/email.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                email\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendMail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendMail(data: Mail.Options)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('send')\n                \n            \n\n            \n                \n                    Defined in src/email/email.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Mail.Options\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { EmailService } from './email.service';\nimport * as Mail from 'nodemailer/lib/mailer';\n\n@Controller('email')\nexport class EmailController {\n  constructor(private readonly emailService: EmailService) {}\n\n  @Post('send')\n  async sendMail(@Body() data: Mail.Options) {\n    await this.emailService.sendMail(data);\n    return 'Email sent';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailModule.html":{"url":"modules/EmailModule.html","title":"module - EmailModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/email/email.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EmailController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EmailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { EmailService } from './email.service';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { EmailController } from './email.controller';\n\n@Module({\n  imports: [ConfigModule],\n  providers: [EmailService],\n  exports: [EmailService],\n  controllers: [EmailController],\n})\nexport class EmailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailService.html":{"url":"injectables/EmailService.html","title":"injectable - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email/email.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                nodemailerTransport\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/email/email.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendMail\n                        \n                    \n                \n            \n            \n                \nsendMail(options: Mail.Options)\n                \n            \n\n\n            \n                \n                    Defined in src/email/email.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            Mail.Options\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        nodemailerTransport\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Mail\n\n                    \n                \n                    \n                        \n                                Defined in src/email/email.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { createTransport } from 'nodemailer';\nimport * as Mail from 'nodemailer/lib/mailer';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class EmailService {\n  private nodemailerTransport: Mail;\n\n  constructor(private readonly configService: ConfigService) {\n    this.nodemailerTransport = createTransport({\n      host: this.configService.get('EMAIL_SERVICE'),\n      port: Number(this.configService.get('EMAIL_PORT')),\n      secure: true,\n      auth: {\n        user: this.configService.get('EMAIL_USER'),\n        pass: this.configService.get('EMAIL_PASSWORD'),\n      },\n    });\n  }\n\n  sendMail(options: Mail.Options) {\n    return this.nodemailerTransport.sendMail({\n      ...options,\n      from: `${this.configService.get('EMAIL_USER')}`,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmailVerificationController.html":{"url":"controllers/EmailVerificationController.html","title":"controller - EmailVerificationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmailVerificationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email-verification/email-verification.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                email-verification\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                confirm\n                            \n                            \n                                    Async\n                                resendConfirmationLink\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        confirm\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirm(confirmationData: ConfirmEmailDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('confirm')\n                \n            \n\n            \n                \n                    Defined in src/email-verification/email-verification.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    confirmationData\n                                    \n                                                ConfirmEmailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        resendConfirmationLink\n                        \n                    \n                \n            \n            \n                \n                    \n                    resendConfirmationLink(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('resend-confirmation-link')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/email-verification/email-verification.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  ClassSerializerInterceptor,\n  UseInterceptors,\n  Post,\n  Body,\n  UseGuards,\n  Req,\n} from '@nestjs/common';\nimport { ConfirmEmailDto } from './dto/confirm-email.dto';\nimport { EmailVerificationService } from './email-verification.service';\nimport { JwtAuthenticationGuard } from 'src/authentication/guards/jwt-authentication.guard';\nimport { RequestWithUser } from 'src/authentication/types/request-with-user.types';\n\n@Controller('email-verification')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class EmailVerificationController {\n  constructor(\n    private readonly emailConfirmationService: EmailVerificationService,\n  ) {}\n\n  @Post('resend-confirmation-link')\n  @UseGuards(JwtAuthenticationGuard)\n  async resendConfirmationLink(@Req() request: RequestWithUser) {\n    await this.emailConfirmationService.resendConfirmationLink(request.user.id);\n  }\n\n  @Post('confirm')\n  async confirm(@Body() confirmationData: ConfirmEmailDto) {\n    const email = await this.emailConfirmationService.decodeConfirmationToken(\n      confirmationData.token,\n    );\n    await this.emailConfirmationService.confirmEmail(email);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailVerificationModule.html":{"url":"modules/EmailVerificationModule.html","title":"module - EmailVerificationModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailVerificationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmailVerificationModule\n\n\n\ncluster_EmailVerificationModule_providers\n\n\n\ncluster_EmailVerificationModule_imports\n\n\n\ncluster_EmailVerificationModule_exports\n\n\n\n\nEmailModule\n\nEmailModule\n\n\n\nEmailVerificationModule\n\nEmailVerificationModule\n\nEmailVerificationModule -->\n\nEmailModule->EmailVerificationModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nEmailVerificationModule -->\n\nUsersModule->EmailVerificationModule\n\n\n\n\n\nEmailVerificationService \n\nEmailVerificationService \n\nEmailVerificationService  -->\n\nEmailVerificationModule->EmailVerificationService \n\n\n\n\n\nEmailVerificationService\n\nEmailVerificationService\n\nEmailVerificationModule -->\n\nEmailVerificationService->EmailVerificationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/email-verification/email-verification.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailVerificationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EmailVerificationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EmailModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EmailVerificationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { EmailVerificationService } from './email-verification.service';\nimport { EmailModule } from 'src/email/email.module';\nimport { UsersModule } from 'src/users/users.module';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigModule } from '@nestjs/config';\nimport { EmailVerificationController } from './email-verification.controller';\n\n@Module({\n  imports: [UsersModule, EmailModule, JwtModule, ConfigModule],\n  providers: [EmailVerificationService],\n  exports: [EmailVerificationService],\n  controllers: [EmailVerificationController],\n})\nexport class EmailVerificationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailVerificationService.html":{"url":"injectables/EmailVerificationService.html","title":"injectable - EmailVerificationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailVerificationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email-verification/email-verification.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                confirmEmail\n                            \n                            \n                                    Public\n                                    Async\n                                decodeConfirmationToken\n                            \n                            \n                                    Public\n                                    Async\n                                resendConfirmationLink\n                            \n                            \n                                    Public\n                                sendVerificationLink\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, configService: ConfigService, emailService: EmailService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/email-verification/email-verification.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        confirmEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirmEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/email-verification/email-verification.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        decodeConfirmationToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    decodeConfirmationToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/email-verification/email-verification.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        resendConfirmationLink\n                        \n                    \n                \n            \n            \n                \n                    \n                    resendConfirmationLink(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/email-verification/email-verification.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        sendVerificationLink\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendVerificationLink(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/email-verification/email-verification.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { VerificationTokenPayload } from './types/verification-payload.types';\nimport { EmailService } from 'src/email/email.service';\nimport { UsersService } from 'src/users/users.service';\n\n@Injectable()\nexport class EmailVerificationService {\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n    private readonly emailService: EmailService,\n    private readonly usersService: UsersService,\n  ) {}\n\n  public sendVerificationLink(email: string) {\n    const payload: VerificationTokenPayload = { email };\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('EMAIL_VERIFICATION_TOKEN_SECRET'),\n      expiresIn: `${this.configService.get(\n        'EMAIL_VERIFICATION_TOKEN_EXPIRATION_TIME',\n      )}s`,\n    });\n\n    const url = `${this.configService.get(\n      'EMAIL_CONFIRMATION_URL',\n    )}?token=${token}`;\n\n    const text = `Welcome to the application. To confirm the email address, click here: ${token}`;\n\n    return this.emailService.sendMail({\n      to: email,\n      subject: 'Email confirmation',\n      text,\n    });\n  }\n\n  public async resendConfirmationLink(userId: number) {\n    const user = await this.usersService.getById(userId);\n    if (user.isEmailVerified) {\n      throw new BadRequestException('Email already confirmed');\n    }\n    await this.sendVerificationLink(user.email);\n  }\n\n  public async confirmEmail(email: string) {\n    const user = await this.usersService.getByEmail(email);\n    if (user.isEmailVerified) {\n      throw new BadRequestException('Email already confirmed');\n    }\n    await this.usersService.markEmailAsConfirmed(email);\n  }\n\n  public async decodeConfirmationToken(token: string) {\n    try {\n      const payload = await this.jwtService.verify(token, {\n        secret: this.configService.get('EMAIL_VERIFICATION_TOKEN_SECRET'),\n      });\n\n      if (typeof payload === 'object' && 'email' in payload) {\n        return payload.email;\n      }\n      throw new BadRequestException();\n    } catch (error) {\n      if (error?.name === 'TokenExpiredError') {\n        throw new BadRequestException('Email confirmation token expired');\n      }\n      throw new BadRequestException('Bad confirmation token');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthenticationGuard.html":{"url":"injectables/JwtAuthenticationGuard.html","title":"injectable - JwtAuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/guards/jwt-authentication.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthenticationGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshGuard.html":{"url":"injectables/JwtRefreshGuard.html","title":"injectable - JwtRefreshGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/guards/jwt-token-refresh.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtRefreshGuard extends AuthGuard('jwt-refresh-token') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshTokenStrategy.html":{"url":"injectables/JwtRefreshTokenStrategy.html","title":"injectable - JwtRefreshTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/strategies/jwt-refresh-token.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/strategies/jwt-refresh-token.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(request: Request, payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/strategies/jwt-refresh-token.strategy.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\nimport { UsersService } from 'src/users/users.service';\nimport { TokenPayload } from '../types/token-payload.types';\n\n@Injectable()\nexport class JwtRefreshTokenStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh-token',\n) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) => {\n          return request?.cookies?.Refresh;\n        },\n      ]),\n      secretOrKey: configService.get('JWT_REFRESH_TOKEN_SECRET'),\n      passReqToCallback: true,\n    });\n  }\n\n  async validate(request: Request, payload: TokenPayload) {\n    const refreshToken = request.cookies?.Refresh;\n    const user = await this.userService.getUserIfRefreshTokenMatches(\n      refreshToken,\n      payload.userId,\n    );\n    user.currentHashedRefreshToken = undefined;\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/strategies/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/strategies/jwt.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/strategies/jwt.strategy.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\nimport { UsersService } from 'src/users/users.service';\nimport { TokenPayload } from '../types/token-payload.types';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly configService: ConfigService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) => {\n          return request?.cookies?.Authentication;\n        },\n      ]),\n      secretOrKey: configService.get('JWT_ACCESS_TOKEN_SECRET'),\n    });\n  }\n\n  async validate(payload: TokenPayload) {\n    return this.usersService.getById(payload.userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthenticationGuard.html":{"url":"injectables/LocalAuthenticationGuard.html","title":"injectable - LocalAuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/guards/local-authentication.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthenticationGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/strategies/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authenticationService: AuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/strategies/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authenticationService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/strategies/local.strategy.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { AuthenticationService } from '../authentication.service';\nimport { User } from '@prisma/client';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authenticationService: AuthenticationService) {\n    super({\n      usernameField: 'email',\n    });\n  }\n  async validate(email: string, password: string): Promise {\n    return this.authenticationService.getAuthenticatedUser(email, password);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/login.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/login.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString, IsNotEmpty, MinLength } from 'class-validator';\n\nexport class LoginDto {\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/dto/register.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString, IsNotEmpty, MinLength } from 'class-validator';\n\nexport class RegisterDto {\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser.html":{"url":"interfaces/RequestWithUser.html","title":"interface - RequestWithUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/types/request-with-user.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:     User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     User\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { User } from '@prisma/client';\nimport { Request } from 'express';\n\nexport interface RequestWithUser extends Request {\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StripePaymentsController.html":{"url":"controllers/StripePaymentsController.html","title":"controller - StripePaymentsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StripePaymentsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripe-payments/stripe-payments.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                charge\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCharge\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createCharge\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCharge(charge: CreateChargeDto, request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/stripe-payments/stripe-payments.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    charge\n                                    \n                                                CreateChargeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, Req, UseGuards } from '@nestjs/common';\nimport { StripePaymentsService } from './stripe-payments.service';\nimport { CreateChargeDto } from './dto/create-charge.dto';\nimport { JwtAuthenticationGuard } from 'src/authentication/guards/jwt-authentication.guard';\nimport { RequestWithUser } from 'src/authentication/types/request-with-user.types';\n\n@Controller('charge')\nexport class StripePaymentsController {\n  constructor(private readonly stripePaymentsService: StripePaymentsService) {}\n\n  @Post()\n  @UseGuards(JwtAuthenticationGuard)\n  async createCharge(\n    @Body() charge: CreateChargeDto,\n    @Req() request: RequestWithUser,\n  ) {\n    await this.stripePaymentsService.charge(\n      charge.amount,\n      charge.paymentMethodId,\n      request.user.stripeCustomerId,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StripePaymentsModule.html":{"url":"modules/StripePaymentsModule.html","title":"module - StripePaymentsModule","body":"\n                   \n\n\n\n\n    Modules\n    StripePaymentsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StripePaymentsModule\n\n\n\ncluster_StripePaymentsModule_exports\n\n\n\ncluster_StripePaymentsModule_providers\n\n\n\n\nStripePaymentsService \n\nStripePaymentsService \n\n\n\nStripePaymentsModule\n\nStripePaymentsModule\n\nStripePaymentsService  -->\n\nStripePaymentsModule->StripePaymentsService \n\n\n\n\n\nStripePaymentsService\n\nStripePaymentsService\n\nStripePaymentsModule -->\n\nStripePaymentsService->StripePaymentsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stripe-payments/stripe-payments.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StripePaymentsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            StripePaymentsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StripePaymentsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { StripePaymentsService } from './stripe-payments.service';\nimport { StripePaymentsController } from './stripe-payments.controller';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  imports: [ConfigModule],\n  providers: [StripePaymentsService],\n  controllers: [StripePaymentsController],\n  exports: [StripePaymentsService],\n})\nexport class StripePaymentsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StripePaymentsService.html":{"url":"injectables/StripePaymentsService.html","title":"injectable - StripePaymentsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StripePaymentsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripe-payments/stripe-payments.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                stripe\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                charge\n                            \n                            \n                                    Public\n                                    Async\n                                createCustomer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/stripe-payments/stripe-payments.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        charge\n                        \n                    \n                \n            \n            \n                \n                    \n                    charge(amount: number, paymentMethodId: string, customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe-payments/stripe-payments.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    paymentMethodId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createCustomer\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCustomer(name: string, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe-payments/stripe-payments.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        stripe\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Stripe\n\n                    \n                \n                    \n                        \n                                Defined in src/stripe-payments/stripe-payments.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport Stripe from 'stripe';\n\n@Injectable()\nexport class StripePaymentsService {\n  private stripe: Stripe;\n  constructor(private readonly configService: ConfigService) {\n    this.stripe = new Stripe(configService.get('STRIPE_SECRET_KEY'), {\n      apiVersion: '2020-08-27',\n    });\n  }\n\n  public async createCustomer(name: string, email: string) {\n    const response = await this.stripe.customers.create({\n      name,\n      email,\n    });\n    return response;\n  }\n\n  public async charge(\n    amount: number,\n    paymentMethodId: string,\n    customerId: string,\n  ) {\n    return this.stripe.paymentIntents.create({\n      amount,\n      customer: customerId,\n      payment_method: paymentMethodId,\n      currency: this.configService.get('STRIPE_CURRENCY'),\n      confirm: true,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayload.html":{"url":"interfaces/TokenPayload.html","title":"interface - TokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/types/token-payload.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TokenPayload {\n  userId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserAddressDto.html":{"url":"classes/UpdateUserAddressDto.html","title":"class - UpdateUserAddressDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserAddressDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user-address.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                address\n                            \n                            \n                                    Optional\n                                city\n                            \n                            \n                                    Optional\n                                country\n                            \n                            \n                                    Optional\n                                state\n                            \n                            \n                                    Optional\n                                zip\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user-address.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user-address.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user-address.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user-address.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        zip\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user-address.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsOptional } from 'class-validator';\n\nexport class UpdateUserAddressDto {\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  address?: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  city?: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  state?: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  country?: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  zip?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserAddress\n                            \n                            \n                                    Async\n                                getAllUsers\n                            \n                            \n                                    Async\n                                removeUserAddress\n                            \n                            \n                                    Async\n                                updateUserAddress\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserAddress\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserAddress(undefined: RequestWithUser, addressData: AddUserAddressDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/add-user-address')@UseGuards(EmailConfirmationGuard)@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    addressData\n                                    \n                                                AddUserAddressDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUsers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/getAllUsers')@UseGuards(EmailConfirmationGuard)@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeUserAddress\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUserAddress(undefined: RequestWithUser, addressId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/remove-user-address/:addressId')@UseGuards(EmailConfirmationGuard)@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    addressId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserAddress\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserAddress(undefined: RequestWithUser, addressId: number, addressData: UpdateUserAddressDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/update-user-address/:addressId')@UseGuards(EmailConfirmationGuard)@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    addressId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    addressData\n                                    \n                                                UpdateUserAddressDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Delete,\n  UseGuards,\n  Body,\n  Req,\n  Param,\n  ParseIntPipe,\n  Patch,\n} from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { JwtAuthenticationGuard } from 'src/authentication/guards/jwt-authentication.guard';\nimport { EmailConfirmationGuard } from 'src/authentication/guards/email-confirmation.guard';\nimport { RequestWithUser } from 'src/authentication/types/request-with-user.types';\nimport { AddUserAddressDto } from './dto/add-user-address.dto';\nimport { UpdateUserAddressDto } from './dto/update-user-address.dto';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Get('/getAllUsers')\n  @UseGuards(EmailConfirmationGuard)\n  @UseGuards(JwtAuthenticationGuard)\n  async getAllUsers() {\n    return 'This action returns all users';\n  }\n\n  @Post('/add-user-address')\n  @UseGuards(EmailConfirmationGuard)\n  @UseGuards(JwtAuthenticationGuard)\n  async addUserAddress(\n    @Req() { user }: RequestWithUser,\n    @Body() addressData: AddUserAddressDto,\n  ) {\n    return this.usersService.addUserAddress(user.id, addressData);\n  }\n\n  @Patch('/update-user-address/:addressId')\n  @UseGuards(EmailConfirmationGuard)\n  @UseGuards(JwtAuthenticationGuard)\n  async updateUserAddress(\n    @Req() { user }: RequestWithUser,\n    @Param('addressId', ParseIntPipe) addressId: number,\n    @Body() addressData: UpdateUserAddressDto,\n  ) {\n    return this.usersService.updateUserAddress(user.id, addressId, addressData);\n  }\n\n  @Delete('/remove-user-address/:addressId')\n  @UseGuards(EmailConfirmationGuard)\n  @UseGuards(JwtAuthenticationGuard)\n  async removeUserAddress(\n    @Req() { user }: RequestWithUser,\n    @Param('addressId', ParseIntPipe) addressId: number,\n  ) {\n    return this.usersService.removeUserAddress(user.id, addressId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_imports\n\n\n\n\nStripePaymentsModule\n\nStripePaymentsModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nStripePaymentsModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            StripePaymentsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\nimport { StripePaymentsModule } from 'src/stripe-payments/stripe-payments.module';\n\n@Module({\n  imports: [StripePaymentsModule],\n  providers: [UsersService],\n  controllers: [UsersController],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                prisma\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserAddress\n                            \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                getByEmail\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getUserIfRefreshTokenMatches\n                            \n                            \n                                    Async\n                                markEmailAsConfirmed\n                            \n                            \n                                    Async\n                                removeRefreshToken\n                            \n                            \n                                    Async\n                                removeUserAddress\n                            \n                            \n                                    Async\n                                setCurrentRefreshToken\n                            \n                            \n                                    Async\n                                updateUserAddress\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(stripePaymentsService: StripePaymentsService)\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        stripePaymentsService\n                                                  \n                                                        \n                                                                        StripePaymentsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserAddress\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserAddress(id: number, undefined: AddUserAddressDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:25\n                \n            \n\n\n            \n                \n                    Adds a new address to the user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ID of the desired user\n\n                                    \n                                \n                                \n                                    \n                                                AddUserAddressDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(undefined: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:190\n                \n            \n\n\n            \n                \n                    Creates a new user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:123\n                \n            \n\n\n            \n                \n                    Returns the user if email exists, otherwise throws an 404\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        email address of the desired user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:140\n                \n            \n\n\n            \n                \n                    Returns the user if id exists, otherwise throws an 404\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        id of the desired user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserIfRefreshTokenMatches\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserIfRefreshTokenMatches(refreshToken: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:158\n                \n            \n\n\n            \n                \n                    Returns the user if refresh token matches.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Refresh token to be compared\n\n                                    \n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Desired user's id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        markEmailAsConfirmed\n                        \n                    \n                \n            \n            \n                \n                    \n                    markEmailAsConfirmed(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:209\n                \n            \n\n\n            \n                \n                    Marks a user's email as verified\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The verified email\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeRefreshToken(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:175\n                \n            \n\n\n            \n                \n                    Removes the user's refresh token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Desired user's id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeUserAddress\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUserAddress(id: number, addressId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:99\n                \n            \n\n\n            \n                \n                    Deletes the given user address\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ID of the desired user\n\n                                    \n                                \n                                \n                                    addressId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ID of the desired address\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        setCurrentRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    setCurrentRefreshToken(refreshToken: string, id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:226\n                \n            \n\n\n            \n                \n                    Sets the refresh token after hashing to the given user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Refresh token to be set\n\n                                    \n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ID of the desired user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserAddress\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserAddress(id: number, addressId: number, undefined: UpdateUserAddressDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:63\n                \n            \n\n\n            \n                \n                    Updates the given user address\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ID of the desired user\n\n                                    \n                                \n                                \n                                    addressId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ID of the desired address\n\n                                    \n                                \n                                \n                                    \n                                                UpdateUserAddressDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        prisma\n                        \n                    \n                \n            \n                \n                    \n                        Type :     PrismaClient\n\n                    \n                \n                    \n                        \n                                Defined in src/users/users.service.ts:14\n                        \n                    \n\n            \n                \n                    The prisma client\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, HttpException, HttpStatus } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\nimport { hash as bcryptHash, compare as bcryptCompare } from 'bcrypt';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { AddUserAddressDto } from './dto/add-user-address.dto';\nimport { UpdateUserAddressDto } from './dto/update-user-address.dto';\nimport { StripePaymentsService } from 'src/stripe-payments/stripe-payments.service';\n\n@Injectable()\nexport class UsersService {\n  /**\n   * The prisma client\n   */\n  prisma: PrismaClient;\n\n  constructor(private readonly stripePaymentsService: StripePaymentsService) {\n    this.prisma = new PrismaClient();\n  }\n\n  /**\n   * Adds a new address to the user\n   * @param id ID of the desired user\n   * @param addressData Address data DTO\n   */\n  async addUserAddress(\n    id: number,\n    { address, city, state, zip, country }: AddUserAddressDto,\n  ) {\n    const newAddress = await this.prisma.userAddress.create({\n      data: {\n        userId: id,\n        address,\n        city,\n        state,\n        zip,\n        country,\n      },\n    });\n\n    const updatedUser = await this.prisma.user.update({\n      where: { id },\n      data: {\n        addresses: {\n          connect: {\n            id: newAddress.id,\n          },\n        },\n      },\n      include: {\n        addresses: true,\n      },\n    });\n\n    return updatedUser;\n  }\n\n  /**\n   * Updates the given user address\n   * @param id ID of the desired user\n   * @param addressId ID of the desired address\n   * @param addressData Address data DTO\n   */\n  async updateUserAddress(\n    id: number,\n    addressId: number,\n    { address, city, state, zip, country }: UpdateUserAddressDto,\n  ) {\n    await this.prisma.userAddress.updateMany({\n      where: {\n        id: addressId,\n        userId: id,\n      },\n      data: {\n        address,\n        city,\n        state,\n        zip,\n        country,\n      },\n    });\n    const user = await this.prisma.user.findUnique({\n      where: {\n        id,\n      },\n\n      include: {\n        addresses: true,\n      },\n    });\n\n    return user;\n  }\n\n  /**\n   * Deletes the given user address\n   * @param id ID of the desired user\n   * @param addressId ID of the desired address\n   */\n  async removeUserAddress(id: number, addressId: number) {\n    await this.prisma.userAddress.deleteMany({\n      where: {\n        id: addressId,\n      },\n    });\n\n    const user = await this.prisma.user.findUnique({\n      where: {\n        id,\n      },\n\n      include: {\n        addresses: true,\n      },\n    });\n\n    return user;\n  }\n\n  /**\n   * Returns the user if email exists, otherwise throws an 404\n   * @param email email address of the desired user\n   */\n  async getByEmail(email: string) {\n    const user = await this.prisma.user.findUnique({\n      where: {\n        email,\n      },\n    });\n    if (user) return user;\n    throw new HttpException(\n      'User with this email does not exist',\n      HttpStatus.NOT_FOUND,\n    );\n  }\n\n  /**\n   * Returns the user if id exists, otherwise throws an 404\n   * @param id id of the desired user\n   */\n  async getById(id: number) {\n    const user = await this.prisma.user.findUnique({\n      where: {\n        id,\n      },\n    });\n    if (user) return user;\n    throw new HttpException(\n      'User with this id does not exist',\n      HttpStatus.NOT_FOUND,\n    );\n  }\n\n  /**\n   * Returns the user if refresh token matches.\n   * @param refreshToken Refresh token to be compared\n   * @param userId Desired user's id\n   */\n  async getUserIfRefreshTokenMatches(refreshToken: string, userId: number) {\n    const user = await this.getById(userId);\n\n    const isRefreshTokenMatching = await bcryptCompare(\n      refreshToken,\n      user.currentHashedRefreshToken,\n    );\n\n    if (isRefreshTokenMatching) {\n      return user;\n    }\n  }\n\n  /**\n   * Removes the user's refresh token\n   * @param id Desired user's id\n   */\n  async removeRefreshToken(id: number) {\n    return this.prisma.user.update({\n      where: {\n        id,\n      },\n      data: {\n        currentHashedRefreshToken: null,\n      },\n    });\n  }\n\n  /**\n   * Creates a new user\n   * @param userData user data\n   */\n  async create({ email, name, password }: CreateUserDto) {\n    const newUser = await this.prisma.user.create({\n      data: {\n        email,\n        name,\n        password,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        roles: ['User'],\n      },\n    });\n    await this.stripePaymentsService.createCustomer(name, email);\n    return newUser;\n  }\n\n  /**\n   * Marks a user's email as verified\n   * @param email The verified email\n   */\n  async markEmailAsConfirmed(email: string) {\n    const user = await this.prisma.user.update({\n      where: {\n        email,\n      },\n      data: {\n        isEmailVerified: true,\n      },\n    });\n    return user;\n  }\n\n  /**\n   * Sets the refresh token after hashing to the given user\n   * @param refreshToken Refresh token to be set\n   * @param id ID of the desired user\n   */\n  async setCurrentRefreshToken(refreshToken: string, id: number) {\n    const currentHashedRefreshToken = await bcryptHash(refreshToken, 10);\n    await this.prisma.user.update({\n      where: {\n        id,\n      },\n      data: {\n        currentHashedRefreshToken,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/VerificationTokenPayload.html":{"url":"interfaces/VerificationTokenPayload.html","title":"interface - VerificationTokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  VerificationTokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email-verification/types/verification-payload.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface VerificationTokenPayload {\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/authentication/authentication.controller.ts\n            \n            controller\n            AuthenticationController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/authentication/authentication.service.ts\n            \n            injectable\n            AuthenticationService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/authentication/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/authentication/guards/email-confirmation.guard.ts\n            \n            guard\n            EmailConfirmationGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/guards/jwt-authentication.guard.ts\n            \n            injectable\n            JwtAuthenticationGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/guards/jwt-token-refresh.guard.ts\n            \n            injectable\n            JwtRefreshGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/guards/local-authentication.guard.ts\n            \n            injectable\n            LocalAuthenticationGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/guards/role.guard.ts\n            \n            variable\n            RoleGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/strategies/jwt-refresh-token.strategy.ts\n            \n            injectable\n            JwtRefreshTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/types/request-with-user.types.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/types/token-payload.types.ts\n            \n            interface\n            TokenPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/email-verification/dto/confirm-email.dto.ts\n            \n            class\n            ConfirmEmailDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/email-verification/email-verification.controller.ts\n            \n            controller\n            EmailVerificationController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/email-verification/email-verification.service.ts\n            \n            injectable\n            EmailVerificationService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/email-verification/types/verification-payload.types.ts\n            \n            interface\n            VerificationTokenPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/email/email.controller.ts\n            \n            controller\n            EmailController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/email/email.service.ts\n            \n            injectable\n            EmailService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            variable\n            module\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/stripe-payments/dto/create-charge.dto.ts\n            \n            class\n            CreateChargeDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/stripe-payments/stripe-payments.controller.ts\n            \n            controller\n            StripePaymentsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/stripe-payments/stripe-payments.service.ts\n            \n            injectable\n            StripePaymentsService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/dto/add-user-address.dto.ts\n            \n            class\n            AddUserAddressDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dto/update-user-address.dto.ts\n            \n            class\n            UpdateUserAddressDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                84 %\n                (11/13)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @hapi/joi : ^17.1.1\n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^2.1.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.1\n        \n            @nestjs/passport : ^8.2.2\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/swagger : ^5.2.1\n        \n            @prisma/client : ^3.15.2\n        \n            bcrypt : ^5.0.1\n        \n            cache-manager : ^4.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            cookie-parser : ^1.4.6\n        \n            nodemailer : ^6.7.5\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            stripe : ^9.9.0\n        \n            swagger-ui-express : ^4.4.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostgresErrorCodes   (src/.../postgres-error-code.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/enums/postgres-error-code.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostgresErrorCodes\n                    \n                \n                        \n                            \n                                 UniqueViolation\n                            \n                        \n                        \n                            \n                                Value : 23505\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthenticationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailVerificationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StripePaymentsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\ncluster_EmailVerificationModule\n\n\n\ncluster_EmailVerificationModule_exports\n\n\n\ncluster_EmailVerificationModule_providers\n\n\n\ncluster_StripePaymentsModule\n\n\n\ncluster_StripePaymentsModule_exports\n\n\n\ncluster_StripePaymentsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nEmailModule\n\nEmailModule\n\n\n\nEmailVerificationModule\n\nEmailVerificationModule\n\nEmailVerificationModule -->\n\nEmailModule->EmailVerificationModule\n\n\n\nAppModule -->\n\nEmailModule->AppModule\n\n\n\n\n\nEmailService \n\nEmailService \n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\nAuthenticationModule -->\n\nEmailVerificationModule->AuthenticationModule\n\n\n\nAppModule -->\n\nEmailVerificationModule->AppModule\n\n\n\n\n\nEmailVerificationService \n\nEmailVerificationService \n\nEmailVerificationService  -->\n\nEmailVerificationModule->EmailVerificationService \n\n\n\n\n\nStripePaymentsModule\n\nStripePaymentsModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nStripePaymentsModule->UsersModule\n\n\n\nAppModule -->\n\nStripePaymentsModule->AppModule\n\n\n\n\n\nStripePaymentsService \n\nStripePaymentsService \n\nStripePaymentsService  -->\n\nStripePaymentsModule->StripePaymentsService \n\n\n\nAuthenticationModule -->\n\nUsersModule->AuthenticationModule\n\n\n\nEmailVerificationModule -->\n\nUsersModule->EmailVerificationModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nJwtRefreshTokenStrategy\n\nJwtRefreshTokenStrategy\n\nAuthenticationModule -->\n\nJwtRefreshTokenStrategy->AuthenticationModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthenticationModule -->\n\nJwtStrategy->AuthenticationModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthenticationModule -->\n\nLocalStrategy->AuthenticationModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\nEmailVerificationService\n\nEmailVerificationService\n\nEmailVerificationModule -->\n\nEmailVerificationService->EmailVerificationModule\n\n\n\n\n\nStripePaymentsService\n\nStripePaymentsService\n\nStripePaymentsModule -->\n\nStripePaymentsService->StripePaymentsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    11 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    7 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            module   (src/.../main.ts)\n                        \n                        \n                            RoleGuard   (src/.../role.guard.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        module\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n\n\n        \n    \n\n    src/authentication/guards/role.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RoleGuard\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (role: Role): Type => {\n  class RoleGuardMixin extends JwtAuthenticationGuard {\n    async canActivate(context: ExecutionContext) {\n      await super.canActivate(context);\n      const request = context.switchToHttp().getRequest();\n      const user = request.user;\n      return user?.roles.includes(role);\n    }\n  }\n\n  return mixin(RoleGuardMixin);\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
