var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/AddUserAddressDto.html",[0,0.01,1,2.109]],["body/classes/AddUserAddressDto.html",[0,0.014,1,3.007,2,1.627,3,0.225,4,0.199,5,0.199,6,5.675,7,2.124,8,2.926,9,0.459,10,1.48,11,3.152,12,3.662,13,3.662,14,3.662,15,3.662,16,0.94,17,0.02,18,2.379,19,2.3,20,4.44,21,1.197,22,3.851,23,3.851,24,3.851,25,3.851,26,3.293,27,0.336,28,3.607,29,3.607,30,1.957,31,0.225,32,0.014,33,0.014]],["title/modules/AppModule.html",[34,1.287,35,2.485]],["body/modules/AppModule.html",[0,0.009,3,0.19,4,0.168,5,0.168,17,0.021,27,0.586,31,0.19,32,0.013,33,0.013,34,1.637,35,4.917,36,1.46,37,2.057,38,2.786,39,2.786,40,3.983,41,3.684,42,3.684,43,3.983,44,3.684,45,3.428,46,2.331,47,1.655,48,1.655,49,3.258,50,2.494,51,0.506,52,3.258,53,1.903,54,1.162,55,3.258,56,2.786,57,3.258,58,3.258,59,1.162,60,1.771,61,2.786,62,2.057,63,1.771,64,2.786,65,3.258,66,3.258,67,3.258,68,3.258,69,3.258,70,7.061,71,3.258,72,2.786,73,3.258,74,2.786,75,2.786,76,3.258,77,3.258,78,3.258,79,3.258,80,3.258,81,3.258,82,3.258,83,3.258,84,1.1,85,1.771]],["title/controllers/AuthenticationController.html",[86,1.219,87,2.485]],["body/controllers/AuthenticationController.html",[0,0.006,3,0.136,4,0.12,5,0.12,7,1.785,9,0.276,16,0.813,17,0.021,19,1.884,21,0.98,27,0.558,31,0.136,32,0.01,33,0.01,51,0.36,60,1.261,84,0.783,86,0.783,87,2.459,88,1.983,89,1.261,90,1.983,91,1.027,92,3.571,93,1.867,94,3.571,95,3.571,96,1.941,97,3.054,98,2.319,99,3.132,100,2.319,101,2.319,102,1.602,103,1.365,104,1.519,105,2.933,106,1.519,107,2.319,108,2.319,109,2.998,110,2.319,111,1.424,112,2.319,113,2.319,114,2.319,115,2.319,116,2.319,117,2.319,118,1.983,119,3.089,120,3.571,121,2.319,122,3.054,123,1.261,124,1.465,125,2.319,126,1.355,127,1.355,128,2.367,129,1.762,130,1.839,131,1.465,132,2.367,133,1.178,134,1.762,135,1.983,136,1.597,137,2.319,138,2.086,139,1.04,140,3.571,141,1.597,142,1.178,143,2.319,144,1.983,145,1.355,146,2.319,147,3.571,148,1.762,149,2.319,150,0.874,151,2.075,152,1.471,153,2.319,154,2.356,155,1.95,156,2.319,157,2.319,158,2.319,159,1.484,160,3.571,161,2.319,162,2.319,163,2.319,164,4.891,165,2.319,166,2.319,167,2.319,168,2.319,169,2.319,170,1.983,171,3.571,172,3.308,173,2.319,174,3.054,175,2.255,176,2.319,177,2.319,178,2.319,179,2.319,180,3.054,181,2.086,182,2.319,183,2.319,184,2.319,185,2.319,186,1.983,187,2.319,188,2.319]],["title/modules/AuthenticationModule.html",[34,1.287,40,2.28]],["body/modules/AuthenticationModule.html",[0,0.009,3,0.187,4,0.166,5,0.166,17,0.021,27,0.599,31,0.187,32,0.013,33,0.013,34,1.618,36,1.436,37,2.033,40,4.5,42,3.664,45,3.41,46,2.305,47,1.628,48,1.628,50,2.862,51,0.498,53,3.076,54,1.143,60,1.742,61,2.741,84,1.532,85,2.466,87,3.625,93,0.972,96,1.742,128,3.41,129,2.435,133,1.628,189,2.741,190,2.741,191,3.205,192,3.962,193,3.962,194,3.962,195,3.205,196,4.536,197,1.628,198,2.741,199,3.205,200,3.205,201,3.205,202,3.205,203,3.205,204,2.741,205,2.024,206,2.728,207,3.205,208,3.205,209,3.205,210,2.435,211,3.205,212,3.205,213,2.435,214,3.205]],["title/injectables/AuthenticationService.html",[128,1.962,215,0.596]],["body/injectables/AuthenticationService.html",[0,0.005,3,0.111,4,0.098,5,0.098,7,1.224,9,0.226,16,0.747,17,0.021,18,2.147,21,1,27,0.488,31,0.111,32,0.009,33,0.009,51,0.295,54,0.677,59,1.088,72,1.624,90,1.624,91,0.877,93,1.752,96,1.032,97,2.609,102,1.554,103,1.324,104,1.473,106,1.473,111,1.217,118,2.609,119,2.766,122,2.609,128,1.659,130,2.164,131,1.199,135,1.624,142,2.225,150,1.15,151,2.442,152,1.292,154,2.44,155,1.913,159,1.455,172,2.906,174,2.609,175,1.927,205,1.199,206,2.566,210,2.318,213,2.318,215,0.503,216,0.677,217,1.624,218,4.888,219,3.051,220,4.38,221,3.051,222,3.051,223,3.825,224,1.624,225,4.605,226,1.899,227,3.051,228,5.123,229,1.899,230,1.899,231,3.051,232,2.296,233,1.899,234,2.559,235,3.051,236,1.899,237,1.899,238,1.899,239,5.123,240,1.899,241,4.103,242,1.624,243,1.624,244,1.624,245,1.624,246,2.609,247,1.443,248,1.624,249,1.624,250,2.906,251,1.899,252,2.234,253,1.443,254,1.307,255,1.899,256,1.443,257,2.609,258,3.051,259,1.899,260,1.109,261,1.899,262,2.609,263,1.899,264,1.899,265,3.015,266,2.225,267,1.624,268,1.624,269,3.825,270,1.899,271,1.899,272,3.825,273,1.899,274,1.624,275,1.899,276,3.051,277,3.051,278,4.38,279,4.38,280,4.38,281,3.051,282,2.101,283,2.609,284,1.899,285,1.899,286,1.899,287,3.051,288,1.899,289,1.899,290,1.899,291,1.899,292,3.051]],["title/classes/ConfirmEmailDto.html",[0,0.01,293,2.485]],["body/classes/ConfirmEmailDto.html",[0,0.016,2,2.055,3,0.284,4,0.251,5,0.251,9,0.58,10,1.719,16,0.709,17,0.02,18,2.019,19,1.735,20,3.349,21,0.903,27,0.424,28,3.25,29,3.25,30,2.471,31,0.284,32,0.017,33,0.017,133,3.038,142,3.29,293,4.117,294,5.113,295,4.16,296,4.864]],["title/classes/CreateChargeDto.html",[0,0.01,297,2.485]],["body/classes/CreateChargeDto.html",[0,0.016,2,1.928,3,0.267,4,0.236,5,0.236,9,0.544,10,1.653,16,0.838,17,0.02,18,1.941,19,2.05,20,3.142,21,1.067,27,0.398,28,3.124,29,3.124,30,2.319,31,0.267,32,0.016,33,0.016,232,2.576,297,3.957,298,3.42,299,5.379,300,3.903,301,5.379,302,5.379,303,6.291,304,4.564,305,4.564]],["title/classes/CreateShopDto.html",[0,0.01,306,2.109]],["body/classes/CreateShopDto.html",[0,0.015,2,2.322,3,0.321,4,0.284,5,0.284,17,0.019,31,0.321,32,0.018,33,0.018,306,3.759,307,4.7,308,4.176]],["title/classes/CreateUserDto.html",[0,0.01,309,2.485]],["body/classes/CreateUserDto.html",[0,0.013,2,2.005,3,0.277,4,0.245,5,0.245,9,0.566,10,1.694,16,0.934,17,0.02,18,2.37,21,1.189,31,0.277,32,0.016,33,0.016,59,2.284,103,1.655,260,3.741,309,4.055,310,5.726,311,4.059,312,4.747,313,4.747,314,4.747]],["title/guards/EmailConfirmationGuard.html",[315,2.743,316,2.109]],["body/guards/EmailConfirmationGuard.html",[0,0.012,3,0.254,4,0.225,5,0.225,9,0.518,16,0.634,17,0.021,21,0.807,27,0.486,31,0.254,32,0.016,33,0.016,51,0.675,59,1.55,91,1.602,99,2.655,102,1.318,103,1.123,104,1.25,105,2.071,106,1.25,144,3.717,145,2.539,154,1.836,159,1.318,215,0.919,265,2.992,266,2.208,316,3.255,317,4.346,318,3.519,319,3.717,320,6.485,321,4.764,322,5.546,323,4.346,324,4.346,325,4.346,326,4.346,327,4.346,328,3.717,329,4.346,330,4.346,331,4.346,332,2.208]],["title/controllers/EmailController.html",[86,1.219,333,2.485]],["body/controllers/EmailController.html",[0,0.012,3,0.251,4,0.222,5,0.222,9,0.512,16,0.627,17,0.021,19,1.533,21,0.798,27,0.533,31,0.251,32,0.015,33,0.015,51,0.667,59,1.973,84,1.452,86,1.452,89,2.337,91,1.591,93,1.855,102,1.304,103,1.111,104,1.236,106,1.236,111,1.714,123,2.337,126,2.511,152,1.452,155,1.714,159,1.304,333,3.809,334,3.676,335,4.731,336,4.299,337,5.231,338,5.532,339,4.299,340,2.811,341,3.325,342,3.676,343,3.676,344,3.676,345,3.676,346,2.049,347,4.299,348,4.299,349,4.299]],["title/modules/EmailModule.html",[34,1.287,41,2.109]],["body/modules/EmailModule.html",[0,0.012,3,0.252,4,0.223,5,0.223,17,0.021,27,0.564,31,0.252,32,0.015,33,0.015,34,1.978,36,1.934,37,2.485,41,4.068,46,2.818,47,2.192,48,2.192,50,2.345,51,0.67,53,3.239,54,1.539,84,1.873,85,3.014,206,2.056,333,4.219,341,3.954,342,3.69,350,3.69,351,3.69,352,3.69,353,4.315,354,3.818,355,4.315]],["title/injectables/EmailService.html",[215,0.596,341,1.962]],["body/injectables/EmailService.html",[0,0.01,3,0.222,4,0.197,5,0.197,7,1.217,9,0.453,10,1.467,16,0.84,17,0.021,21,1.069,27,0.537,31,0.222,32,0.014,33,0.014,51,0.59,54,1.356,91,1.467,102,1.548,103,1.319,104,1.467,106,1.093,150,1.433,151,2.745,152,1.284,159,1.153,206,3.151,215,0.842,216,1.356,332,1.932,335,4.364,337,4.926,341,2.774,343,4.926,344,3.251,346,1.812,356,3.251,357,5.76,358,2.617,359,5.103,360,5.103,361,3.802,362,5.103,363,5.103,364,3.251,365,3.802,366,3.802,367,3.802,368,3.802,369,3.802,370,3.802,371,3.802,372,5.103,373,3.802,374,3.802,375,3.802]],["title/controllers/EmailVerificationController.html",[86,1.219,376,2.485]],["body/controllers/EmailVerificationController.html",[0,0.009,3,0.202,4,0.179,5,0.179,9,0.412,16,0.697,17,0.021,19,1.706,21,0.888,27,0.542,31,0.202,32,0.013,33,0.013,51,0.537,59,1.956,60,2.981,84,1.168,86,1.168,89,1.88,91,1.376,93,1.949,99,2.82,102,1.451,103,1.236,104,1.376,105,2.28,106,1.376,123,1.88,124,2.184,126,2.02,127,2.02,132,2.6,133,2.787,134,2.627,138,2.02,139,1.55,145,2.02,150,1.303,151,1.648,152,1.168,154,1.46,155,2.187,181,2.02,293,4.074,345,2.957,376,3.293,377,2.957,378,4.783,379,3.634,380,4.09,381,3.458,382,4.783,383,3.458,384,4.783,385,3.458,386,4.783,387,4.09,388,3.458,389,3.458,390,3.458,391,3.458,392,3.458,393,3.458,394,1.757,395,2.02,396,3.458,397,3.458,398,3.458,399,3.458,400,3.458,401,3.458,402,3.458,403,3.458,404,3.458]],["title/modules/EmailVerificationModule.html",[34,1.287,42,2.109]],["body/modules/EmailVerificationModule.html",[0,0.01,3,0.222,4,0.197,5,0.197,17,0.021,27,0.589,31,0.222,32,0.014,33,0.014,34,1.82,36,1.704,37,2.287,41,3.862,42,4.14,45,3.594,46,2.593,47,1.932,48,1.932,50,2.774,51,0.59,53,2.981,54,1.356,59,1.82,60,2.067,84,1.723,85,2.774,132,3.881,133,1.932,134,2.888,198,3.251,204,4.364,205,2.401,354,3.513,376,3.966,405,3.251,406,3.251,407,3.802,408,3.251,409,3.802,410,3.802,411,3.802]],["title/injectables/EmailVerificationService.html",[132,1.962,215,0.596]],["body/injectables/EmailVerificationService.html",[0,0.006,3,0.132,4,0.117,5,0.117,7,1.119,9,0.269,11,1.227,16,0.76,17,0.021,18,2.062,21,0.968,27,0.481,31,0.132,32,0.01,33,0.01,51,0.35,54,0.805,59,2.052,60,2.999,74,1.93,75,1.93,91,1.006,93,1.852,102,1.582,103,1.348,104,1.5,106,1.386,111,0.9,130,2.431,131,1.426,132,1.901,133,2.803,142,2.65,150,1.318,151,2.298,152,1.628,154,2.431,155,2.08,159,1.061,205,1.426,206,2.743,210,2.657,213,1.715,215,0.577,216,0.805,218,4.899,225,4.718,232,1.919,234,1.319,250,1.715,254,1.554,257,1.93,262,1.93,265,3.591,266,2.65,267,2.991,274,1.93,282,3.319,283,1.93,341,3.128,379,1.715,380,2.991,387,3.661,412,1.93,413,3.497,414,3.497,415,3.497,416,2.257,417,2.257,418,3.497,419,2.257,420,3.497,421,2.257,422,3.497,423,2.257,424,3.497,425,2.257,426,3.497,427,2.408,428,2.257,429,2.257,430,3.497,431,3.497,432,2.257,433,2.257,434,2.257,435,3.497,436,2.257,437,2.257,438,2.257,439,1.93,440,2.257,441,2.257,442,2.257,443,3.497,444,4.281,445,3.497,446,2.257,447,2.257,448,2.257,449,2.257,450,2.257,451,2.257,452,2.257,453,2.257,454,2.257,455,2.257]],["title/injectables/JwtAuthenticationGuard.html",[139,1.618,215,0.596]],["body/injectables/JwtAuthenticationGuard.html",[0,0.014,3,0.303,4,0.268,5,0.268,17,0.02,27,0.542,31,0.303,32,0.017,33,0.017,51,0.805,139,2.785,197,2.634,215,1.026,216,1.849,394,2.634,456,3.938,457,3.938,458,2.47,459,4.433]],["title/injectables/JwtRefreshGuard.html",[141,2.485,215,0.596]],["body/injectables/JwtRefreshGuard.html",[0,0.014,3,0.299,4,0.265,5,0.265,17,0.02,27,0.538,31,0.299,32,0.017,33,0.017,51,0.794,96,2.781,141,4.245,142,3.133,197,2.6,215,1.018,216,1.825,394,2.6,457,3.887,458,2.438,459,4.375,460,4.375]],["title/injectables/JwtRefreshTokenStrategy.html",[192,2.28,215,0.596]],["body/injectables/JwtRefreshTokenStrategy.html",[0,0.009,3,0.192,4,0.17,5,0.17,7,1.477,9,0.391,16,0.673,17,0.021,21,0.857,27,0.566,31,0.192,32,0.013,33,0.013,51,0.51,54,1.172,91,1.327,93,1.619,96,3.146,102,1.4,103,1.193,104,1.327,105,3.095,106,0.945,111,1.31,130,2.445,131,2.075,142,1.669,150,1.74,151,2.2,152,1.559,154,1.949,155,1.31,159,1.4,175,2.075,192,2.915,197,1.669,206,3.013,215,0.762,216,1.172,252,3.381,253,2.496,254,2.261,282,3.674,332,1.669,358,2.261,458,1.565,461,4.563,462,2.809,463,3.506,464,5.336,465,3.285,466,4.615,467,3.285,468,2.809,469,3.506,470,2.261,471,3.506,472,3.506,473,2.261,474,2.496,475,2.809,476,2.809,477,3.285,478,2.809,479,3.285,480,3.285,481,3.947,482,3.285,483,3.285,484,3.285,485,2.809]],["title/injectables/JwtStrategy.html",[193,2.28,215,0.596]],["body/injectables/JwtStrategy.html",[0,0.01,3,0.212,4,0.188,5,0.188,9,0.432,16,0.721,17,0.021,21,0.918,27,0.582,31,0.212,32,0.014,33,0.014,51,0.563,54,1.294,91,1.421,93,1.706,102,1.499,103,1.278,104,1.421,105,2.68,106,1.043,111,1.446,130,2.754,131,2.291,150,1.863,151,2.356,152,1.669,159,1.499,193,3.122,197,1.843,206,3.18,215,0.816,216,1.294,224,3.102,252,3.528,253,2.756,254,2.497,282,2.497,458,1.729,463,3.755,468,3.102,469,2.756,470,2.497,471,2.756,472,2.756,473,2.497,474,2.756,475,3.102,476,3.102,478,3.102,486,3.102,487,3.627,488,4.943,489,3.627,490,3.102,491,3.627,492,3.627,493,3.627]],["title/injectables/LocalAuthenticationGuard.html",[136,2.485,215,0.596]],["body/injectables/LocalAuthenticationGuard.html",[0,0.014,3,0.303,4,0.268,5,0.268,17,0.02,27,0.542,31,0.303,32,0.017,33,0.017,51,0.805,136,4.279,197,2.634,215,1.026,216,1.849,456,3.938,457,3.938,458,2.47,494,4.433,495,5.184]],["title/injectables/LocalStrategy.html",[194,2.28,215,0.596]],["body/injectables/LocalStrategy.html",[0,0.011,3,0.23,4,0.203,5,0.203,7,1.257,9,0.468,16,0.76,17,0.021,18,2.254,21,0.968,27,0.566,31,0.23,32,0.015,33,0.015,51,0.61,59,1.86,91,1.5,93,1.776,102,1.582,103,1.348,104,1.5,106,1.13,128,3.628,129,2.984,150,1.481,159,1.191,194,3.294,197,1.996,215,0.861,216,1.401,260,3.644,346,1.872,458,1.872,463,3.962,469,2.984,470,2.704,472,2.984,474,2.984,490,3.359,496,3.359,497,3.928,498,3.928,499,5.215,500,3.928,501,4.46,502,3.359,503,2.295,504,3.928,505,3.928]],["title/classes/LoginDto.html",[0,0.01,109,2.485]],["body/classes/LoginDto.html",[0,0.016,2,1.958,3,0.271,4,0.24,5,0.24,9,0.552,10,1.669,16,0.846,17,0.02,18,2.243,19,2.07,21,1.077,27,0.404,28,3.155,29,3.155,30,2.355,31,0.271,32,0.016,33,0.016,59,2.26,109,3.995,260,3.701,506,3.964,507,4.813,508,4.636,509,3.964,510,4.636,511,3.964,512,3.964]],["title/classes/RegisterDto.html",[0,0.01,119,2.28]],["body/classes/RegisterDto.html",[0,0.015,2,1.856,3,0.257,4,0.227,5,0.227,9,0.524,10,1.613,16,0.901,17,0.02,18,2.324,19,2.204,20,3.026,21,1.148,27,0.383,28,3.36,29,3.36,30,2.233,31,0.257,32,0.016,33,0.016,59,2.204,103,1.598,119,3.544,260,3.611,507,4.696,509,3.758,511,3.758,512,3.758,513,3.758,514,4.395,515,4.395,516,4.395]],["title/interfaces/RequestWithUser.html",[99,1.72,517,1.962]],["body/interfaces/RequestWithUser.html",[3,0.286,4,0.253,5,0.253,7,2.313,9,0.582,10,1.724,16,0.712,17,0.02,27,0.523,31,0.286,32,0.017,33,0.017,99,2.857,105,3.091,395,2.853,458,2.857,473,3.363,503,2.853,517,2.655,518,3.363,519,4.177]],["title/classes/ShopOpenRequestDto.html",[0,0.01,520,2.28]],["body/classes/ShopOpenRequestDto.html",[0,0.011,2,1.128,3,0.156,4,0.138,5,0.138,9,0.318,10,1.142,11,2.579,12,2.996,13,2.996,14,2.996,15,2.996,16,0.976,17,0.021,18,2.369,19,2.388,21,1.243,27,0.346,28,3.48,29,3.48,30,1.357,31,0.156,32,0.011,33,0.011,103,1.226,332,2.019,340,1.357,507,3.604,520,2.509,521,5.786,522,4.273,523,2.283,524,4.057,525,4.057,526,4.057,527,4.057,528,2.771,529,4.057,530,6.265,531,2.67,532,6.098,533,2.67,534,3.973,535,2.67,536,2.67,537,2.67,538,2.67,539,2.67,540,3.973,541,5.255,542,5.255,543,2.67,544,2.67,545,2.67,546,2.67,547,2.67,548,2.67,549,3.973,550,4.744,551,2.67,552,1.838,553,1.838,554,3.973,555,2.67]],["title/controllers/ShopsController.html",[86,1.219,556,2.485]],["body/controllers/ShopsController.html",[0,0.008,3,0.166,4,0.147,5,0.147,7,1.329,9,0.338,16,0.717,17,0.021,19,1.93,21,1.005,27,0.576,31,0.166,32,0.012,33,0.012,51,0.44,84,0.958,86,0.958,89,1.542,91,1.194,99,2.963,102,1.491,103,1.27,104,1.413,106,1.556,123,2.258,124,1.791,126,1.657,127,1.657,138,1.657,139,1.271,145,1.657,152,0.958,159,1.641,181,3.161,232,2.203,306,1.657,316,1.657,318,1.791,340,2.926,346,1.352,394,1.441,395,1.657,520,3.417,522,1.791,552,1.953,553,1.953,556,2.86,557,2.425,558,2.836,559,4.154,560,2.623,561,4.627,562,3.552,563,2.836,564,2.836,565,4.154,566,2.836,567,4.154,568,2.425,569,2.836,570,4.627,571,2.836,572,2.836,573,4.154,574,2.836,575,2.836,576,2.836,577,2.836,578,2.425,579,1.791,580,2.425,581,3.552,582,4.154,583,2.155,584,2.155,585,2.836,586,2.871,587,2.425,588,1.953,589,3.156,590,1.791,591,1.791,592,2.425,593,2.425,594,2.836,595,4.111,596,4.154,597,2.836,598,2.836,599,4.154,600,4.154,601,2.836,602,2.836,603,2.836,604,2.836,605,2.836]],["title/modules/ShopsModule.html",[34,1.287,43,2.28]],["body/modules/ShopsModule.html",[0,0.012,3,0.256,4,0.226,5,0.226,17,0.021,27,0.586,31,0.256,32,0.016,33,0.016,34,1.996,36,1.962,37,2.509,43,4.341,46,2.844,47,2.225,48,2.225,50,2.38,51,0.68,53,3.27,54,1.562,84,1.891,85,3.043,340,2.225,552,3.014,553,3.014,556,4.248,586,4.015,587,3.744,606,3.744,607,3.744,608,4.378,609,5.598,610,4.378]],["title/injectables/ShopsService.html",[215,0.596,586,2.109]],["body/injectables/ShopsService.html",[0,0.005,3,0.103,4,0.091,5,0.091,7,1.582,9,0.21,10,0.824,11,2.276,12,2.644,13,2.644,14,2.644,15,2.644,16,0.721,17,0.021,18,1.414,21,0.968,27,0.455,31,0.103,32,0.008,33,0.008,51,0.273,54,0.627,91,0.824,93,1.917,102,1.399,103,1.454,104,1.326,105,1.366,106,1.5,111,1.447,123,1.973,150,0.663,152,0.594,154,2.203,155,2.079,159,1.101,175,1.11,206,2.357,215,0.473,216,0.627,232,2.707,234,2.445,266,2.127,306,1.027,332,0.893,340,2.343,346,0.838,358,1.21,501,3.103,503,1.027,520,2.644,522,3.653,524,3.943,525,3.58,526,3.58,527,3.58,528,2.889,529,3.58,560,1.81,561,3.58,562,2.451,570,3.58,579,2.292,586,1.674,588,1.21,589,2.178,590,1.11,591,1.11,592,1.503,593,1.503,611,1.503,612,2.757,613,2.866,614,2.866,615,3.629,616,2.866,617,2.866,618,1.758,619,4.908,620,1.758,621,5.784,622,2.866,623,1.758,624,2.178,625,2.866,626,4.186,627,1.758,628,1.758,629,1.758,630,2.866,631,2.866,632,2.866,633,2.866,634,3.18,635,4.945,636,1.503,637,1.503,638,1.336,639,3.629,640,2.866,641,3.629,642,3.629,643,3.629,644,3.629,645,1.758,646,1.758,647,2.866,648,1.758,649,1.758,650,2.866,651,1.758,652,1.758,653,1.758,654,1.758,655,1.758,656,1.758,657,1.503,658,2.451,659,1.503,660,1.758,661,1.758,662,1.758,663,1.336,664,1.503,665,1.758,666,1.758,667,1.758,668,1.758,669,1.758,670,1.758,671,1.758]],["title/controllers/StripePaymentsController.html",[86,1.219,672,2.485]],["body/controllers/StripePaymentsController.html",[0,0.011,3,0.226,4,0.2,5,0.2,9,0.461,16,0.563,17,0.021,19,1.378,21,0.717,27,0.563,31,0.226,32,0.014,33,0.014,51,0.6,62,2.44,63,2.804,84,1.305,86,1.305,89,2.1,91,1.483,93,1.761,99,2.953,102,1.172,103,0.999,104,1.111,105,2.767,106,1.111,123,2.804,124,3.258,126,3.013,127,2.257,138,2.257,139,1.732,145,2.257,152,1.305,155,1.541,181,2.257,297,4.266,298,2.804,346,1.841,394,1.963,395,2.257,588,2.66,672,3.551,673,3.304,674,4.966,675,5.807,676,3.864,677,3.864,678,3.864,679,3.157,680,2.935,681,3.864,682,3.864,683,3.864,684,3.864,685,3.864,686,3.864]],["title/modules/StripePaymentsModule.html",[34,1.287,44,2.109]],["body/modules/StripePaymentsModule.html",[0,0.012,3,0.249,4,0.221,5,0.221,17,0.02,27,0.562,31,0.249,32,0.015,33,0.015,34,1.964,36,1.913,37,2.468,44,4.058,46,2.798,47,2.169,48,2.169,50,2.32,51,0.663,53,3.217,54,1.522,62,3.478,63,2.32,84,1.86,85,2.993,298,2.32,354,3.791,672,4.197,679,3.948,680,3.242,687,3.65,688,3.65,689,3.65,690,4.268,691,4.268]],["title/injectables/StripePaymentsService.html",[215,0.596,679,1.962]],["body/injectables/StripePaymentsService.html",[0,0.009,3,0.183,4,0.162,5,0.162,9,0.373,10,1.282,16,0.826,17,0.021,18,2.333,21,1.051,27,0.453,31,0.183,32,0.012,33,0.012,51,0.486,54,1.116,59,2.02,62,4.045,63,3.254,91,1.282,93,1.888,102,1.576,103,1.547,104,1.494,106,1.282,111,1.778,150,1.179,151,2.476,152,1.057,154,1.321,155,1.247,159,1.353,206,2.966,215,0.736,216,1.116,218,4.728,232,2.328,266,1.59,298,3.254,301,4.443,302,4.843,332,1.59,346,1.491,358,2.154,379,2.377,674,4.443,679,2.424,692,2.675,693,4.459,694,4.459,695,3.129,696,5.663,697,3.129,698,4.459,699,3.129,700,3.129,701,3.129,702,3.129,703,3.129,704,3.129,705,3.129,706,4.459,707,3.129,708,3.129,709,3.129,710,3.129,711,3.129,712,3.129]],["title/interfaces/TokenPayload.html",[252,2.109,517,1.962]],["body/interfaces/TokenPayload.html",[3,0.303,4,0.268,5,0.268,9,0.618,10,1.787,16,0.756,17,0.02,31,0.303,32,0.017,33,0.017,232,2.983,234,4.032,252,3.631,517,2.818,518,3.569,713,4.433,714,3.938]],["title/classes/UpdateShopDto.html",[0,0.01,590,2.28]],["body/classes/UpdateShopDto.html",[0,0.014,2,2.19,3,0.303,4,0.268,5,0.268,17,0.02,27,0.542,31,0.303,32,0.017,33,0.017,148,3.938,306,3.028,308,3.938,458,2.47,560,3.274,589,3.938,590,3.925,715,4.433,716,5.184,717,5.184]],["title/classes/UpdateUserAddressDto.html",[0,0.01,718,2.109]],["body/classes/UpdateUserAddressDto.html",[0,0.014,2,1.546,3,0.214,4,0.189,5,0.189,7,2.092,8,2.781,9,0.436,10,1.43,11,3.071,12,3.568,13,3.568,14,3.568,15,3.568,16,0.924,17,0.02,18,2.356,19,2.261,21,1.177,26,3.13,27,0.319,28,3.554,29,3.554,30,1.86,31,0.214,32,0.014,33,0.014,104,2.006,718,2.906,719,5.591,720,6.339,721,3.661,722,3.661,723,3.661,724,3.661,725,6.538]],["title/controllers/UsersAddressesController.html",[86,1.219,726,2.485]],["body/controllers/UsersAddressesController.html",[0,0.007,1,2.917,3,0.141,4,0.125,5,0.125,7,1.814,9,0.288,16,0.784,17,0.021,19,1.918,21,0.998,27,0.514,31,0.141,32,0.01,33,0.01,51,0.375,84,0.815,86,0.815,89,1.312,91,1.059,93,2.051,99,3.159,102,1.631,103,1.39,104,1.546,106,1.546,111,2.144,123,2.427,124,3.154,126,2.151,127,1.41,138,1.41,139,1.082,145,1.41,152,0.815,159,1.631,170,2.064,181,3.141,232,2.791,316,1.41,318,1.525,346,1.15,394,1.227,395,1.41,578,2.064,579,1.525,580,2.064,581,4.271,583,1.834,591,1.525,595,4.085,718,2.917,726,2.535,727,4.846,728,2.064,729,2.414,730,3.817,731,3.682,732,3.817,733,3.817,734,3.817,735,2.414,736,5.196,737,2.414,738,2.414,739,2.414,740,2.064,741,2.414,742,2.064,743,2.414,744,2.414,745,5.432,746,2.414,747,2.414,748,2.414,749,2.414,750,2.414,751,2.414,752,2.427,753,1.834,754,1.834,755,2.797,756,2.414,757,2.414,758,2.414,759,2.414,760,4.464,761,2.414,762,2.414,763,2.414,764,2.414,765,2.414,766,2.414]],["title/injectables/UsersAddressesService.html",[215,0.596,752,1.962]],["body/injectables/UsersAddressesService.html",[0,0.005,1,2.439,3,0.102,4,0.09,5,0.09,7,2.148,9,0.209,10,0.821,11,3.648,12,2.637,13,2.637,14,2.637,15,2.637,16,0.719,17,0.021,21,0.966,27,0.364,31,0.102,32,0.008,33,0.008,51,0.272,91,0.821,93,1.915,102,1.395,103,1.189,104,1.323,106,1.323,111,1.834,150,1.364,154,1.943,155,2.076,159,1.395,175,1.804,215,0.471,216,0.624,232,2.988,234,1.668,266,1.838,332,1.838,340,2.121,503,1.022,528,2.687,560,1.105,579,3.547,591,1.105,612,3.495,619,5.353,624,3.749,634,3.172,638,1.33,663,1.33,718,2.439,730,3.094,732,2.442,733,2.442,734,3.094,736,2.442,742,2.442,745,5.248,752,1.552,754,1.33,755,2.17,767,4.642,768,1.497,769,2.856,770,2.856,771,1.75,772,1.75,773,2.856,774,5.328,775,1.75,776,2.856,777,1.75,778,2.856,779,5.429,780,2.442,781,2.856,782,1.75,783,2.856,784,1.75,785,1.75,786,2.856,787,2.442,788,1.75,789,1.75,790,2.856,791,2.856,792,3.618,793,1.75,794,2.442,795,1.75]],["title/controllers/UsersController.html",[86,1.219,796,2.485]],["body/controllers/UsersController.html",[0,0.012,3,0.248,4,0.219,5,0.219,9,0.505,17,0.021,19,1.511,21,0.787,27,0.56,31,0.248,32,0.015,33,0.015,51,0.658,84,1.431,86,1.431,89,2.303,91,1.576,93,1.843,106,1.576,111,1.69,127,2.475,130,2.566,138,2.475,139,1.899,150,1.597,151,2.612,152,1.851,159,1.285,181,2.475,316,2.475,318,2.676,394,2.153,583,3.219,595,3.219,740,3.623,752,3.303,753,3.219,796,3.773,797,3.623,798,5.481,799,6.424,800,4.237,801,4.237,802,4.237]],["title/modules/UsersModule.html",[34,1.287,45,1.962]],["body/modules/UsersModule.html",[0,0.011,3,0.227,4,0.201,5,0.201,17,0.02,27,0.542,31,0.227,32,0.014,33,0.014,34,1.848,36,1.743,37,2.322,44,3.888,45,3.894,46,2.633,47,1.976,48,1.976,50,2.816,51,0.604,63,2.114,64,3.326,84,1.968,85,2.816,130,3.026,298,2.114,354,3.567,726,4.011,752,3.894,753,2.955,796,4.011,803,3.326,804,3.326,805,3.326,806,3.889,807,3.889]],["title/injectables/UsersService.html",[130,1.525,215,0.596]],["body/injectables/UsersService.html",[0,0.004,1,0.883,3,0.088,4,0.078,5,0.078,7,2.199,9,0.18,10,0.727,11,1.375,16,0.775,17,0.021,18,1.949,21,0.987,27,0.425,31,0.088,32,0.007,33,0.007,51,0.235,59,2.25,63,0.821,91,0.727,93,1.966,96,2.984,102,1.551,103,1.419,104,1.471,106,1.693,111,1.831,130,1.068,142,2.789,150,0.57,152,0.51,154,2.06,155,2.12,159,1.393,186,2.163,215,0.417,216,0.539,232,2.586,234,2.229,241,2.79,242,1.292,243,1.292,244,1.292,245,1.292,246,2.163,247,1.148,256,1.148,260,1.478,265,1.741,266,2.478,268,3.262,298,0.821,309,2.626,332,0.768,340,2.158,346,0.72,481,3.632,485,1.292,503,0.883,528,2.683,560,2.06,568,1.292,579,3.357,588,1.04,591,0.954,612,3.226,619,4.962,624,1.922,634,2.898,638,1.148,657,1.292,658,2.163,659,1.292,663,2.478,664,1.292,679,2.497,680,1.148,718,0.883,754,1.148,755,1.922,774,4.694,780,4.374,787,2.163,794,2.163,808,1.292,809,2.529,810,2.529,811,2.529,812,2.529,813,2.529,814,2.529,815,1.511,816,2.529,817,1.511,818,2.529,819,2.529,820,1.511,821,3.815,822,3.815,823,3.815,824,2.529,825,1.511,826,2.529,827,1.511,828,2.529,829,2.529,830,2.529,831,1.511,832,2.529,833,3.815,834,2.529,835,1.511,836,2.529,837,2.529,838,1.511,839,2.529,840,2.529,841,1.511,842,2.529,843,2.529,844,1.511,845,2.529,846,3.262,847,1.511,848,1.511,849,2.529,850,1.511,851,1.511,852,1.511,853,1.511]],["title/interfaces/VerificationTokenPayload.html",[427,2.485,517,1.962]],["body/interfaces/VerificationTokenPayload.html",[3,0.302,4,0.267,5,0.267,9,0.615,10,1.782,16,0.752,17,0.02,18,2.244,31,0.302,32,0.017,33,0.017,59,2.458,133,2.622,427,4.267,517,2.806,518,3.553,714,3.921,854,4.413]],["title/coverage.html",[855,3.743]],["body/coverage.html",[0,0.018,1,1.492,5,0.132,6,2.185,7,1.23,8,2.92,16,0.372,17,0.021,32,0.011,33,0.011,60,2.089,63,2.089,86,2.03,87,1.759,88,2.185,96,1.389,99,1.217,109,1.759,119,1.613,128,1.389,130,1.079,132,1.389,133,2.612,136,1.759,139,1.145,141,1.759,142,1.298,192,1.613,193,1.613,194,1.613,215,1.107,217,2.185,252,1.492,266,1.298,293,1.759,294,2.185,295,2.185,297,1.759,298,2.512,299,2.185,300,2.185,306,1.492,307,2.185,308,2.92,309,1.759,310,2.185,311,2.185,315,1.941,316,1.492,318,1.613,319,2.185,333,1.759,334,2.185,341,1.389,356,2.185,376,1.759,377,2.185,394,1.953,395,1.492,412,2.185,427,1.759,456,2.92,460,2.185,461,2.185,462,2.185,486,2.185,494,2.185,496,2.185,506,2.185,513,2.185,517,2.512,519,2.185,520,1.613,521,2.185,522,1.613,523,2.185,556,1.759,557,2.185,584,1.941,586,1.492,590,1.613,611,2.185,672,1.759,673,2.185,679,1.389,692,2.185,713,2.185,714,2.92,715,2.185,718,1.492,719,2.185,726,1.759,727,2.185,728,2.185,752,1.389,767,2.185,768,2.185,796,1.759,797,2.185,808,2.185,854,2.185,855,1.941,856,2.555,857,2.555,858,2.555,859,7.307,860,5.512,861,2.555,862,5.792,863,4.621,864,6.184,865,6.009,866,2.185,867,2.555,868,2.185,869,2.555,870,2.185,871,2.555,872,3.844,873,2.555,874,2.555,875,2.555,876,2.555,877,2.555,878,2.555,879,2.555,880,2.555]],["title/dependencies.html",[37,1.946,881,2.578]],["body/dependencies.html",[0,0.014,17,0.021,30,2.029,32,0.015,33,0.015,37,1.79,51,0.62,54,1.425,56,3.416,62,2.523,148,3.035,172,3.035,197,2.029,205,2.523,247,3.035,340,2.029,364,3.416,470,4.064,471,3.035,473,3.631,502,3.416,503,2.333,552,2.75,553,2.75,636,3.416,637,3.416,882,3.994,883,5.904,884,3.994,885,3.994,886,3.994,887,3.994,888,3.994,889,3.994,890,3.994,891,3.994,892,3.994,893,3.994,894,3.994,895,3.994,896,3.994,897,3.994,898,3.994,899,3.994,900,3.994,901,3.994,902,3.994,903,3.994,904,3.994,905,3.994,906,3.994,907,3.994,908,3.994,909,3.994,910,3.994,911,3.994,912,3.994,913,3.994,914,3.994,915,3.994,916,3.994,917,3.994,918,3.994]],["title/miscellaneous/enumerations.html",[919,1.761,920,3.713]],["body/miscellaneous/enumerations.html",[9,0.643,17,0.019,32,0.018,33,0.018,248,5.443,249,4.615,250,4.836,919,3.152,920,4.615,921,5.396,922,6.365,923,5.396,924,4.615,925,5.396]],["title/miscellaneous/functions.html",[919,1.761,926,3.713]],["body/miscellaneous/functions.html",[9,0.664,17,0.018,32,0.018,33,0.018,868,4.767,870,5.868,919,3.256,926,4.767,927,5.574]],["title/index.html",[9,0.359,928,3.014,929,3.014]],["body/index.html",[4,0.207,17,0.02,32,0.015,33,0.015,439,3.416,522,2.523,528,2.333,855,3.035,930,3.994,931,3.994,932,5.273,933,3.994,934,3.994,935,3.994,936,3.994,937,3.994,938,3.994,939,5.904,940,3.994,941,3.994,942,3.994,943,3.994,944,6.838,945,3.994,946,3.994,947,3.994,948,6.705,949,3.994,950,3.994,951,5.273,952,3.994,953,3.994,954,3.994,955,3.994,956,5.273,957,5.273,958,3.994,959,3.994,960,3.994,961,5.273,962,5.273,963,3.994,964,3.994,965,3.994,966,3.994,967,3.416,968,3.994,969,3.994,970,3.994,971,3.994,972,3.994,973,3.994,974,3.994,975,3.994,976,3.994,977,3.416,978,3.994,979,3.994,980,3.994,981,3.994,982,3.994,983,3.994,984,3.416]],["title/modules.html",[36,2.208]],["body/modules.html",[17,0.017,32,0.017,33,0.017,35,3.391,36,2.207,40,3.11,41,2.877,42,2.877,43,3.11,44,2.877,45,2.677,967,6.13,985,7.169,986,7.169,987,7.169]],["title/overview.html",[988,4.213]],["body/overview.html",[2,1.284,17,0.021,32,0.012,33,0.012,35,4.808,36,1.363,37,1.958,38,2.6,39,2.6,40,4.44,41,3.71,42,3.972,43,3.739,44,3.71,45,3.768,46,2.22,47,1.545,48,1.545,84,1.027,128,2.779,130,2.682,132,3.452,189,2.6,190,2.6,192,3.229,193,3.229,194,3.229,216,1.084,256,2.31,315,2.31,341,3.452,350,2.6,351,2.6,352,2.6,405,2.6,406,2.6,408,2.6,518,2.093,586,2.987,606,2.6,607,2.6,679,3.452,687,2.6,688,2.6,689,2.6,752,3.452,803,2.6,804,2.6,805,2.6,988,2.6,989,4.368,990,3.04,991,3.04,992,3.04]],["title/properties.html",[10,1.249,881,2.578]],["body/properties.html",[10,1.581,17,0.02,32,0.018,33,0.018,528,3.211,977,4.7,984,4.7,993,5.497,994,5.497,995,5.497]],["title/miscellaneous/variables.html",[919,1.761,996,3.713]],["body/miscellaneous/variables.html",[0,0.013,7,1.544,9,0.575,16,0.703,17,0.021,32,0.017,33,0.017,93,1.463,105,2.299,139,2.162,154,2.513,155,1.924,159,1.805,180,4.126,321,4.126,322,4.126,328,4.126,458,2.299,584,4.52,866,4.126,919,2.818,924,4.126,996,4.126,997,4.825,998,4.825,999,5.949,1000,4.825,1001,4.825,1002,4.825,1003,4.825]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"classes/AddUserAddressDto.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateShopDto.html":{},"classes/CreateUserDto.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ShopOpenRequestDto.html":{},"controllers/ShopsController.html":{},"modules/ShopsModule.html":{},"injectables/ShopsService.html":{},"controllers/StripePaymentsController.html":{},"modules/StripePaymentsModule.html":{},"injectables/StripePaymentsService.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateShopDto.html":{},"classes/UpdateUserAddressDto.html":{},"controllers/UsersAddressesController.html":{},"injectables/UsersAddressesService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":859,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":994,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":908,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":898,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":897,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":903,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":865,"title":{},"body":{"coverage.html":{}}}],["0/13",{"_index":871,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":864,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":862,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":863,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":872,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":860,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":861,"title":{},"body":{"coverage.html":{}}}],["08",{"_index":704,"title":{},"body":{"injectables/StripePaymentsService.html":{}}}],["1",{"_index":991,"title":{},"body":{"overview.html":{}}}],["1.0.0",{"_index":905,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":900,"title":{},"body":{"dependencies.html":{}}}],["1.6.4",{"_index":901,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":256,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["13",{"_index":990,"title":{},"body":{"overview.html":{}}}],["17.1.1",{"_index":882,"title":{},"body":{"dependencies.html":{}}}],["2.1.0",{"_index":884,"title":{},"body":{"dependencies.html":{}}}],["2.1161.0",{"_index":891,"title":{},"body":{"dependencies.html":{}}}],["2020",{"_index":703,"title":{},"body":{"injectables/StripePaymentsService.html":{}}}],["23505",{"_index":925,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["27",{"_index":705,"title":{},"body":{"injectables/StripePaymentsService.html":{}}}],["3",{"_index":992,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":910,"title":{},"body":{"dependencies.html":{}}}],["3.15.2",{"_index":890,"title":{},"body":{"dependencies.html":{}}}],["3/8",{"_index":874,"title":{},"body":{"coverage.html":{}}}],["37",{"_index":873,"title":{},"body":{"coverage.html":{}}}],["4.0.0",{"_index":904,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":895,"title":{},"body":{"dependencies.html":{}}}],["4.4.0",{"_index":916,"title":{},"body":{"dependencies.html":{}}}],["404",{"_index":823,"title":{},"body":{"injectables/UsersService.html":{}}}],["5.0.1",{"_index":892,"title":{},"body":{"dependencies.html":{}}}],["5.2.1",{"_index":889,"title":{},"body":{"dependencies.html":{}}}],["6.7.5",{"_index":902,"title":{},"body":{"dependencies.html":{}}}],["6/8",{"_index":876,"title":{},"body":{"coverage.html":{}}}],["7",{"_index":989,"title":{},"body":{"overview.html":{}}}],["7.2.0",{"_index":912,"title":{},"body":{"dependencies.html":{}}}],["75",{"_index":875,"title":{},"body":{"coverage.html":{}}}],["8.0.0",{"_index":883,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":886,"title":{},"body":{"dependencies.html":{}}}],["8.2.2",{"_index":887,"title":{},"body":{"dependencies.html":{}}}],["8.3.2",{"_index":918,"title":{},"body":{"dependencies.html":{}}}],["8/10",{"_index":878,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":877,"title":{},"body":{"coverage.html":{}}}],["9.9.0",{"_index":913,"title":{},"body":{"dependencies.html":{}}}],["accesstokencookie",{"_index":164,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["action",{"_index":802,"title":{},"body":{"controllers/UsersController.html":{}}}],["address",{"_index":11,"title":{},"body":{"classes/AddUserAddressDto.html":{},"injectables/EmailVerificationService.html":{},"classes/ShopOpenRequestDto.html":{},"injectables/ShopsService.html":{},"classes/UpdateUserAddressDto.html":{},"injectables/UsersAddressesService.html":{},"injectables/UsersService.html":{}}}],["address.dto",{"_index":755,"title":{},"body":{"controllers/UsersAddressesController.html":{},"injectables/UsersAddressesService.html":{},"injectables/UsersService.html":{}}}],["address.dto.ts",{"_index":8,"title":{},"body":{"classes/AddUserAddressDto.html":{},"classes/UpdateUserAddressDto.html":{},"coverage.html":{}}}],["address.dto.ts:10",{"_index":23,"title":{},"body":{"classes/AddUserAddressDto.html":{}}}],["address.dto.ts:12",{"_index":722,"title":{},"body":{"classes/UpdateUserAddressDto.html":{}}}],["address.dto.ts:14",{"_index":25,"title":{},"body":{"classes/AddUserAddressDto.html":{}}}],["address.dto.ts:17",{"_index":723,"title":{},"body":{"classes/UpdateUserAddressDto.html":{}}}],["address.dto.ts:18",{"_index":24,"title":{},"body":{"classes/AddUserAddressDto.html":{}}}],["address.dto.ts:22",{"_index":26,"title":{},"body":{"classes/AddUserAddressDto.html":{},"classes/UpdateUserAddressDto.html":{}}}],["address.dto.ts:27",{"_index":724,"title":{},"body":{"classes/UpdateUserAddressDto.html":{}}}],["address.dto.ts:6",{"_index":22,"title":{},"body":{"classes/AddUserAddressDto.html":{}}}],["address.dto.ts:7",{"_index":721,"title":{},"body":{"classes/UpdateUserAddressDto.html":{}}}],["addressdata",{"_index":736,"title":{},"body":{"controllers/UsersAddressesController.html":{},"injectables/UsersAddressesService.html":{}}}],["addresses",{"_index":779,"title":{},"body":{"injectables/UsersAddressesService.html":{}}}],["addresses.controller.ts",{"_index":728,"title":{},"body":{"controllers/UsersAddressesController.html":{},"coverage.html":{}}}],["addresses.controller.ts:27",{"_index":741,"title":{},"body":{"controllers/UsersAddressesController.html":{}}}],["addresses.controller.ts:34",{"_index":744,"title":{},"body":{"controllers/UsersAddressesController.html":{}}}],["addresses.controller.ts:43",{"_index":738,"title":{},"body":{"controllers/UsersAddressesController.html":{}}}],["addresses.controller.ts:53",{"_index":751,"title":{},"body":{"controllers/UsersAddressesController.html":{}}}],["addresses.controller.ts:68",{"_index":748,"title":{},"body":{"controllers/UsersAddressesController.html":{}}}],["addresses.service.ts",{"_index":768,"title":{},"body":{"injectables/UsersAddressesService.html":{},"coverage.html":{}}}],["addresses.service.ts:11",{"_index":770,"title":{},"body":{"injectables/UsersAddressesService.html":{}}}],["addresses.service.ts:115",{"_index":782,"title":{},"body":{"injectables/UsersAddressesService.html":{}}}],["addresses.service.ts:21",{"_index":777,"title":{},"body":{"injectables/UsersAddressesService.html":{}}}],["addresses.service.ts:34",{"_index":775,"title":{},"body":{"injectables/UsersAddressesService.html":{}}}],["addresses.service.ts:48",{"_index":772,"title":{},"body":{"injectables/UsersAddressesService.html":{}}}],["addresses.service.ts:79",{"_index":785,"title":{},"body":{"injectables/UsersAddressesService.html":{}}}],["addressid",{"_index":745,"title":{},"body":{"controllers/UsersAddressesController.html":{},"injectables/UsersAddressesService.html":{}}}],["adds",{"_index":773,"title":{},"body":{"injectables/UsersAddressesService.html":{}}}],["adduseraddress",{"_index":730,"title":{},"body":{"controllers/UsersAddressesController.html":{},"injectables/UsersAddressesService.html":{}}}],["adduseraddress(id",{"_index":771,"title":{},"body":{"injectables/UsersAddressesService.html":{}}}],["adduseraddress(undefined",{"_index":735,"title":{},"body":{"controllers/UsersAddressesController.html":{}}}],["adduseraddressdto",{"_index":1,"title":{"classes/AddUserAddressDto.html":{}},"body":{"classes/AddUserAddressDto.html":{},"controllers/UsersAddressesController.html":{},"injectables/UsersAddressesService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["admins",{"_index":631,"title":{},"body":{"injectables/ShopsService.html":{}}}],["age=${this.configservice.get",{"_index":287,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["age=0",{"_index":281,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["already",{"_index":267,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{}}}],["amazing",{"_index":968,"title":{},"body":{"index.html":{}}}],["amount",{"_index":301,"title":{},"body":{"classes/CreateChargeDto.html":{},"injectables/StripePaymentsService.html":{}}}],["apibody",{"_index":147,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["apiversion",{"_index":702,"title":{},"body":{"injectables/StripePaymentsService.html":{}}}],["app",{"_index":946,"title":{},"body":{"index.html":{}}}],["application",{"_index":437,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["applications",{"_index":938,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":35,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["approveshopopenrequest",{"_index":613,"title":{},"body":{"injectables/ShopsService.html":{}}}],["approveshopopenrequest(id",{"_index":617,"title":{},"body":{"injectables/ShopsService.html":{}}}],["approveshopopenrequests",{"_index":559,"title":{},"body":{"controllers/ShopsController.html":{}}}],["approveshopopenrequests(@param('requestid",{"_index":604,"title":{},"body":{"controllers/ShopsController.html":{}}}],["approveshopopenrequests(requestid",{"_index":563,"title":{},"body":{"controllers/ShopsController.html":{}}}],["async",{"_index":93,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"controllers/EmailController.html":{},"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ShopsService.html":{},"controllers/StripePaymentsController.html":{},"injectables/StripePaymentsService.html":{},"controllers/UsersAddressesController.html":{},"injectables/UsersAddressesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["auth",{"_index":371,"title":{},"body":{"injectables/EmailService.html":{}}}],["authenticate",{"_index":92,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["authenticate(@req",{"_index":188,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["authenticate(request",{"_index":98,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["authentication",{"_index":90,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["authentication.controller",{"_index":199,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["authentication.guard",{"_index":138,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailVerificationController.html":{},"controllers/ShopsController.html":{},"controllers/StripePaymentsController.html":{},"controllers/UsersAddressesController.html":{},"controllers/UsersController.html":{}}}],["authentication.guard.ts",{"_index":456,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/LocalAuthenticationGuard.html":{},"coverage.html":{}}}],["authentication.service",{"_index":129,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/LocalStrategy.html":{}}}],["authentication/authentication.module",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["authentication=${token",{"_index":286,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["authenticationcontroller",{"_index":87,"title":{"controllers/AuthenticationController.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"coverage.html":{}}}],["authenticationmodule",{"_index":40,"title":{"modules/AuthenticationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules.html":{},"overview.html":{}}}],["authenticationservice",{"_index":128,"title":{"injectables/AuthenticationService.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["authguard",{"_index":457,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/LocalAuthenticationGuard.html":{}}}],["authguard('jwt",{"_index":459,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{}}}],["authguard('local",{"_index":495,"title":{},"body":{"injectables/LocalAuthenticationGuard.html":{}}}],["author",{"_index":977,"title":{},"body":{"index.html":{},"properties.html":{}}}],["await",{"_index":155,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/EmailController.html":{},"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/ShopsService.html":{},"controllers/StripePaymentsController.html":{},"injectables/StripePaymentsService.html":{},"injectables/UsersAddressesService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["aws",{"_index":636,"title":{},"body":{"injectables/ShopsService.html":{},"dependencies.html":{}}}],["aws_access_key_id",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["aws_region",{"_index":80,"title":{},"body":{"modules/AppModule.html":{}}}],["aws_s3_public_bucket_name",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["aws_secret_access_key",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["backers",{"_index":969,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":426,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["badrequestexception('bad",{"_index":455,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["badrequestexception('email",{"_index":444,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["bcrypt",{"_index":247,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcryptcompare",{"_index":246,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["bcrypthash",{"_index":244,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["bcrypthash(refreshtoken",{"_index":853,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypthash(registrationdata.password",{"_index":255,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["body",{"_index":123,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailController.html":{},"controllers/EmailVerificationController.html":{},"controllers/ShopsController.html":{},"injectables/ShopsService.html":{},"controllers/StripePaymentsController.html":{},"controllers/UsersAddressesController.html":{}}}],["boolean",{"_index":325,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["bootstrap",{"_index":870,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":987,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":985,"title":{},"body":{"modules.html":{}}}],["bucket",{"_index":642,"title":{},"body":{"injectables/ShopsService.html":{}}}],["building",{"_index":933,"title":{},"body":{"index.html":{}}}],["businessdocument",{"_index":651,"title":{},"body":{"injectables/ShopsService.html":{}}}],["businessdocument.buffer",{"_index":654,"title":{},"body":{"injectables/ShopsService.html":{}}}],["businessdocuments",{"_index":524,"title":{},"body":{"classes/ShopOpenRequestDto.html":{},"injectables/ShopsService.html":{}}}],["businessdocumenturl",{"_index":652,"title":{},"body":{"injectables/ShopsService.html":{}}}],["businessdocumenturls",{"_index":650,"title":{},"body":{"injectables/ShopsService.html":{}}}],["businessdocumenturls.push(businessdocumenturl",{"_index":655,"title":{},"body":{"injectables/ShopsService.html":{}}}],["cache",{"_index":893,"title":{},"body":{"dependencies.html":{}}}],["canactivate",{"_index":320,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["canactivate(context",{"_index":321,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"miscellaneous/variables.html":{}}}],["catch",{"_index":262,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{}}}],["charge",{"_index":674,"title":{},"body":{"controllers/StripePaymentsController.html":{},"injectables/StripePaymentsService.html":{}}}],["charge(amount",{"_index":695,"title":{},"body":{"injectables/StripePaymentsService.html":{}}}],["charge.amount",{"_index":684,"title":{},"body":{"controllers/StripePaymentsController.html":{}}}],["charge.dto",{"_index":681,"title":{},"body":{"controllers/StripePaymentsController.html":{}}}],["charge.dto.ts",{"_index":300,"title":{},"body":{"classes/CreateChargeDto.html":{},"coverage.html":{}}}],["charge.dto.ts:6",{"_index":305,"title":{},"body":{"classes/CreateChargeDto.html":{}}}],["charge.dto.ts:9",{"_index":304,"title":{},"body":{"classes/CreateChargeDto.html":{}}}],["charge.paymentmethodid",{"_index":685,"title":{},"body":{"controllers/StripePaymentsController.html":{}}}],["city",{"_index":12,"title":{},"body":{"classes/AddUserAddressDto.html":{},"classes/ShopOpenRequestDto.html":{},"injectables/ShopsService.html":{},"classes/UpdateUserAddressDto.html":{},"injectables/UsersAddressesService.html":{}}}],["class",{"_index":0,"title":{"classes/AddUserAddressDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateShopDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/ShopOpenRequestDto.html":{},"classes/UpdateShopDto.html":{},"classes/UpdateUserAddressDto.html":{}},"body":{"classes/AddUserAddressDto.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateShopDto.html":{},"classes/CreateUserDto.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/ShopOpenRequestDto.html":{},"controllers/ShopsController.html":{},"modules/ShopsModule.html":{},"injectables/ShopsService.html":{},"controllers/StripePaymentsController.html":{},"modules/StripePaymentsModule.html":{},"injectables/StripePaymentsService.html":{},"classes/UpdateShopDto.html":{},"classes/UpdateUserAddressDto.html":{},"controllers/UsersAddressesController.html":{},"injectables/UsersAddressesService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/AddUserAddressDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateShopDto.html":{},"classes/CreateUserDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/ShopOpenRequestDto.html":{},"classes/UpdateShopDto.html":{},"classes/UpdateUserAddressDto.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":390,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["click",{"_index":438,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["client",{"_index":787,"title":{},"body":{"injectables/UsersAddressesService.html":{},"injectables/UsersService.html":{}}}],["cluster_appmodule",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule",{"_index":189,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_imports",{"_index":191,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["cluster_authenticationmodule_providers",{"_index":190,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_emailmodule",{"_index":350,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_exports",{"_index":352,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_providers",{"_index":351,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailverificationmodule",{"_index":405,"title":{},"body":{"modules/EmailVerificationModule.html":{},"overview.html":{}}}],["cluster_emailverificationmodule_exports",{"_index":406,"title":{},"body":{"modules/EmailVerificationModule.html":{},"overview.html":{}}}],["cluster_emailverificationmodule_imports",{"_index":407,"title":{},"body":{"modules/EmailVerificationModule.html":{}}}],["cluster_emailverificationmodule_providers",{"_index":408,"title":{},"body":{"modules/EmailVerificationModule.html":{},"overview.html":{}}}],["cluster_shopsmodule",{"_index":606,"title":{},"body":{"modules/ShopsModule.html":{},"overview.html":{}}}],["cluster_shopsmodule_providers",{"_index":607,"title":{},"body":{"modules/ShopsModule.html":{},"overview.html":{}}}],["cluster_stripepaymentsmodule",{"_index":687,"title":{},"body":{"modules/StripePaymentsModule.html":{},"overview.html":{}}}],["cluster_stripepaymentsmodule_exports",{"_index":689,"title":{},"body":{"modules/StripePaymentsModule.html":{},"overview.html":{}}}],["cluster_stripepaymentsmodule_providers",{"_index":688,"title":{},"body":{"modules/StripePaymentsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":803,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":804,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":806,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":805,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code.enum",{"_index":251,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["code.enum.ts",{"_index":922,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["compare",{"_index":245,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["compared",{"_index":829,"title":{},"body":{"injectables/UsersService.html":{}}}],["configmodule",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailModule.html":{},"modules/EmailVerificationModule.html":{},"modules/ShopsModule.html":{},"modules/StripePaymentsModule.html":{}}}],["configmodule.forroot",{"_index":66,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":206,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/ShopsService.html":{},"injectables/StripePaymentsService.html":{}}}],["configservice.get('jwt_access_secret",{"_index":211,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["configservice.get('jwt_access_token_expires_in",{"_index":214,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["configservice.get('jwt_access_token_secret",{"_index":492,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('jwt_refresh_token_secret",{"_index":479,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["confirm",{"_index":379,"title":{},"body":{"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{},"injectables/StripePaymentsService.html":{}}}],["confirm(@body",{"_index":401,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["confirm(confirmationdata",{"_index":381,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["confirmation",{"_index":387,"title":{},"body":{"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{}}}],["confirmation.guard",{"_index":583,"title":{},"body":{"controllers/ShopsController.html":{},"controllers/UsersAddressesController.html":{},"controllers/UsersController.html":{}}}],["confirmation.guard.ts",{"_index":319,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"coverage.html":{}}}],["confirmation.guard.ts:11",{"_index":323,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["confirmationdata",{"_index":384,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["confirmationdata.token",{"_index":403,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["confirmed",{"_index":445,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["confirmemail",{"_index":413,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["confirmemail(email",{"_index":418,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["confirmemaildto",{"_index":293,"title":{"classes/ConfirmEmailDto.html":{}},"body":{"classes/ConfirmEmailDto.html":{},"controllers/EmailVerificationController.html":{},"coverage.html":{}}}],["const",{"_index":154,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/ShopsService.html":{},"injectables/StripePaymentsService.html":{},"injectables/UsersAddressesService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":150,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/ShopsService.html":{},"injectables/StripePaymentsService.html":{},"injectables/UsersAddressesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["constructor(authenticationservice",{"_index":497,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(configservice",{"_index":358,"title":{},"body":{"injectables/EmailService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/ShopsService.html":{},"injectables/StripePaymentsService.html":{}}}],["constructor(jwtservice",{"_index":416,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["constructor(private",{"_index":346,"title":{},"body":{"controllers/EmailController.html":{},"injectables/EmailService.html":{},"injectables/LocalStrategy.html":{},"controllers/ShopsController.html":{},"injectables/ShopsService.html":{},"controllers/StripePaymentsController.html":{},"injectables/StripePaymentsService.html":{},"controllers/UsersAddressesController.html":{},"injectables/UsersService.html":{}}}],["constructor(stripepaymentsservice",{"_index":815,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":224,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{}}}],["contactemail",{"_index":525,"title":{},"body":{"classes/ShopOpenRequestDto.html":{},"injectables/ShopsService.html":{}}}],["contactphone",{"_index":526,"title":{},"body":{"classes/ShopOpenRequestDto.html":{},"injectables/ShopsService.html":{}}}],["context",{"_index":324,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":328,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"miscellaneous/variables.html":{}}}],["controller",{"_index":86,"title":{"controllers/AuthenticationController.html":{},"controllers/EmailController.html":{},"controllers/EmailVerificationController.html":{},"controllers/ShopsController.html":{},"controllers/StripePaymentsController.html":{},"controllers/UsersAddressesController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailController.html":{},"controllers/EmailVerificationController.html":{},"controllers/ShopsController.html":{},"controllers/StripePaymentsController.html":{},"controllers/UsersAddressesController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('authentication",{"_index":149,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["controller('charge",{"_index":682,"title":{},"body":{"controllers/StripePaymentsController.html":{}}}],["controller('email",{"_index":345,"title":{},"body":{"controllers/EmailController.html":{},"controllers/EmailVerificationController.html":{}}}],["controller('shops",{"_index":594,"title":{},"body":{"controllers/ShopsController.html":{}}}],["controller('users",{"_index":801,"title":{},"body":{"controllers/UsersController.html":{}}}],["controller('users/addresses",{"_index":756,"title":{},"body":{"controllers/UsersAddressesController.html":{}}}],["controllers",{"_index":84,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"controllers/ShopsController.html":{},"modules/ShopsModule.html":{},"controllers/StripePaymentsController.html":{},"modules/StripePaymentsModule.html":{},"controllers/UsersAddressesController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cookie",{"_index":172,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"dependencies.html":{}}}],["country",{"_index":13,"title":{},"body":{"classes/AddUserAddressDto.html":{},"classes/ShopOpenRequestDto.html":{},"injectables/ShopsService.html":{},"classes/UpdateUserAddressDto.html":{},"injectables/UsersAddressesService.html":{}}}],["coverage",{"_index":855,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["coverphoto",{"_index":527,"title":{},"body":{"classes/ShopOpenRequestDto.html":{},"injectables/ShopsService.html":{}}}],["coverphoto.buffer",{"_index":646,"title":{},"body":{"injectables/ShopsService.html":{}}}],["coverphotourl",{"_index":640,"title":{},"body":{"injectables/ShopsService.html":{}}}],["create",{"_index":560,"title":{},"body":{"controllers/ShopsController.html":{},"injectables/ShopsService.html":{},"classes/UpdateShopDto.html":{},"injectables/UsersAddressesService.html":{},"injectables/UsersService.html":{}}}],["create(@req",{"_index":597,"title":{},"body":{"controllers/ShopsController.html":{}}}],["create(undefined",{"_index":568,"title":{},"body":{"controllers/ShopsController.html":{},"injectables/UsersService.html":{}}}],["createcharge",{"_index":675,"title":{},"body":{"controllers/StripePaymentsController.html":{}}}],["createcharge(charge",{"_index":676,"title":{},"body":{"controllers/StripePaymentsController.html":{}}}],["createchargedto",{"_index":297,"title":{"classes/CreateChargeDto.html":{}},"body":{"classes/CreateChargeDto.html":{},"controllers/StripePaymentsController.html":{},"coverage.html":{}}}],["createcustomer",{"_index":693,"title":{},"body":{"injectables/StripePaymentsService.html":{}}}],["createcustomer(name",{"_index":698,"title":{},"body":{"injectables/StripePaymentsService.html":{}}}],["createdat",{"_index":657,"title":{},"body":{"injectables/ShopsService.html":{},"injectables/UsersService.html":{}}}],["createduser",{"_index":258,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["createduser.password",{"_index":261,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["creates",{"_index":818,"title":{},"body":{"injectables/UsersService.html":{}}}],["createshopdto",{"_index":306,"title":{"classes/CreateShopDto.html":{}},"body":{"classes/CreateShopDto.html":{},"controllers/ShopsController.html":{},"injectables/ShopsService.html":{},"classes/UpdateShopDto.html":{},"coverage.html":{}}}],["createtransport",{"_index":363,"title":{},"body":{"injectables/EmailService.html":{}}}],["createuserdto",{"_index":309,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["credentials",{"_index":276,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["currency",{"_index":711,"title":{},"body":{"injectables/StripePaymentsService.html":{}}}],["currenthashedrefreshtoken",{"_index":846,"title":{},"body":{"injectables/UsersService.html":{}}}],["customer",{"_index":709,"title":{},"body":{"injectables/StripePaymentsService.html":{}}}],["customerid",{"_index":696,"title":{},"body":{"injectables/StripePaymentsService.html":{}}}],["data",{"_index":340,"title":{},"body":{"controllers/EmailController.html":{},"classes/ShopOpenRequestDto.html":{},"controllers/ShopsController.html":{},"modules/ShopsModule.html":{},"injectables/ShopsService.html":{},"injectables/UsersAddressesService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["database_url",{"_index":69,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":658,"title":{},"body":{"injectables/ShopsService.html":{},"injectables/UsersService.html":{}}}],["decodeconfirmationtoken",{"_index":414,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["decodeconfirmationtoken(token",{"_index":420,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["decorators",{"_index":19,"title":{},"body":{"classes/AddUserAddressDto.html":{},"controllers/AuthenticationController.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateChargeDto.html":{},"controllers/EmailController.html":{},"controllers/EmailVerificationController.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/ShopOpenRequestDto.html":{},"controllers/ShopsController.html":{},"controllers/StripePaymentsController.html":{},"classes/UpdateUserAddressDto.html":{},"controllers/UsersAddressesController.html":{},"controllers/UsersController.html":{}}}],["default",{"_index":998,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":21,"title":{},"body":{"classes/AddUserAddressDto.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateUserDto.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/ShopOpenRequestDto.html":{},"controllers/ShopsController.html":{},"injectables/ShopsService.html":{},"controllers/StripePaymentsController.html":{},"injectables/StripePaymentsService.html":{},"classes/UpdateUserAddressDto.html":{},"controllers/UsersAddressesController.html":{},"injectables/UsersAddressesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["delete",{"_index":580,"title":{},"body":{"controllers/ShopsController.html":{},"controllers/UsersAddressesController.html":{}}}],["delete('/:addressid",{"_index":765,"title":{},"body":{"controllers/UsersAddressesController.html":{}}}],["delete('/:addressid')@useguards(emailconfirmationguard)@useguards(jwtauthenticationguard",{"_index":747,"title":{},"body":{"controllers/UsersAddressesController.html":{}}}],["deletes",{"_index":783,"title":{},"body":{"injectables/UsersAddressesService.html":{}}}],["dependencies",{"_index":37,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailModule.html":{},"modules/EmailVerificationModule.html":{},"modules/ShopsModule.html":{},"modules/StripePaymentsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":528,"title":{},"body":{"classes/ShopOpenRequestDto.html":{},"injectables/ShopsService.html":{},"injectables/UsersAddressesService.html":{},"injectables/UsersService.html":{},"index.html":{},"properties.html":{}}}],["desired",{"_index":774,"title":{},"body":{"injectables/UsersAddressesService.html":{},"injectables/UsersService.html":{}}}],["development",{"_index":947,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":856,"title":{},"body":{"coverage.html":{}}}],["dto",{"_index":790,"title":{},"body":{"injectables/UsersAddressesService.html":{}}}],["dto/add",{"_index":754,"title":{},"body":{"controllers/UsersAddressesController.html":{},"injectables/UsersAddressesService.html":{},"injectables/UsersService.html":{}}}],["dto/confirm",{"_index":392,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["dto/create",{"_index":588,"title":{},"body":{"controllers/ShopsController.html":{},"injectables/ShopsService.html":{},"controllers/StripePaymentsController.html":{},"injectables/UsersService.html":{}}}],["dto/login.dto",{"_index":146,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["dto/register.dto",{"_index":135,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["dto/shop",{"_index":592,"title":{},"body":{"controllers/ShopsController.html":{},"injectables/ShopsService.html":{}}}],["dto/update",{"_index":591,"title":{},"body":{"controllers/ShopsController.html":{},"injectables/ShopsService.html":{},"controllers/UsersAddressesController.html":{},"injectables/UsersAddressesService.html":{},"injectables/UsersService.html":{}}}],["e2e",{"_index":958,"title":{},"body":{"index.html":{}}}],["each",{"_index":534,"title":{},"body":{"classes/ShopOpenRequestDto.html":{}}}],["efficient",{"_index":934,"title":{},"body":{"index.html":{}}}],["email",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"injectables/StripePaymentsService.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{}}}],["email.controller",{"_index":355,"title":{},"body":{"modules/EmailModule.html":{}}}],["email.dto",{"_index":393,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["email.dto.ts",{"_index":295,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"coverage.html":{}}}],["email.dto.ts:6",{"_index":296,"title":{},"body":{"classes/ConfirmEmailDto.html":{}}}],["email.service",{"_index":342,"title":{},"body":{"controllers/EmailController.html":{},"modules/EmailModule.html":{}}}],["email/email.module",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["email_confirmation_url",{"_index":75,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailVerificationService.html":{}}}],["email_password",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["email_port",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["email_service",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["email_user",{"_index":78,"title":{},"body":{"modules/AppModule.html":{}}}],["email_verification_token_expiration_time",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailVerificationService.html":{}}}],["email_verification_token_secret",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["emailconfirmationguard",{"_index":316,"title":{"guards/EmailConfirmationGuard.html":{}},"body":{"guards/EmailConfirmationGuard.html":{},"controllers/ShopsController.html":{},"controllers/UsersAddressesController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["emailconfirmationservice",{"_index":397,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["emailcontroller",{"_index":333,"title":{"controllers/EmailController.html":{}},"body":{"controllers/EmailController.html":{},"modules/EmailModule.html":{},"coverage.html":{}}}],["emailmodule",{"_index":41,"title":{"modules/EmailModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EmailModule.html":{},"modules/EmailVerificationModule.html":{},"modules.html":{},"overview.html":{}}}],["emailservice",{"_index":341,"title":{"injectables/EmailService.html":{}},"body":{"controllers/EmailController.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/EmailVerificationService.html":{},"coverage.html":{},"overview.html":{}}}],["emailverificationcontroller",{"_index":376,"title":{"controllers/EmailVerificationController.html":{}},"body":{"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"coverage.html":{}}}],["emailverificationmodule",{"_index":42,"title":{"modules/EmailVerificationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailVerificationModule.html":{},"modules.html":{},"overview.html":{}}}],["emailverificationservice",{"_index":132,"title":{"injectables/EmailVerificationService.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"coverage.html":{},"overview.html":{}}}],["enumerations",{"_index":920,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":250,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{},"miscellaneous/enumerations.html":{}}}],["error?.code",{"_index":263,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["error?.name",{"_index":452,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["executioncontext",{"_index":322,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":842,"title":{},"body":{"injectables/UsersService.html":{}}}],["exists",{"_index":268,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["expired",{"_index":454,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["expiresin",{"_index":213,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{}}}],["export",{"_index":31,"title":{},"body":{"classes/AddUserAddressDto.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateShopDto.html":{},"classes/CreateUserDto.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ShopOpenRequestDto.html":{},"controllers/ShopsController.html":{},"modules/ShopsModule.html":{},"injectables/ShopsService.html":{},"controllers/StripePaymentsController.html":{},"modules/StripePaymentsModule.html":{},"injectables/StripePaymentsService.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateShopDto.html":{},"classes/UpdateUserAddressDto.html":{},"controllers/UsersAddressesController.html":{},"injectables/UsersAddressesService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{}}}],["exports",{"_index":354,"title":{},"body":{"modules/EmailModule.html":{},"modules/EmailVerificationModule.html":{},"modules/StripePaymentsModule.html":{},"modules/UsersModule.html":{}}}],["express",{"_index":473,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"dependencies.html":{}}}],["extends",{"_index":458,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"interfaces/RequestWithUser.html":{},"classes/UpdateShopDto.html":{},"miscellaneous/variables.html":{}}}],["extractjwt",{"_index":468,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt.fromextractors",{"_index":476,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/AddUserAddressDto.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateShopDto.html":{},"classes/CreateUserDto.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ShopOpenRequestDto.html":{},"controllers/ShopsController.html":{},"modules/ShopsModule.html":{},"injectables/ShopsService.html":{},"controllers/StripePaymentsController.html":{},"modules/StripePaymentsModule.html":{},"injectables/StripePaymentsService.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateShopDto.html":{},"classes/UpdateUserAddressDto.html":{},"controllers/UsersAddressesController.html":{},"injectables/UsersAddressesService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["first",{"_index":331,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["form",{"_index":553,"title":{},"body":{"classes/ShopOpenRequestDto.html":{},"controllers/ShopsController.html":{},"modules/ShopsModule.html":{},"dependencies.html":{}}}],["formdatarequest",{"_index":582,"title":{},"body":{"controllers/ShopsController.html":{}}}],["framework",{"_index":932,"title":{},"body":{"index.html":{}}}],["function",{"_index":869,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":926,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/:addressid",{"_index":759,"title":{},"body":{"controllers/UsersAddressesController.html":{}}}],["get('/:addressid')@useguards(emailconfirmationguard)@useguards(jwtauthenticationguard",{"_index":743,"title":{},"body":{"controllers/UsersAddressesController.html":{}}}],["get('/open",{"_index":600,"title":{},"body":{"controllers/ShopsController.html":{}}}],["get('refresh",{"_index":177,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["get()@useguards(emailconfirmationguard)@useguards(jwtauthenticationguard",{"_index":740,"title":{},"body":{"controllers/UsersAddressesController.html":{},"controllers/UsersController.html":{}}}],["getallshopopenrequests",{"_index":561,"title":{},"body":{"controllers/ShopsController.html":{},"injectables/ShopsService.html":{}}}],["getalluseraddresses",{"_index":731,"title":{},"body":{"controllers/UsersAddressesController.html":{}}}],["getalluseraddresses(@req",{"_index":757,"title":{},"body":{"controllers/UsersAddressesController.html":{}}}],["getalluseraddresses(undefined",{"_index":739,"title":{},"body":{"controllers/UsersAddressesController.html":{}}}],["getallusers",{"_index":799,"title":{},"body":{"controllers/UsersController.html":{}}}],["getauthenticateduser",{"_index":219,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getauthenticateduser(email",{"_index":227,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getbyemail",{"_index":809,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyemail(email",{"_index":819,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyid",{"_index":810,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyid(id",{"_index":824,"title":{},"body":{"injectables/UsersService.html":{}}}],["getcookiesforlogout",{"_index":220,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtaccesstoken",{"_index":221,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtaccesstoken(userid",{"_index":231,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtrefreshtoken",{"_index":222,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtrefreshtoken(userid",{"_index":235,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getting",{"_index":928,"title":{"index.html":{}},"body":{}}],["getuseraddressbyid",{"_index":732,"title":{},"body":{"controllers/UsersAddressesController.html":{},"injectables/UsersAddressesService.html":{}}}],["getuseraddressbyid(addressid",{"_index":742,"title":{},"body":{"controllers/UsersAddressesController.html":{},"injectables/UsersAddressesService.html":{}}}],["getuseraddresses",{"_index":769,"title":{},"body":{"injectables/UsersAddressesService.html":{}}}],["getuseraddresses(id",{"_index":776,"title":{},"body":{"injectables/UsersAddressesService.html":{}}}],["getuserifrefreshtokenmatches",{"_index":811,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserifrefreshtokenmatches(refreshtoken",{"_index":826,"title":{},"body":{"injectables/UsersService.html":{}}}],["getusershopopenrequest",{"_index":562,"title":{},"body":{"controllers/ShopsController.html":{},"injectables/ShopsService.html":{}}}],["getusershopopenrequest(@req",{"_index":602,"title":{},"body":{"controllers/ShopsController.html":{}}}],["getusershopopenrequest(id",{"_index":622,"title":{},"body":{"injectables/ShopsService.html":{}}}],["getusershopopenrequest(undefined",{"_index":575,"title":{},"body":{"controllers/ShopsController.html":{}}}],["given",{"_index":624,"title":{},"body":{"injectables/ShopsService.html":{},"injectables/UsersAddressesService.html":{},"injectables/UsersService.html":{}}}],["grow",{"_index":964,"title":{},"body":{"index.html":{}}}],["guard",{"_index":315,"title":{"guards/EmailConfirmationGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":317,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["guards/jwt",{"_index":140,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["guards/local",{"_index":137,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["hapi/joi",{"_index":56,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["hash",{"_index":243,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["hashedpassword",{"_index":239,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["hashing",{"_index":840,"title":{},"body":{"injectables/UsersService.html":{}}}],["hasmimetype",{"_index":551,"title":{},"body":{"classes/ShopOpenRequestDto.html":{}}}],["hasmimetype(['application/pdf",{"_index":555,"title":{},"body":{"classes/ShopOpenRequestDto.html":{}}}],["hasmimetype(['image/png",{"_index":554,"title":{},"body":{"classes/ShopOpenRequestDto.html":{}}}],["here",{"_index":439,"title":{},"body":{"injectables/EmailVerificationService.html":{},"index.html":{}}}],["host",{"_index":366,"title":{},"body":{"injectables/EmailService.html":{}}}],["httpcode",{"_index":125,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpcode(200",{"_index":160,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpcode(200)@useguards(localauthenticationguard)@post('login')@apibody({type",{"_index":108,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpexception",{"_index":241,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["httponly",{"_index":278,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["https://nestjs.com",{"_index":981,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":242,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["httpstatus.bad_request",{"_index":269,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpstatus.internal_server_error",{"_index":273,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpstatus.not_found",{"_index":843,"title":{},"body":{"injectables/UsersService.html":{}}}],["id",{"_index":619,"title":{},"body":{"injectables/ShopsService.html":{},"injectables/UsersAddressesService.html":{},"injectables/UsersService.html":{}}}],["identifier",{"_index":857,"title":{},"body":{"coverage.html":{}}}],["id}/business/${coverphoto.originalname",{"_index":645,"title":{},"body":{"injectables/ShopsService.html":{}}}],["id}/business/documents/${businessdocument.originalname",{"_index":653,"title":{},"body":{"injectables/ShopsService.html":{}}}],["id}/business/images/${logo.originalname",{"_index":648,"title":{},"body":{"injectables/ShopsService.html":{}}}],["image/jpeg",{"_index":541,"title":{},"body":{"classes/ShopOpenRequestDto.html":{}}}],["image/webp",{"_index":542,"title":{},"body":{"classes/ShopOpenRequestDto.html":{}}}],["implements",{"_index":327,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["import",{"_index":27,"title":{},"body":{"classes/AddUserAddressDto.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateChargeDto.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ShopOpenRequestDto.html":{},"controllers/ShopsController.html":{},"modules/ShopsModule.html":{},"injectables/ShopsService.html":{},"controllers/StripePaymentsController.html":{},"modules/StripePaymentsModule.html":{},"injectables/StripePaymentsService.html":{},"classes/UpdateShopDto.html":{},"classes/UpdateUserAddressDto.html":{},"controllers/UsersAddressesController.html":{},"injectables/UsersAddressesService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailModule.html":{},"modules/EmailVerificationModule.html":{},"modules/ShopsModule.html":{},"modules/StripePaymentsModule.html":{},"modules/UsersModule.html":{}}}],["include",{"_index":792,"title":{},"body":{"injectables/UsersAddressesService.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"classes/AddUserAddressDto.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateUserDto.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ShopOpenRequestDto.html":{},"controllers/ShopsController.html":{},"injectables/ShopsService.html":{},"controllers/StripePaymentsController.html":{},"injectables/StripePaymentsService.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateUserAddressDto.html":{},"controllers/UsersAddressesController.html":{},"injectables/UsersAddressesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/AddUserAddressDto.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateShopDto.html":{},"classes/CreateUserDto.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ShopOpenRequestDto.html":{},"controllers/ShopsController.html":{},"modules/ShopsModule.html":{},"injectables/ShopsService.html":{},"controllers/StripePaymentsController.html":{},"modules/StripePaymentsModule.html":{},"injectables/StripePaymentsService.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateShopDto.html":{},"classes/UpdateUserAddressDto.html":{},"controllers/UsersAddressesController.html":{},"injectables/UsersAddressesService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{}}}],["inject",{"_index":208,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["injectable",{"_index":215,"title":{"injectables/AuthenticationService.html":{},"injectables/EmailService.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/ShopsService.html":{},"injectables/StripePaymentsService.html":{},"injectables/UsersAddressesService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthenticationService.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailService.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/ShopsService.html":{},"injectables/StripePaymentsService.html":{},"injectables/UsersAddressesService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":216,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailService.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/ShopsService.html":{},"injectables/StripePaymentsService.html":{},"injectables/UsersAddressesService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["installation",{"_index":943,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":945,"title":{},"body":{"index.html":{}}}],["interface",{"_index":517,"title":{"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"interfaces/VerificationTokenPayload.html":{}},"body":{"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["interfaces",{"_index":518,"title":{},"body":{"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"interfaces/VerificationTokenPayload.html":{},"overview.html":{}}}],["isemail",{"_index":507,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/ShopOpenRequestDto.html":{}}}],["isemailverified",{"_index":852,"title":{},"body":{"injectables/UsersService.html":{}}}],["isfile",{"_index":550,"title":{},"body":{"classes/ShopOpenRequestDto.html":{}}}],["isfile()@hasmimetype(['image/png",{"_index":540,"title":{},"body":{"classes/ShopOpenRequestDto.html":{}}}],["isfiles",{"_index":549,"title":{},"body":{"classes/ShopOpenRequestDto.html":{}}}],["isfiles()@hasmimetype(['application/pdf",{"_index":533,"title":{},"body":{"classes/ShopOpenRequestDto.html":{}}}],["isnotempty",{"_index":29,"title":{},"body":{"classes/AddUserAddressDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateChargeDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/ShopOpenRequestDto.html":{},"classes/UpdateUserAddressDto.html":{}}}],["isnotempty()@isstring",{"_index":530,"title":{},"body":{"classes/ShopOpenRequestDto.html":{}}}],["isnumber",{"_index":303,"title":{},"body":{"classes/CreateChargeDto.html":{}}}],["isoptional",{"_index":725,"title":{},"body":{"classes/UpdateUserAddressDto.html":{}}}],["ispasswordmatching",{"_index":292,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["isrefreshtokenmatching",{"_index":845,"title":{},"body":{"injectables/UsersService.html":{}}}],["isstring",{"_index":28,"title":{},"body":{"classes/AddUserAddressDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateChargeDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/ShopOpenRequestDto.html":{},"classes/UpdateUserAddressDto.html":{}}}],["isstring()@isnotempty",{"_index":20,"title":{},"body":{"classes/AddUserAddressDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateChargeDto.html":{},"classes/RegisterDto.html":{}}}],["isstring()@isnotempty()@isoptional",{"_index":720,"title":{},"body":{"classes/UpdateUserAddressDto.html":{}}}],["isstring()@isnotempty()@minlength(8",{"_index":509,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["joi",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.object",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required",{"_index":70,"title":{},"body":{"modules/AppModule.html":{}}}],["join",{"_index":971,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":471,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt_access_token_expires_in",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthenticationService.html":{}}}],["jwt_access_token_secret",{"_index":71,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt_refresh_token_expires_in",{"_index":291,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["jwtauthenticationguard",{"_index":139,"title":{"injectables/JwtAuthenticationGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailVerificationController.html":{},"injectables/JwtAuthenticationGuard.html":{},"controllers/ShopsController.html":{},"controllers/StripePaymentsController.html":{},"controllers/UsersAddressesController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtfromrequest",{"_index":475,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":204,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/EmailVerificationModule.html":{}}}],["jwtmodule.registerasync",{"_index":207,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwtrefreshguard",{"_index":141,"title":{"injectables/JwtRefreshGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["jwtrefreshtokenstrategy",{"_index":192,"title":{"injectables/JwtRefreshTokenStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtservice",{"_index":225,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{}}}],["jwtstrategy",{"_index":193,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":978,"title":{},"body":{"index.html":{}}}],["key",{"_index":644,"title":{},"body":{"injectables/ShopsService.html":{}}}],["license",{"_index":984,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":962,"title":{},"body":{"index.html":{}}}],["link",{"_index":398,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["link')@useguards(jwtauthenticationguard",{"_index":388,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["local",{"_index":502,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthenticationguard",{"_index":136,"title":{"injectables/LocalAuthenticationGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/LocalAuthenticationGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":194,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["location",{"_index":639,"title":{},"body":{"injectables/ShopsService.html":{}}}],["login",{"_index":94,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["login(@req",{"_index":163,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["login(request",{"_index":107,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logindto",{"_index":109,"title":{"classes/LoginDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"classes/LoginDto.html":{},"coverage.html":{}}}],["logo",{"_index":529,"title":{},"body":{"classes/ShopOpenRequestDto.html":{},"injectables/ShopsService.html":{}}}],["logo.buffer",{"_index":649,"title":{},"body":{"injectables/ShopsService.html":{}}}],["logourl",{"_index":647,"title":{},"body":{"injectables/ShopsService.html":{}}}],["logout",{"_index":95,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logout(@req",{"_index":183,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logout(request",{"_index":112,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["mail",{"_index":343,"title":{},"body":{"controllers/EmailController.html":{},"injectables/EmailService.html":{}}}],["mail.options",{"_index":337,"title":{},"body":{"controllers/EmailController.html":{},"injectables/EmailService.html":{}}}],["manager",{"_index":894,"title":{},"body":{"dependencies.html":{}}}],["markemailasconfirmed",{"_index":812,"title":{},"body":{"injectables/UsersService.html":{}}}],["markemailasconfirmed(email",{"_index":830,"title":{},"body":{"injectables/UsersService.html":{}}}],["marks",{"_index":832,"title":{},"body":{"injectables/UsersService.html":{}}}],["matches",{"_index":828,"title":{},"body":{"injectables/UsersService.html":{}}}],["matching",{"_index":33,"title":{},"body":{"classes/AddUserAddressDto.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateShopDto.html":{},"classes/CreateUserDto.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ShopOpenRequestDto.html":{},"controllers/ShopsController.html":{},"modules/ShopsModule.html":{},"injectables/ShopsService.html":{},"controllers/StripePaymentsController.html":{},"modules/StripePaymentsModule.html":{},"injectables/StripePaymentsService.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateShopDto.html":{},"classes/UpdateUserAddressDto.html":{},"controllers/UsersAddressesController.html":{},"injectables/UsersAddressesService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":280,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["memorystoredfile",{"_index":532,"title":{},"body":{"classes/ShopOpenRequestDto.html":{}}}],["metadata",{"_index":907,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":91,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/ShopsController.html":{},"injectables/ShopsService.html":{},"controllers/StripePaymentsController.html":{},"injectables/StripePaymentsService.html":{},"controllers/UsersAddressesController.html":{},"injectables/UsersAddressesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":511,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["minlength(8",{"_index":512,"title":{},"body":{"classes/LoginDto.html":{},"classes/RegisterDto.html":{}}}],["miscellaneous",{"_index":919,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":961,"title":{},"body":{"index.html":{}}}],["mixin(roleguardmixin",{"_index":1003,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mode",{"_index":951,"title":{},"body":{"index.html":{}}}],["module",{"_index":34,"title":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailModule.html":{},"modules/EmailVerificationModule.html":{},"modules/ShopsModule.html":{},"modules/StripePaymentsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailModule.html":{},"modules/EmailVerificationModule.html":{},"modules/ShopsModule.html":{},"modules/StripePaymentsModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":36,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailModule.html":{},"modules/EmailVerificationModule.html":{},"modules/ShopsModule.html":{},"modules/StripePaymentsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":974,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":979,"title":{},"body":{"index.html":{}}}],["name",{"_index":103,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/RegisterDto.html":{},"classes/ShopOpenRequestDto.html":{},"controllers/ShopsController.html":{},"injectables/ShopsService.html":{},"controllers/StripePaymentsController.html":{},"injectables/StripePaymentsService.html":{},"controllers/UsersAddressesController.html":{},"injectables/UsersAddressesService.html":{},"injectables/UsersService.html":{}}}],["nest",{"_index":939,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":983,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":552,"title":{},"body":{"classes/ShopOpenRequestDto.html":{},"controllers/ShopsController.html":{},"modules/ShopsModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/ShopsController.html":{},"modules/ShopsModule.html":{},"injectables/ShopsService.html":{},"controllers/StripePaymentsController.html":{},"modules/StripePaymentsModule.html":{},"injectables/StripePaymentsService.html":{},"controllers/UsersAddressesController.html":{},"injectables/UsersAddressesService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"modules/ShopsModule.html":{},"injectables/ShopsService.html":{},"modules/StripePaymentsModule.html":{},"injectables/StripePaymentsService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":885,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":205,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":197,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":888,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":148,"title":{},"body":{"controllers/AuthenticationController.html":{},"classes/UpdateShopDto.html":{},"dependencies.html":{}}}],["nestjsformdatamodule",{"_index":609,"title":{},"body":{"modules/ShopsModule.html":{}}}],["new",{"_index":266,"title":{},"body":{"injectables/AuthenticationService.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailVerificationService.html":{},"injectables/ShopsService.html":{},"injectables/StripePaymentsService.html":{},"injectables/UsersAddressesService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newuser",{"_index":849,"title":{},"body":{"injectables/UsersService.html":{}}}],["node.js",{"_index":931,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":364,"title":{},"body":{"injectables/EmailService.html":{},"dependencies.html":{}}}],["nodemailer/lib/mailer",{"_index":344,"title":{},"body":{"controllers/EmailController.html":{},"injectables/EmailService.html":{}}}],["nodemailertransport",{"_index":357,"title":{},"body":{"injectables/EmailService.html":{}}}],["npm",{"_index":944,"title":{},"body":{"index.html":{}}}],["null",{"_index":847,"title":{},"body":{"injectables/UsersService.html":{}}}],["number",{"_index":232,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateChargeDto.html":{},"injectables/EmailVerificationService.html":{},"controllers/ShopsController.html":{},"injectables/ShopsService.html":{},"injectables/StripePaymentsService.html":{},"interfaces/TokenPayload.html":{},"controllers/UsersAddressesController.html":{},"injectables/UsersAddressesService.html":{},"injectables/UsersService.html":{}}}],["number(this.configservice.get('email_port",{"_index":369,"title":{},"body":{"injectables/EmailService.html":{}}}],["object",{"_index":450,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["open",{"_index":522,"title":{},"body":{"classes/ShopOpenRequestDto.html":{},"controllers/ShopsController.html":{},"injectables/ShopsService.html":{},"coverage.html":{},"index.html":{}}}],["optional",{"_index":104,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/ShopsController.html":{},"injectables/ShopsService.html":{},"controllers/StripePaymentsController.html":{},"injectables/StripePaymentsService.html":{},"classes/UpdateUserAddressDto.html":{},"controllers/UsersAddressesController.html":{},"injectables/UsersAddressesService.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":362,"title":{},"body":{"injectables/EmailService.html":{}}}],["otherwise",{"_index":821,"title":{},"body":{"injectables/UsersService.html":{}}}],["out",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailModule.html":{},"modules/EmailVerificationModule.html":{},"modules/ShopsModule.html":{},"modules/StripePaymentsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":988,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":881,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":579,"title":{},"body":{"controllers/ShopsController.html":{},"injectables/ShopsService.html":{},"controllers/UsersAddressesController.html":{},"injectables/UsersAddressesService.html":{},"injectables/UsersService.html":{}}}],["param('addressid",{"_index":760,"title":{},"body":{"controllers/UsersAddressesController.html":{}}}],["parameters",{"_index":102,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/ShopsController.html":{},"injectables/ShopsService.html":{},"controllers/StripePaymentsController.html":{},"injectables/StripePaymentsService.html":{},"controllers/UsersAddressesController.html":{},"injectables/UsersAddressesService.html":{},"injectables/UsersService.html":{}}}],["parseintpipe",{"_index":581,"title":{},"body":{"controllers/ShopsController.html":{},"controllers/UsersAddressesController.html":{}}}],["parser",{"_index":899,"title":{},"body":{"dependencies.html":{}}}],["partialtype",{"_index":716,"title":{},"body":{"classes/UpdateShopDto.html":{}}}],["partialtype(createshopdto",{"_index":717,"title":{},"body":{"classes/UpdateShopDto.html":{}}}],["pass",{"_index":373,"title":{},"body":{"injectables/EmailService.html":{}}}],["passport",{"_index":470,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":196,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["passportstrategy",{"_index":472,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":490,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passreqtocallback",{"_index":480,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["password",{"_index":260,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"injectables/UsersService.html":{}}}],["patch",{"_index":578,"title":{},"body":{"controllers/ShopsController.html":{},"controllers/UsersAddressesController.html":{}}}],["patch('/:addressid",{"_index":763,"title":{},"body":{"controllers/UsersAddressesController.html":{}}}],["patch('/:addressid')@useguards(emailconfirmationguard)@useguards(jwtauthenticationguard",{"_index":750,"title":{},"body":{"controllers/UsersAddressesController.html":{}}}],["path",{"_index":279,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["payload",{"_index":282,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":451,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["payload.types",{"_index":254,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["payload.types.ts",{"_index":714,"title":{},"body":{"interfaces/TokenPayload.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["payload.userid",{"_index":484,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["payment_method",{"_index":710,"title":{},"body":{"injectables/StripePaymentsService.html":{}}}],["paymentmethodid",{"_index":302,"title":{},"body":{"classes/CreateChargeDto.html":{},"injectables/StripePaymentsService.html":{}}}],["payments.controller",{"_index":691,"title":{},"body":{"modules/StripePaymentsModule.html":{}}}],["payments.controller.ts",{"_index":673,"title":{},"body":{"controllers/StripePaymentsController.html":{},"coverage.html":{}}}],["payments.controller.ts:13",{"_index":678,"title":{},"body":{"controllers/StripePaymentsController.html":{}}}],["payments.module",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"modules/UsersModule.html":{}}}],["payments.module.ts",{"_index":690,"title":{},"body":{"modules/StripePaymentsModule.html":{}}}],["payments.service",{"_index":680,"title":{},"body":{"controllers/StripePaymentsController.html":{},"modules/StripePaymentsModule.html":{},"injectables/UsersService.html":{}}}],["payments.service.ts",{"_index":692,"title":{},"body":{"injectables/StripePaymentsService.html":{},"coverage.html":{}}}],["payments.service.ts:14",{"_index":699,"title":{},"body":{"injectables/StripePaymentsService.html":{}}}],["payments.service.ts:22",{"_index":697,"title":{},"body":{"injectables/StripePaymentsService.html":{}}}],["payments.service.ts:7",{"_index":694,"title":{},"body":{"injectables/StripePaymentsService.html":{}}}],["payments/dto/create",{"_index":299,"title":{},"body":{"classes/CreateChargeDto.html":{},"coverage.html":{}}}],["payments/stripe",{"_index":63,"title":{},"body":{"modules/AppModule.html":{},"controllers/StripePaymentsController.html":{},"modules/StripePaymentsModule.html":{},"injectables/StripePaymentsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["physicaladdress",{"_index":667,"title":{},"body":{"injectables/ShopsService.html":{}}}],["plaintextpassword",{"_index":228,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["please",{"_index":972,"title":{},"body":{"index.html":{}}}],["port",{"_index":368,"title":{},"body":{"injectables/EmailService.html":{}}}],["post",{"_index":126,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailController.html":{},"controllers/EmailVerificationController.html":{},"controllers/ShopsController.html":{},"controllers/StripePaymentsController.html":{},"controllers/UsersAddressesController.html":{}}}],["post('/open",{"_index":596,"title":{},"body":{"controllers/ShopsController.html":{}}}],["post('confirm",{"_index":382,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["post('login",{"_index":162,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('logout",{"_index":182,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('register",{"_index":120,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('resend",{"_index":386,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["post('send",{"_index":338,"title":{},"body":{"controllers/EmailController.html":{}}}],["post()@useguards(emailconfirmationguard)@useguards(jwtauthenticationguard",{"_index":737,"title":{},"body":{"controllers/UsersAddressesController.html":{}}}],["post()@useguards(jwtauthenticationguard",{"_index":677,"title":{},"body":{"controllers/StripePaymentsController.html":{}}}],["postgreserrorcodes",{"_index":248,"title":{},"body":{"injectables/AuthenticationService.html":{},"miscellaneous/enumerations.html":{}}}],["postgreserrorcodes.uniqueviolation",{"_index":264,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["prefix",{"_index":89,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailController.html":{},"controllers/EmailVerificationController.html":{},"controllers/ShopsController.html":{},"controllers/StripePaymentsController.html":{},"controllers/UsersAddressesController.html":{},"controllers/UsersController.html":{}}}],["prisma",{"_index":612,"title":{},"body":{"injectables/ShopsService.html":{},"injectables/UsersAddressesService.html":{},"injectables/UsersService.html":{}}}],["prisma/client",{"_index":503,"title":{},"body":{"injectables/LocalStrategy.html":{},"interfaces/RequestWithUser.html":{},"injectables/ShopsService.html":{},"injectables/UsersAddressesService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["prismaclient",{"_index":634,"title":{},"body":{"injectables/ShopsService.html":{},"injectables/UsersAddressesService.html":{},"injectables/UsersService.html":{}}}],["private",{"_index":151,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/StripePaymentsService.html":{},"controllers/UsersController.html":{}}}],["production",{"_index":953,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":930,"title":{},"body":{"index.html":{}}}],["project",{"_index":963,"title":{},"body":{"index.html":{}}}],["promise",{"_index":501,"title":{},"body":{"injectables/LocalStrategy.html":{},"injectables/ShopsService.html":{}}}],["properties",{"_index":10,"title":{"properties.html":{}},"body":{"classes/AddUserAddressDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateUserDto.html":{},"injectables/EmailService.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ShopOpenRequestDto.html":{},"injectables/ShopsService.html":{},"injectables/StripePaymentsService.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateUserAddressDto.html":{},"injectables/UsersAddressesService.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"properties.html":{}}}],["provided",{"_index":277,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["providers",{"_index":85,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailModule.html":{},"modules/EmailVerificationModule.html":{},"modules/ShopsModule.html":{},"modules/StripePaymentsModule.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":218,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{},"injectables/StripePaymentsService.html":{}}}],["push",{"_index":665,"title":{},"body":{"injectables/ShopsService.html":{}}}],["read",{"_index":973,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":152,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"controllers/ShopsController.html":{},"injectables/ShopsService.html":{},"controllers/StripePaymentsController.html":{},"injectables/StripePaymentsService.html":{},"controllers/UsersAddressesController.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["reason",{"_index":626,"title":{},"body":{"injectables/ShopsService.html":{}}}],["reflect",{"_index":906,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":96,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["refresh(@req",{"_index":178,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh(request",{"_index":115,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh.guard",{"_index":143,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh.guard.ts",{"_index":460,"title":{},"body":{"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["refresh=${token",{"_index":290,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtoken",{"_index":481,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/UsersService.html":{}}}],["refreshtokencookie",{"_index":166,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refreshtokencookie.cookie",{"_index":173,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refreshtokencookie.token",{"_index":169,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["register",{"_index":97,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["register(@body",{"_index":153,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["register(registrationdata",{"_index":118,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["registerdto",{"_index":119,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/RegisterDto.html":{},"coverage.html":{}}}],["registrationdata",{"_index":122,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["registrationdata.email",{"_index":158,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["rejected",{"_index":670,"title":{},"body":{"injectables/ShopsService.html":{}}}],["rejectedreason",{"_index":671,"title":{},"body":{"injectables/ShopsService.html":{}}}],["rejectshopopenrequest",{"_index":614,"title":{},"body":{"injectables/ShopsService.html":{}}}],["rejectshopopenrequest(id",{"_index":625,"title":{},"body":{"injectables/ShopsService.html":{}}}],["removerefreshtoken",{"_index":813,"title":{},"body":{"injectables/UsersService.html":{}}}],["removerefreshtoken(id",{"_index":834,"title":{},"body":{"injectables/UsersService.html":{}}}],["removes",{"_index":836,"title":{},"body":{"injectables/UsersService.html":{}}}],["removeuseraddress",{"_index":733,"title":{},"body":{"controllers/UsersAddressesController.html":{},"injectables/UsersAddressesService.html":{}}}],["removeuseraddress(id",{"_index":781,"title":{},"body":{"injectables/UsersAddressesService.html":{}}}],["removeuseraddress(undefined",{"_index":746,"title":{},"body":{"controllers/UsersAddressesController.html":{}}}],["repository",{"_index":942,"title":{},"body":{"index.html":{}}}],["req",{"_index":124,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailVerificationController.html":{},"controllers/ShopsController.html":{},"controllers/StripePaymentsController.html":{},"controllers/UsersAddressesController.html":{}}}],["request",{"_index":105,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailVerificationController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"injectables/ShopsService.html":{},"controllers/StripePaymentsController.html":{},"miscellaneous/variables.html":{}}}],["request.cookies?.refresh",{"_index":482,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["request.dto",{"_index":593,"title":{},"body":{"controllers/ShopsController.html":{},"injectables/ShopsService.html":{}}}],["request.dto.ts",{"_index":523,"title":{},"body":{"classes/ShopOpenRequestDto.html":{},"coverage.html":{}}}],["request.dto.ts:12",{"_index":546,"title":{},"body":{"classes/ShopOpenRequestDto.html":{}}}],["request.dto.ts:16",{"_index":544,"title":{},"body":{"classes/ShopOpenRequestDto.html":{}}}],["request.dto.ts:20",{"_index":543,"title":{},"body":{"classes/ShopOpenRequestDto.html":{}}}],["request.dto.ts:24",{"_index":545,"title":{},"body":{"classes/ShopOpenRequestDto.html":{}}}],["request.dto.ts:28",{"_index":535,"title":{},"body":{"classes/ShopOpenRequestDto.html":{}}}],["request.dto.ts:31",{"_index":537,"title":{},"body":{"classes/ShopOpenRequestDto.html":{}}}],["request.dto.ts:35",{"_index":538,"title":{},"body":{"classes/ShopOpenRequestDto.html":{}}}],["request.dto.ts:39",{"_index":531,"title":{},"body":{"classes/ShopOpenRequestDto.html":{}}}],["request.dto.ts:43",{"_index":536,"title":{},"body":{"classes/ShopOpenRequestDto.html":{}}}],["request.dto.ts:47",{"_index":547,"title":{},"body":{"classes/ShopOpenRequestDto.html":{}}}],["request.dto.ts:51",{"_index":539,"title":{},"body":{"classes/ShopOpenRequestDto.html":{}}}],["request.dto.ts:55",{"_index":548,"title":{},"body":{"classes/ShopOpenRequestDto.html":{}}}],["request.res.setheader",{"_index":185,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["request.res.setheader('set",{"_index":171,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["request.user",{"_index":180,"title":{},"body":{"controllers/AuthenticationController.html":{},"miscellaneous/variables.html":{}}}],["request.user.stripecustomerid",{"_index":686,"title":{},"body":{"controllers/StripePaymentsController.html":{}}}],["request.user?.isemailverified",{"_index":329,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["request?.cookies?.authentication",{"_index":491,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["request?.cookies?.refresh",{"_index":477,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["requestid",{"_index":567,"title":{},"body":{"controllers/ShopsController.html":{}}}],["requesting",{"_index":633,"title":{},"body":{"injectables/ShopsService.html":{}}}],["requests",{"_index":570,"title":{},"body":{"controllers/ShopsController.html":{},"injectables/ShopsService.html":{}}}],["requests/:requestid",{"_index":565,"title":{},"body":{"controllers/ShopsController.html":{}}}],["requests/all",{"_index":573,"title":{},"body":{"controllers/ShopsController.html":{}}}],["requestwithuser",{"_index":99,"title":{"interfaces/RequestWithUser.html":{}},"body":{"controllers/AuthenticationController.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailVerificationController.html":{},"interfaces/RequestWithUser.html":{},"controllers/ShopsController.html":{},"controllers/StripePaymentsController.html":{},"controllers/UsersAddressesController.html":{},"coverage.html":{}}}],["resendconfirmationlink",{"_index":380,"title":{},"body":{"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{}}}],["resendconfirmationlink(@req",{"_index":399,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["resendconfirmationlink(request",{"_index":385,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["resendconfirmationlink(userid",{"_index":422,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["reset",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailModule.html":{},"modules/EmailVerificationModule.html":{},"modules/ShopsModule.html":{},"modules/StripePaymentsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["response",{"_index":706,"title":{},"body":{"injectables/StripePaymentsService.html":{}}}],["results",{"_index":32,"title":{},"body":{"classes/AddUserAddressDto.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateShopDto.html":{},"classes/CreateUserDto.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ShopOpenRequestDto.html":{},"controllers/ShopsController.html":{},"modules/ShopsModule.html":{},"injectables/ShopsService.html":{},"controllers/StripePaymentsController.html":{},"modules/StripePaymentsModule.html":{},"injectables/StripePaymentsService.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateShopDto.html":{},"classes/UpdateUserAddressDto.html":{},"controllers/UsersAddressesController.html":{},"injectables/UsersAddressesService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":159,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/ShopsController.html":{},"injectables/ShopsService.html":{},"injectables/StripePaymentsService.html":{},"controllers/UsersAddressesController.html":{},"injectables/UsersAddressesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":106,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/ShopsController.html":{},"injectables/ShopsService.html":{},"controllers/StripePaymentsController.html":{},"injectables/StripePaymentsService.html":{},"controllers/UsersAddressesController.html":{},"injectables/UsersAddressesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["rimraf",{"_index":909,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":999,"title":{},"body":{"miscellaneous/variables.html":{}}}],["roleguard",{"_index":584,"title":{},"body":{"controllers/ShopsController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["roleguardmixin",{"_index":1000,"title":{},"body":{"miscellaneous/variables.html":{}}}],["roles",{"_index":664,"title":{},"body":{"injectables/ShopsService.html":{},"injectables/UsersService.html":{}}}],["run",{"_index":948,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":911,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":432,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["s3",{"_index":635,"title":{},"body":{"injectables/ShopsService.html":{}}}],["saved",{"_index":778,"title":{},"body":{"injectables/UsersAddressesService.html":{}}}],["scalable",{"_index":935,"title":{},"body":{"index.html":{}}}],["sdk",{"_index":637,"title":{},"body":{"injectables/ShopsService.html":{},"dependencies.html":{}}}],["secret",{"_index":210,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{}}}],["secretorkey",{"_index":478,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["secure",{"_index":370,"title":{},"body":{"injectables/EmailService.html":{}}}],["seller",{"_index":666,"title":{},"body":{"injectables/ShopsService.html":{}}}],["send",{"_index":630,"title":{},"body":{"injectables/ShopsService.html":{}}}],["sendashopopenrequest",{"_index":615,"title":{},"body":{"injectables/ShopsService.html":{}}}],["sendashopopenrequest(id",{"_index":628,"title":{},"body":{"injectables/ShopsService.html":{}}}],["sendmail",{"_index":335,"title":{},"body":{"controllers/EmailController.html":{},"injectables/EmailService.html":{}}}],["sendmail(@body",{"_index":347,"title":{},"body":{"controllers/EmailController.html":{}}}],["sendmail(data",{"_index":336,"title":{},"body":{"controllers/EmailController.html":{}}}],["sendmail(options",{"_index":360,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendverificationlink",{"_index":415,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["sendverificationlink(email",{"_index":424,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["sent",{"_index":349,"title":{},"body":{"controllers/EmailController.html":{}}}],["server",{"_index":936,"title":{},"body":{"index.html":{}}}],["services",{"_index":753,"title":{},"body":{"controllers/UsersAddressesController.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["set",{"_index":186,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/UsersService.html":{}}}],["setcurrentrefreshtoken",{"_index":814,"title":{},"body":{"injectables/UsersService.html":{}}}],["setcurrentrefreshtoken(refreshtoken",{"_index":837,"title":{},"body":{"injectables/UsersService.html":{}}}],["sets",{"_index":839,"title":{},"body":{"injectables/UsersService.html":{}}}],["shop",{"_index":621,"title":{},"body":{"injectables/ShopsService.html":{}}}],["shop.dto",{"_index":589,"title":{},"body":{"controllers/ShopsController.html":{},"injectables/ShopsService.html":{},"classes/UpdateShopDto.html":{}}}],["shop.dto.ts",{"_index":308,"title":{},"body":{"classes/CreateShopDto.html":{},"classes/UpdateShopDto.html":{},"coverage.html":{}}}],["shopopenrequestdto",{"_index":520,"title":{"classes/ShopOpenRequestDto.html":{}},"body":{"classes/ShopOpenRequestDto.html":{},"controllers/ShopsController.html":{},"injectables/ShopsService.html":{},"coverage.html":{}}}],["shops",{"_index":558,"title":{},"body":{"controllers/ShopsController.html":{}}}],["shops.controller",{"_index":610,"title":{},"body":{"modules/ShopsModule.html":{}}}],["shops.service",{"_index":587,"title":{},"body":{"controllers/ShopsController.html":{},"modules/ShopsModule.html":{}}}],["shops/shops.module",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["shopscontroller",{"_index":556,"title":{"controllers/ShopsController.html":{}},"body":{"controllers/ShopsController.html":{},"modules/ShopsModule.html":{},"coverage.html":{}}}],["shopsmodule",{"_index":43,"title":{"modules/ShopsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/ShopsModule.html":{},"modules.html":{},"overview.html":{}}}],["shopsservice",{"_index":586,"title":{"injectables/ShopsService.html":{}},"body":{"controllers/ShopsController.html":{},"modules/ShopsModule.html":{},"injectables/ShopsService.html":{},"coverage.html":{},"overview.html":{}}}],["side",{"_index":937,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":212,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["something",{"_index":270,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/AddUserAddressDto.html":{},"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateShopDto.html":{},"classes/CreateUserDto.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ShopOpenRequestDto.html":{},"controllers/ShopsController.html":{},"modules/ShopsModule.html":{},"injectables/ShopsService.html":{},"controllers/StripePaymentsController.html":{},"modules/StripePaymentsModule.html":{},"injectables/StripePaymentsService.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateShopDto.html":{},"classes/UpdateUserAddressDto.html":{},"controllers/UsersAddressesController.html":{},"injectables/UsersAddressesService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"index.html":{}}}],["sponsors",{"_index":966,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":927,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../postgres",{"_index":921,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../role.guard.ts",{"_index":997,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["src/authentication/authentication.controller.ts",{"_index":88,"title":{},"body":{"controllers/AuthenticationController.html":{},"coverage.html":{}}}],["src/authentication/authentication.controller.ts:30",{"_index":121,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:42",{"_index":110,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:63",{"_index":117,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:74",{"_index":114,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:85",{"_index":101,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.module.ts",{"_index":195,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["src/authentication/authentication.service.ts",{"_index":217,"title":{},"body":{"injectables/AuthenticationService.html":{},"coverage.html":{}}}],["src/authentication/authentication.service.ts:11",{"_index":226,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:18",{"_index":237,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:40",{"_index":229,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:54",{"_index":230,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:61",{"_index":233,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:72",{"_index":236,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:87",{"_index":240,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/dto/login.dto.ts",{"_index":506,"title":{},"body":{"classes/LoginDto.html":{},"coverage.html":{}}}],["src/authentication/dto/login.dto.ts:10",{"_index":510,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/authentication/dto/login.dto.ts:5",{"_index":508,"title":{},"body":{"classes/LoginDto.html":{}}}],["src/authentication/dto/register.dto.ts",{"_index":513,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/authentication/dto/register.dto.ts:14",{"_index":516,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:5",{"_index":514,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:9",{"_index":515,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/guards/email",{"_index":318,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"controllers/ShopsController.html":{},"controllers/UsersAddressesController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["src/authentication/guards/jwt",{"_index":394,"title":{},"body":{"controllers/EmailVerificationController.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"controllers/ShopsController.html":{},"controllers/StripePaymentsController.html":{},"controllers/UsersAddressesController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["src/authentication/guards/local",{"_index":494,"title":{},"body":{"injectables/LocalAuthenticationGuard.html":{},"coverage.html":{}}}],["src/authentication/guards/role.guard",{"_index":585,"title":{},"body":{"controllers/ShopsController.html":{}}}],["src/authentication/guards/role.guard.ts",{"_index":866,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/authentication/strategies/jwt",{"_index":461,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["src/authentication/strategies/jwt.strategy.ts",{"_index":486,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/authentication/strategies/jwt.strategy.ts:10",{"_index":487,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/authentication/strategies/jwt.strategy.ts:25",{"_index":489,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/authentication/strategies/local.strategy.ts",{"_index":496,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/authentication/strategies/local.strategy.ts:14",{"_index":500,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/authentication/strategies/local.strategy.ts:8",{"_index":498,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/authentication/types/request",{"_index":395,"title":{},"body":{"controllers/EmailVerificationController.html":{},"interfaces/RequestWithUser.html":{},"controllers/ShopsController.html":{},"controllers/StripePaymentsController.html":{},"controllers/UsersAddressesController.html":{},"coverage.html":{}}}],["src/authentication/types/token",{"_index":713,"title":{},"body":{"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["src/common/enums/postgres",{"_index":249,"title":{},"body":{"injectables/AuthenticationService.html":{},"miscellaneous/enumerations.html":{}}}],["src/email",{"_index":133,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"classes/ConfirmEmailDto.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["src/email/email.controller.ts",{"_index":334,"title":{},"body":{"controllers/EmailController.html":{},"coverage.html":{}}}],["src/email/email.controller.ts:10",{"_index":339,"title":{},"body":{"controllers/EmailController.html":{}}}],["src/email/email.module",{"_index":410,"title":{},"body":{"modules/EmailVerificationModule.html":{}}}],["src/email/email.module.ts",{"_index":353,"title":{},"body":{"modules/EmailModule.html":{}}}],["src/email/email.service",{"_index":429,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["src/email/email.service.ts",{"_index":356,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{}}}],["src/email/email.service.ts:22",{"_index":361,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/email/email.service.ts:8",{"_index":359,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/main.ts",{"_index":868,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/shops/dto/create",{"_index":307,"title":{},"body":{"classes/CreateShopDto.html":{},"coverage.html":{}}}],["src/shops/dto/shop",{"_index":521,"title":{},"body":{"classes/ShopOpenRequestDto.html":{},"coverage.html":{}}}],["src/shops/dto/update",{"_index":715,"title":{},"body":{"classes/UpdateShopDto.html":{},"coverage.html":{}}}],["src/shops/shops.controller.ts",{"_index":557,"title":{},"body":{"controllers/ShopsController.html":{},"coverage.html":{}}}],["src/shops/shops.controller.ts:30",{"_index":571,"title":{},"body":{"controllers/ShopsController.html":{}}}],["src/shops/shops.controller.ts:38",{"_index":574,"title":{},"body":{"controllers/ShopsController.html":{}}}],["src/shops/shops.controller.ts:45",{"_index":577,"title":{},"body":{"controllers/ShopsController.html":{}}}],["src/shops/shops.controller.ts:53",{"_index":566,"title":{},"body":{"controllers/ShopsController.html":{}}}],["src/shops/shops.module.ts",{"_index":608,"title":{},"body":{"modules/ShopsModule.html":{}}}],["src/shops/shops.service.ts",{"_index":611,"title":{},"body":{"injectables/ShopsService.html":{},"coverage.html":{}}}],["src/shops/shops.service.ts:100",{"_index":623,"title":{},"body":{"injectables/ShopsService.html":{}}}],["src/shops/shops.service.ts:108",{"_index":618,"title":{},"body":{"injectables/ShopsService.html":{}}}],["src/shops/shops.service.ts:11",{"_index":616,"title":{},"body":{"injectables/ShopsService.html":{}}}],["src/shops/shops.service.ts:167",{"_index":627,"title":{},"body":{"injectables/ShopsService.html":{}}}],["src/shops/shops.service.ts:22",{"_index":629,"title":{},"body":{"injectables/ShopsService.html":{}}}],["src/shops/shops.service.ts:92",{"_index":620,"title":{},"body":{"injectables/ShopsService.html":{}}}],["src/stripe",{"_index":298,"title":{},"body":{"classes/CreateChargeDto.html":{},"controllers/StripePaymentsController.html":{},"modules/StripePaymentsModule.html":{},"injectables/StripePaymentsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/controllers/users",{"_index":727,"title":{},"body":{"controllers/UsersAddressesController.html":{},"coverage.html":{}}}],["src/users/controllers/users.controller.ts",{"_index":797,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/controllers/users.controller.ts:16",{"_index":800,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/dto/add",{"_index":6,"title":{},"body":{"classes/AddUserAddressDto.html":{},"coverage.html":{}}}],["src/users/dto/create",{"_index":310,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/dto/update",{"_index":719,"title":{},"body":{"classes/UpdateUserAddressDto.html":{},"coverage.html":{}}}],["src/users/services",{"_index":131,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["src/users/services/users",{"_index":767,"title":{},"body":{"injectables/UsersAddressesService.html":{},"coverage.html":{}}}],["src/users/services/users.service.ts",{"_index":808,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/services/users.service.ts:110",{"_index":831,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/services/users.service.ts:127",{"_index":838,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/services/users.service.ts:14",{"_index":816,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/services/users.service.ts:24",{"_index":820,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/services/users.service.ts:41",{"_index":825,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/services/users.service.ts:59",{"_index":827,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/services/users.service.ts:76",{"_index":835,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/services/users.service.ts:91",{"_index":817,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.module",{"_index":198,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/EmailVerificationModule.html":{}}}],["src/users/users.module.ts",{"_index":807,"title":{},"body":{"modules/UsersModule.html":{}}}],["start",{"_index":949,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":952,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":954,"title":{},"body":{"index.html":{}}}],["started",{"_index":929,"title":{"index.html":{}},"body":{}}],["starter",{"_index":941,"title":{},"body":{"index.html":{}}}],["state",{"_index":14,"title":{},"body":{"classes/AddUserAddressDto.html":{},"classes/ShopOpenRequestDto.html":{},"injectables/ShopsService.html":{},"classes/UpdateUserAddressDto.html":{},"injectables/UsersAddressesService.html":{}}}],["statements",{"_index":858,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":975,"title":{},"body":{"index.html":{}}}],["strategies/jwt",{"_index":202,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["strategies/jwt.strategy",{"_index":201,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["strategies/local.strategy",{"_index":200,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["strategy",{"_index":469,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":18,"title":{},"body":{"classes/AddUserAddressDto.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateUserDto.html":{},"injectables/EmailVerificationService.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/ShopOpenRequestDto.html":{},"injectables/ShopsService.html":{},"injectables/StripePaymentsService.html":{},"classes/UpdateUserAddressDto.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{}}}],["stripe",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"controllers/StripePaymentsController.html":{},"modules/StripePaymentsModule.html":{},"injectables/StripePaymentsService.html":{},"dependencies.html":{}}}],["stripe(configservice.get('stripe_secret_key",{"_index":701,"title":{},"body":{"injectables/StripePaymentsService.html":{}}}],["stripepaymentscontroller",{"_index":672,"title":{"controllers/StripePaymentsController.html":{}},"body":{"controllers/StripePaymentsController.html":{},"modules/StripePaymentsModule.html":{},"coverage.html":{}}}],["stripepaymentsmodule",{"_index":44,"title":{"modules/StripePaymentsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StripePaymentsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["stripepaymentsservice",{"_index":679,"title":{"injectables/StripePaymentsService.html":{}},"body":{"controllers/StripePaymentsController.html":{},"modules/StripePaymentsModule.html":{},"injectables/StripePaymentsService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["subject",{"_index":441,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["super",{"_index":474,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["super.canactivate(context",{"_index":1001,"title":{},"body":{"miscellaneous/variables.html":{}}}],["support",{"_index":967,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":986,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":914,"title":{},"body":{"dependencies.html":{}}}],["table",{"_index":880,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":879,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":957,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":960,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":959,"title":{},"body":{"index.html":{}}}],["tests",{"_index":956,"title":{},"body":{"index.html":{}}}],["text",{"_index":435,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["thanks",{"_index":965,"title":{},"body":{"index.html":{}}}],["this.authenticationservice.getauthenticateduser(email",{"_index":505,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.authenticationservice.getcookiesforlogout",{"_index":187,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtaccesstoken(request.user.id",{"_index":179,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtaccesstoken(user.id",{"_index":165,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtrefreshtoken(user.id",{"_index":167,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.register(registrationdata",{"_index":156,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.configservice.get",{"_index":431,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["this.configservice.get('aws_s3_public_bucket_name",{"_index":643,"title":{},"body":{"injectables/ShopsService.html":{}}}],["this.configservice.get('email_password",{"_index":374,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get('email_service",{"_index":367,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get('email_user",{"_index":372,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get('email_verification_token_secret",{"_index":430,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["this.configservice.get('jwt_access_token_expires_in",{"_index":285,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.configservice.get('jwt_access_token_secret",{"_index":284,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.configservice.get('jwt_refresh_token_expires_in",{"_index":289,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.configservice.get('jwt_refresh_token_secret",{"_index":288,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.configservice.get('stripe_currency",{"_index":712,"title":{},"body":{"injectables/StripePaymentsService.html":{}}}],["this.emailconfirmationservice.confirmemail(email",{"_index":404,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["this.emailconfirmationservice.decodeconfirmationtoken",{"_index":402,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["this.emailconfirmationservice.resendconfirmationlink(request.user.id",{"_index":400,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["this.emailservice.sendmail",{"_index":440,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["this.emailservice.sendmail(data",{"_index":348,"title":{},"body":{"controllers/EmailController.html":{}}}],["this.emailverificationservice.sendverificationlink",{"_index":157,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.getbyid(userid",{"_index":844,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.jwtservice.sign(payload",{"_index":283,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{}}}],["this.jwtservice.verify(token",{"_index":448,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["this.nodemailertransport",{"_index":365,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.nodemailertransport.sendmail",{"_index":375,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.prisma",{"_index":638,"title":{},"body":{"injectables/ShopsService.html":{},"injectables/UsersAddressesService.html":{},"injectables/UsersService.html":{}}}],["this.prisma.shopopenrequest.create",{"_index":656,"title":{},"body":{"injectables/ShopsService.html":{}}}],["this.prisma.shopopenrequest.delete",{"_index":668,"title":{},"body":{"injectables/ShopsService.html":{}}}],["this.prisma.shopopenrequest.findfirst",{"_index":661,"title":{},"body":{"injectables/ShopsService.html":{}}}],["this.prisma.shopopenrequest.findmany",{"_index":660,"title":{},"body":{"injectables/ShopsService.html":{}}}],["this.prisma.shopopenrequest.findunique",{"_index":662,"title":{},"body":{"injectables/ShopsService.html":{}}}],["this.prisma.shopopenrequest.update",{"_index":669,"title":{},"body":{"injectables/ShopsService.html":{}}}],["this.prisma.user.create",{"_index":850,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.findunique",{"_index":794,"title":{},"body":{"injectables/UsersAddressesService.html":{},"injectables/UsersService.html":{}}}],["this.prisma.user.update",{"_index":663,"title":{},"body":{"injectables/ShopsService.html":{},"injectables/UsersAddressesService.html":{},"injectables/UsersService.html":{}}}],["this.prisma.useraddress.deletemany",{"_index":795,"title":{},"body":{"injectables/UsersAddressesService.html":{}}}],["this.prisma.useraddress.findmany",{"_index":788,"title":{},"body":{"injectables/UsersAddressesService.html":{}}}],["this.prisma.useraddress.findunique",{"_index":789,"title":{},"body":{"injectables/UsersAddressesService.html":{}}}],["this.prisma.useraddress.updatemany",{"_index":793,"title":{},"body":{"injectables/UsersAddressesService.html":{}}}],["this.sendverificationlink(user.email",{"_index":446,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["this.shopsservice.approveshopopenrequest(requestid",{"_index":605,"title":{},"body":{"controllers/ShopsController.html":{}}}],["this.shopsservice.getallshopopenrequests",{"_index":601,"title":{},"body":{"controllers/ShopsController.html":{}}}],["this.shopsservice.getusershopopenrequest(user.id",{"_index":603,"title":{},"body":{"controllers/ShopsController.html":{}}}],["this.shopsservice.sendashopopenrequest(user.id",{"_index":598,"title":{},"body":{"controllers/ShopsController.html":{}}}],["this.stripe",{"_index":700,"title":{},"body":{"injectables/StripePaymentsService.html":{}}}],["this.stripe.customers.create",{"_index":707,"title":{},"body":{"injectables/StripePaymentsService.html":{}}}],["this.stripe.paymentintents.create",{"_index":708,"title":{},"body":{"injectables/StripePaymentsService.html":{}}}],["this.stripepaymentsservice.charge",{"_index":683,"title":{},"body":{"controllers/StripePaymentsController.html":{}}}],["this.stripepaymentsservice.createcustomer(name",{"_index":851,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersaddressesservice.adduseraddress(user.id",{"_index":762,"title":{},"body":{"controllers/UsersAddressesController.html":{}}}],["this.usersaddressesservice.getuseraddressbyid(addressid",{"_index":761,"title":{},"body":{"controllers/UsersAddressesController.html":{}}}],["this.usersaddressesservice.getuseraddresses(user.id",{"_index":758,"title":{},"body":{"controllers/UsersAddressesController.html":{}}}],["this.usersaddressesservice.removeuseraddress(user.id",{"_index":766,"title":{},"body":{"controllers/UsersAddressesController.html":{}}}],["this.usersaddressesservice.updateuseraddress",{"_index":764,"title":{},"body":{"controllers/UsersAddressesController.html":{}}}],["this.userservice.getuserifrefreshtokenmatches",{"_index":483,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["this.usersservice.create",{"_index":259,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.usersservice.getbyemail(email",{"_index":274,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{}}}],["this.usersservice.getbyid(payload.userid",{"_index":493,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.usersservice.getbyid(userid",{"_index":442,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["this.usersservice.markemailasconfirmed(email",{"_index":447,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["this.usersservice.removerefreshtoken(request.user.id",{"_index":184,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.usersservice.setcurrentrefreshtoken",{"_index":168,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.verifypassword(plaintextpassword",{"_index":275,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["throw",{"_index":265,"title":{},"body":{"injectables/AuthenticationService.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailVerificationService.html":{},"injectables/UsersService.html":{}}}],["throws",{"_index":822,"title":{},"body":{"injectables/UsersService.html":{}}}],["token",{"_index":142,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["token.strategy",{"_index":203,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["token.strategy.ts",{"_index":462,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["token.strategy.ts:13",{"_index":465,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["token.strategy.ts:29",{"_index":467,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["token=${token",{"_index":434,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["tokenexpirederror",{"_index":453,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["tokenpayload",{"_index":252,"title":{"interfaces/TokenPayload.html":{}},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["touch",{"_index":976,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":896,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":332,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"injectables/EmailService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"classes/ShopOpenRequestDto.html":{},"injectables/ShopsService.html":{},"injectables/StripePaymentsService.html":{},"injectables/UsersAddressesService.html":{},"injectables/UsersService.html":{}}}],["try",{"_index":257,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{}}}],["twitter",{"_index":982,"title":{},"body":{"index.html":{}}}],["type",{"_index":16,"title":{},"body":{"classes/AddUserAddressDto.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateChargeDto.html":{},"classes/CreateUserDto.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"classes/ShopOpenRequestDto.html":{},"controllers/ShopsController.html":{},"injectables/ShopsService.html":{},"controllers/StripePaymentsController.html":{},"injectables/StripePaymentsService.html":{},"interfaces/TokenPayload.html":{},"classes/UpdateUserAddressDto.html":{},"controllers/UsersAddressesController.html":{},"injectables/UsersAddressesService.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeof",{"_index":449,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["types/request",{"_index":144,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/EmailConfirmationGuard.html":{}}}],["types/token",{"_index":253,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["types/verification",{"_index":428,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["typescript",{"_index":940,"title":{},"body":{"index.html":{}}}],["ui",{"_index":915,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":326,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["unauthorizedexception('confirm",{"_index":330,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["undefined",{"_index":175,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/ShopsService.html":{},"injectables/UsersAddressesService.html":{}}}],["uniqueviolation",{"_index":923,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unit",{"_index":955,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":111,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/EmailController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/ShopsService.html":{},"injectables/StripePaymentsService.html":{},"controllers/UsersAddressesController.html":{},"injectables/UsersAddressesService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":995,"title":{},"body":{"properties.html":{}}}],["updatedat",{"_index":659,"title":{},"body":{"injectables/ShopsService.html":{},"injectables/UsersService.html":{}}}],["updateduser",{"_index":791,"title":{},"body":{"injectables/UsersAddressesService.html":{}}}],["updates",{"_index":786,"title":{},"body":{"injectables/UsersAddressesService.html":{}}}],["updateshopdto",{"_index":590,"title":{"classes/UpdateShopDto.html":{}},"body":{"controllers/ShopsController.html":{},"injectables/ShopsService.html":{},"classes/UpdateShopDto.html":{},"coverage.html":{}}}],["updateuseraddress",{"_index":734,"title":{},"body":{"controllers/UsersAddressesController.html":{},"injectables/UsersAddressesService.html":{}}}],["updateuseraddress(id",{"_index":784,"title":{},"body":{"injectables/UsersAddressesService.html":{}}}],["updateuseraddress(undefined",{"_index":749,"title":{},"body":{"controllers/UsersAddressesController.html":{}}}],["updateuseraddressdto",{"_index":718,"title":{"classes/UpdateUserAddressDto.html":{}},"body":{"classes/UpdateUserAddressDto.html":{},"controllers/UsersAddressesController.html":{},"injectables/UsersAddressesService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["upload",{"_index":641,"title":{},"body":{"injectables/ShopsService.html":{}}}],["url",{"_index":433,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["usefactory",{"_index":209,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["useguards",{"_index":127,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailVerificationController.html":{},"controllers/ShopsController.html":{},"controllers/StripePaymentsController.html":{},"controllers/UsersAddressesController.html":{},"controllers/UsersController.html":{}}}],["useguards(emailconfirmationguard",{"_index":595,"title":{},"body":{"controllers/ShopsController.html":{},"controllers/UsersAddressesController.html":{},"controllers/UsersController.html":{}}}],["useguards(emailconfirmationguard)@useguards(jwtauthenticationguard)@formdatarequest()@post('/open",{"_index":569,"title":{},"body":{"controllers/ShopsController.html":{}}}],["useguards(emailconfirmationguard)@useguards(jwtauthenticationguard)@get('/open",{"_index":576,"title":{},"body":{"controllers/ShopsController.html":{}}}],["useguards(jwtauthenticationguard",{"_index":181,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailVerificationController.html":{},"controllers/ShopsController.html":{},"controllers/StripePaymentsController.html":{},"controllers/UsersAddressesController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthenticationguard)@get",{"_index":100,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwtauthenticationguard)@httpcode(200)@post('logout",{"_index":113,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwtrefreshguard",{"_index":176,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwtrefreshguard)@get('refresh",{"_index":116,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(localauthenticationguard",{"_index":161,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(roleguard('admin",{"_index":599,"title":{},"body":{"controllers/ShopsController.html":{}}}],["useguards(undefined)@useguards(emailconfirmationguard)@useguards(jwtauthenticationguard)@get('/open",{"_index":572,"title":{},"body":{"controllers/ShopsController.html":{}}}],["useguards(undefined)@useguards(emailconfirmationguard)@useguards(jwtauthenticationguard)@post('/open",{"_index":564,"title":{},"body":{"controllers/ShopsController.html":{}}}],["useinterceptors",{"_index":391,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":396,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["user",{"_index":7,"title":{},"body":{"classes/AddUserAddressDto.html":{},"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailService.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/LocalStrategy.html":{},"interfaces/RequestWithUser.html":{},"controllers/ShopsController.html":{},"injectables/ShopsService.html":{},"classes/UpdateUserAddressDto.html":{},"controllers/UsersAddressesController.html":{},"injectables/UsersAddressesService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":780,"title":{},"body":{"injectables/UsersAddressesService.html":{},"injectables/UsersService.html":{}}}],["user.currenthashedrefreshtoken",{"_index":485,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/UsersService.html":{}}}],["user.dto",{"_index":841,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":311,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:2",{"_index":312,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:3",{"_index":313,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:4",{"_index":314,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.id",{"_index":170,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/UsersAddressesController.html":{}}}],["user.isemailverified",{"_index":443,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["user.password",{"_index":174,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["user.types",{"_index":145,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailVerificationController.html":{},"controllers/ShopsController.html":{},"controllers/StripePaymentsController.html":{},"controllers/UsersAddressesController.html":{}}}],["user.types.ts",{"_index":519,"title":{},"body":{"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["user?.roles.includes(role",{"_index":1002,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userdata",{"_index":848,"title":{},"body":{"injectables/UsersService.html":{}}}],["userid",{"_index":234,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{},"injectables/ShopsService.html":{},"interfaces/TokenPayload.html":{},"injectables/UsersAddressesService.html":{},"injectables/UsersService.html":{}}}],["usernamefield",{"_index":504,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["users",{"_index":798,"title":{},"body":{"controllers/UsersController.html":{}}}],["users/addresses",{"_index":729,"title":{},"body":{"controllers/UsersAddressesController.html":{}}}],["users/users.module",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["usersaddressescontroller",{"_index":726,"title":{"controllers/UsersAddressesController.html":{}},"body":{"controllers/UsersAddressesController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersaddressesservice",{"_index":752,"title":{"injectables/UsersAddressesService.html":{}},"body":{"controllers/UsersAddressesController.html":{},"injectables/UsersAddressesService.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{},"overview.html":{}}}],["userscontroller",{"_index":796,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":464,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["usersmodule",{"_index":45,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailVerificationModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":130,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uuid",{"_index":917,"title":{},"body":{"dependencies.html":{}}}],["validate",{"_index":463,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":499,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":488,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(request",{"_index":466,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["validationschema",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":30,"title":{},"body":{"classes/AddUserAddressDto.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateChargeDto.html":{},"classes/LoginDto.html":{},"classes/RegisterDto.html":{},"classes/ShopOpenRequestDto.html":{},"classes/UpdateUserAddressDto.html":{},"dependencies.html":{}}}],["value",{"_index":924,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":867,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":996,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["verification",{"_index":378,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["verification.controller",{"_index":411,"title":{},"body":{"modules/EmailVerificationModule.html":{}}}],["verification.controller.ts",{"_index":377,"title":{},"body":{"controllers/EmailVerificationController.html":{},"coverage.html":{}}}],["verification.controller.ts:24",{"_index":389,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["verification.controller.ts:29",{"_index":383,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["verification.module",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{}}}],["verification.module.ts",{"_index":409,"title":{},"body":{"modules/EmailVerificationModule.html":{}}}],["verification.service",{"_index":134,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{}}}],["verification.service.ts",{"_index":412,"title":{},"body":{"injectables/EmailVerificationService.html":{},"coverage.html":{}}}],["verification.service.ts:17",{"_index":425,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["verification.service.ts:39",{"_index":423,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["verification.service.ts:47",{"_index":419,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["verification.service.ts:55",{"_index":421,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["verification.service.ts:9",{"_index":417,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["verification/dto/confirm",{"_index":294,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"coverage.html":{}}}],["verification/email",{"_index":60,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"coverage.html":{}}}],["verification/types/verification",{"_index":854,"title":{},"body":{"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["verificationtokenpayload",{"_index":427,"title":{"interfaces/VerificationTokenPayload.html":{}},"body":{"injectables/EmailVerificationService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["verified",{"_index":833,"title":{},"body":{"injectables/UsersService.html":{}}}],["verifypassword",{"_index":223,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["verifypassword(plaintextpassword",{"_index":238,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["version",{"_index":993,"title":{},"body":{"properties.html":{}}}],["watch",{"_index":950,"title":{},"body":{"index.html":{}}}],["website",{"_index":980,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":436,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["went",{"_index":271,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["who's",{"_index":632,"title":{},"body":{"injectables/ShopsService.html":{}}}],["wrong",{"_index":272,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["you'd",{"_index":970,"title":{},"body":{"index.html":{}}}],["zip",{"_index":15,"title":{},"body":{"classes/AddUserAddressDto.html":{},"classes/ShopOpenRequestDto.html":{},"injectables/ShopsService.html":{},"classes/UpdateUserAddressDto.html":{},"injectables/UsersAddressesService.html":{}}}],["zoom",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailModule.html":{},"modules/EmailVerificationModule.html":{},"modules/ShopsModule.html":{},"modules/StripePaymentsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/AddUserAddressDto.html":{"url":"classes/AddUserAddressDto.html","title":"class - AddUserAddressDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddUserAddressDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/add-user-address.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                city\n                            \n                            \n                                country\n                            \n                            \n                                state\n                            \n                            \n                                zip\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/add-user-address.dto.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/add-user-address.dto.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/add-user-address.dto.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/add-user-address.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        zip\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/add-user-address.dto.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class AddUserAddressDto {\n  @IsString()\n  @IsNotEmpty()\n  address: string;\n\n  @IsString()\n  @IsNotEmpty()\n  city: string;\n\n  @IsString()\n  @IsNotEmpty()\n  state: string;\n\n  @IsString()\n  @IsNotEmpty()\n  country: string;\n\n  @IsString()\n  @IsNotEmpty()\n  zip: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nEmailModule\n\nEmailModule\n\nAppModule -->\n\nEmailModule->AppModule\n\n\n\n\n\nEmailVerificationModule\n\nEmailVerificationModule\n\nAppModule -->\n\nEmailVerificationModule->AppModule\n\n\n\n\n\nShopsModule\n\nShopsModule\n\nAppModule -->\n\nShopsModule->AppModule\n\n\n\n\n\nStripePaymentsModule\n\nStripePaymentsModule\n\nAppModule -->\n\nStripePaymentsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthenticationModule\n                        \n                        \n                            EmailModule\n                        \n                        \n                            EmailVerificationModule\n                        \n                        \n                            ShopsModule\n                        \n                        \n                            StripePaymentsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersModule } from './users/users.module';\nimport { ConfigModule } from '@nestjs/config';\nimport * as Joi from '@hapi/joi';\nimport { AuthenticationModule } from './authentication/authentication.module';\nimport { EmailModule } from './email/email.module';\nimport { EmailVerificationModule } from './email-verification/email-verification.module';\nimport { StripePaymentsModule } from './stripe-payments/stripe-payments.module';\nimport { ShopsModule } from './shops/shops.module';\n\n@Module({\n  imports: [\n    UsersModule,\n    AuthenticationModule,\n    ConfigModule.forRoot({\n      validationSchema: Joi.object({\n        DATABASE_URL: Joi.string().required(),\n        JWT_ACCESS_TOKEN_SECRET: Joi.string().required(),\n        JWT_ACCESS_TOKEN_EXPIRES_IN: Joi.string().required(),\n        EMAIL_VERIFICATION_TOKEN_SECRET: Joi.string().required(),\n        EMAIL_VERIFICATION_TOKEN_EXPIRATION_TIME: Joi.string().required(),\n        EMAIL_CONFIRMATION_URL: Joi.string().required(),\n        EMAIL_SERVICE: Joi.string().required(),\n        EMAIL_PORT: Joi.string().required(),\n        EMAIL_USER: Joi.string().required(),\n        EMAIL_PASSWORD: Joi.string().required(),\n        AWS_REGION: Joi.string().required(),\n        AWS_ACCESS_KEY_ID: Joi.string().required(),\n        AWS_SECRET_ACCESS_KEY: Joi.string().required(),\n        AWS_S3_PUBLIC_BUCKET_NAME: Joi.string().required(),\n      }),\n    }),\n    EmailModule,\n    EmailVerificationModule,\n    StripePaymentsModule,\n    ShopsModule,\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthenticationController.html":{"url":"controllers/AuthenticationController.html","title":"controller - AuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authenticate\n                            \n                            \n                                    Async\n                                logIn\n                            \n                            \n                                    Async\n                                logOut\n                            \n                            \n                                refresh\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        authenticate\n                        \n                    \n                \n            \n            \n                \nauthenticate(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthenticationGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:85\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    logIn(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(200)@UseGuards(LocalAuthenticationGuard)@Post('login')@ApiBody({type: LoginDto})\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    logOut(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthenticationGuard)@HttpCode(200)@Post('logout')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refresh\n                        \n                    \n                \n            \n            \n                \nrefresh(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtRefreshGuard)@Get('refresh')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:63\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registrationData: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registrationData\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Body,\n  Req,\n  HttpCode,\n  Post,\n  UseGuards,\n  Get,\n} from '@nestjs/common';\nimport { AuthenticationService } from './authentication.service';\nimport { UsersService } from 'src/users/services';\nimport { EmailVerificationService } from 'src/email-verification/email-verification.service';\nimport { RegisterDto } from './dto/register.dto';\nimport { LocalAuthenticationGuard } from './guards/local-authentication.guard';\nimport { JwtAuthenticationGuard } from './guards/jwt-authentication.guard';\nimport { JwtRefreshGuard } from './guards/jwt-token-refresh.guard';\nimport { RequestWithUser } from './types/request-with-user.types';\nimport { LoginDto } from './dto/login.dto';\nimport { ApiBody } from '@nestjs/swagger';\n\n@Controller('authentication')\nexport class AuthenticationController {\n  constructor(\n    private readonly authenticationService: AuthenticationService,\n    private readonly usersService: UsersService,\n    private readonly emailVerificationService: EmailVerificationService,\n  ) {}\n\n  @Post('register')\n  async register(@Body() registrationData: RegisterDto) {\n    const user = await this.authenticationService.register(registrationData);\n    await this.emailVerificationService.sendVerificationLink(\n      registrationData.email,\n    );\n    return user;\n  }\n\n  @HttpCode(200)\n  @UseGuards(LocalAuthenticationGuard)\n  @Post('login')\n  @ApiBody({ type: LoginDto })\n  async logIn(@Req() request: RequestWithUser) {\n    const { user } = request;\n    const accessTokenCookie =\n      this.authenticationService.getCookieWithJwtAccessToken(user.id);\n    const refreshTokenCookie =\n      this.authenticationService.getCookieWithJwtRefreshToken(user.id);\n    await this.usersService.setCurrentRefreshToken(\n      refreshTokenCookie.token,\n      user.id,\n    );\n\n    request.res.setHeader('Set-Cookie', [\n      accessTokenCookie,\n      refreshTokenCookie.cookie,\n    ]);\n    user.password = undefined;\n    return user;\n  }\n\n  @UseGuards(JwtRefreshGuard)\n  @Get('refresh')\n  refresh(@Req() request: RequestWithUser) {\n    const accessTokenCookie =\n      this.authenticationService.getCookieWithJwtAccessToken(request.user.id);\n\n    request.res.setHeader('Set-Cookie', accessTokenCookie);\n    return request.user;\n  }\n\n  @UseGuards(JwtAuthenticationGuard)\n  @HttpCode(200)\n  @Post('logout')\n  async logOut(@Req() request: RequestWithUser) {\n    await this.usersService.removeRefreshToken(request.user.id);\n\n    request.res.setHeader(\n      'Set-Cookie',\n      this.authenticationService.getCookiesForLogOut(),\n    );\n  }\n\n  @UseGuards(JwtAuthenticationGuard)\n  @Get()\n  authenticate(@Req() request: RequestWithUser) {\n    const user = request.user;\n    user.password = undefined;\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthenticationModule.html":{"url":"modules/AuthenticationModule.html","title":"module - AuthenticationModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthenticationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\ncluster_AuthenticationModule_imports\n\n\n\n\nEmailVerificationModule\n\nEmailVerificationModule\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\nAuthenticationModule -->\n\nEmailVerificationModule->AuthenticationModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthenticationModule -->\n\nUsersModule->AuthenticationModule\n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nJwtRefreshTokenStrategy\n\nJwtRefreshTokenStrategy\n\nAuthenticationModule -->\n\nJwtRefreshTokenStrategy->AuthenticationModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthenticationModule -->\n\nJwtStrategy->AuthenticationModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthenticationModule -->\n\nLocalStrategy->AuthenticationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/authentication/authentication.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthenticationService\n                        \n                        \n                            JwtRefreshTokenStrategy\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthenticationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EmailVerificationModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { UsersModule } from 'src/users/users.module';\nimport { AuthenticationService } from './authentication.service';\nimport { AuthenticationController } from './authentication.controller';\nimport { LocalStrategy } from './strategies/local.strategy';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { JwtRefreshTokenStrategy } from './strategies/jwt-refresh-token.strategy';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { EmailVerificationModule } from 'src/email-verification/email-verification.module';\n\n@Module({\n  imports: [\n    EmailVerificationModule,\n    UsersModule,\n    PassportModule,\n    ConfigModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get('JWT_ACCESS_SECRET'),\n        signOptions: {\n          expiresIn: configService.get('JWT_ACCESS_TOKEN_EXPIRES_IN'),\n        },\n      }),\n    }),\n  ],\n  providers: [\n    AuthenticationService,\n    LocalStrategy,\n    JwtStrategy,\n    JwtRefreshTokenStrategy,\n  ],\n  controllers: [AuthenticationController],\n})\nexport class AuthenticationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthenticationService.html":{"url":"injectables/AuthenticationService.html","title":"injectable - AuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getAuthenticatedUser\n                            \n                            \n                                    Public\n                                getCookiesForLogOut\n                            \n                            \n                                    Public\n                                getCookieWithJwtAccessToken\n                            \n                            \n                                    Public\n                                getCookieWithJwtRefreshToken\n                            \n                            \n                                    Public\n                                    Async\n                                register\n                            \n                            \n                                    Private\n                                    Async\n                                verifyPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/authentication.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getAuthenticatedUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAuthenticatedUser(email: string, plainTextPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    plainTextPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookiesForLogOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookiesForLogOut()\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookieWithJwtAccessToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookieWithJwtAccessToken(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookieWithJwtRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookieWithJwtRefreshToken(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { cookie: string; token: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registrationData: RegisterDto)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registrationData\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        verifyPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyPassword(plainTextPassword: string, hashedPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plainTextPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    hashedPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { hash as bcryptHash, compare as bcryptCompare } from 'bcrypt';\nimport { UsersService } from 'src/users/services';\nimport { RegisterDto } from './dto/register.dto';\nimport { PostgresErrorCodes } from 'src/common/enums/postgres-error-code.enum';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { TokenPayload } from './types/token-payload.types';\n\n@Injectable()\nexport class AuthenticationService {\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  public async register(registrationData: RegisterDto) {\n    const hashedPassword = await bcryptHash(registrationData.password, 10);\n    try {\n      const createdUser = await this.usersService.create({\n        ...registrationData,\n        password: hashedPassword,\n      });\n      createdUser.password = undefined;\n      return createdUser;\n    } catch (error) {\n      if (error?.code === PostgresErrorCodes.UniqueViolation) {\n        throw new HttpException(\n          'User with that email already exists',\n          HttpStatus.BAD_REQUEST,\n        );\n      }\n      throw new HttpException(\n        'Something went wrong',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n  public async getAuthenticatedUser(email: string, plainTextPassword: string) {\n    try {\n      const user = await this.usersService.getByEmail(email);\n      await this.verifyPassword(plainTextPassword, user.password);\n      user.password = undefined;\n      return user;\n    } catch (error) {\n      throw new HttpException(\n        'Wrong credentials provided',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n  }\n\n  public getCookiesForLogOut() {\n    return [\n      'Authentication=; HttpOnly; Path=/; Max-Age=0',\n      'Refresh=; HttpOnly; Path=/; Max-Age=0',\n    ];\n  }\n\n  public getCookieWithJwtAccessToken(userId: number) {\n    const payload: TokenPayload = { userId };\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_ACCESS_TOKEN_SECRET'),\n      expiresIn: this.configService.get('JWT_ACCESS_TOKEN_EXPIRES_IN'),\n    });\n    return `Authentication=${token}; HttpOnly; Path=/; Max-Age=${this.configService.get(\n      'JWT_ACCESS_TOKEN_EXPIRES_IN',\n    )}`;\n  }\n\n  public getCookieWithJwtRefreshToken(userId: number) {\n    const payload: TokenPayload = { userId };\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_REFRESH_TOKEN_SECRET'),\n      expiresIn: this.configService.get('JWT_REFRESH_TOKEN_EXPIRES_IN'),\n    });\n    const cookie = `Refresh=${token}; HttpOnly; Path=/; Max-Age=${this.configService.get(\n      'JWT_REFRESH_TOKEN_EXPIRES_IN',\n    )}`;\n    return {\n      cookie,\n      token,\n    };\n  }\n\n  private async verifyPassword(\n    plainTextPassword: string,\n    hashedPassword: string,\n  ) {\n    const isPasswordMatching = await bcryptCompare(\n      plainTextPassword,\n      hashedPassword,\n    );\n    if (!isPasswordMatching) {\n      throw new HttpException(\n        'Wrong credentials provided',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConfirmEmailDto.html":{"url":"classes/ConfirmEmailDto.html","title":"class - ConfirmEmailDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConfirmEmailDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email-verification/dto/confirm-email.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/email-verification/dto/confirm-email.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class ConfirmEmailDto {\n  @IsString()\n  @IsNotEmpty()\n  token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateChargeDto.html":{"url":"classes/CreateChargeDto.html","title":"class - CreateChargeDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateChargeDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripe-payments/dto/create-charge.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                amount\n                            \n                            \n                                paymentMethodId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        amount\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNumber()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stripe-payments/dto/create-charge.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        paymentMethodId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/stripe-payments/dto/create-charge.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsNumber } from 'class-validator';\n\nexport class CreateChargeDto {\n  @IsString()\n  @IsNotEmpty()\n  paymentMethodId: string;\n\n  @IsNumber()\n  amount: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateShopDto.html":{"url":"classes/CreateShopDto.html","title":"class - CreateShopDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateShopDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shops/dto/create-shop.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateShopDto {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateUserDto {\n  email: string;\n  name: string;\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/EmailConfirmationGuard.html":{"url":"guards/EmailConfirmationGuard.html","title":"guard - EmailConfirmationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    EmailConfirmationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/authentication/guards/email-confirmation.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/guards/email-confirmation.guard.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  Injectable,\n  CanActivate,\n  ExecutionContext,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { RequestWithUser } from '../types/request-with-user.types';\n\n@Injectable()\nexport class EmailConfirmationGuard implements CanActivate {\n  canActivate(context: ExecutionContext) {\n    const request: RequestWithUser = context.switchToHttp().getRequest();\n\n    if (!request.user?.isEmailVerified) {\n      throw new UnauthorizedException('Confirm your email first');\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmailController.html":{"url":"controllers/EmailController.html","title":"controller - EmailController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmailController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email/email.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                email\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendMail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendMail(data: Mail.Options)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('send')\n                \n            \n\n            \n                \n                    Defined in src/email/email.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Mail.Options\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { EmailService } from './email.service';\nimport * as Mail from 'nodemailer/lib/mailer';\n\n@Controller('email')\nexport class EmailController {\n  constructor(private readonly emailService: EmailService) {}\n\n  @Post('send')\n  async sendMail(@Body() data: Mail.Options) {\n    await this.emailService.sendMail(data);\n    return 'Email sent';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailModule.html":{"url":"modules/EmailModule.html","title":"module - EmailModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_providers\n\n\n\ncluster_EmailModule_exports\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/email/email.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EmailController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EmailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { EmailService } from './email.service';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { EmailController } from './email.controller';\n\n@Module({\n  imports: [ConfigModule],\n  providers: [EmailService],\n  exports: [EmailService],\n  controllers: [EmailController],\n})\nexport class EmailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailService.html":{"url":"injectables/EmailService.html","title":"injectable - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email/email.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                nodemailerTransport\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/email/email.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendMail\n                        \n                    \n                \n            \n            \n                \nsendMail(options: Mail.Options)\n                \n            \n\n\n            \n                \n                    Defined in src/email/email.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            Mail.Options\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        nodemailerTransport\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Mail\n\n                    \n                \n                    \n                        \n                                Defined in src/email/email.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { createTransport } from 'nodemailer';\nimport * as Mail from 'nodemailer/lib/mailer';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class EmailService {\n  private nodemailerTransport: Mail;\n\n  constructor(private readonly configService: ConfigService) {\n    this.nodemailerTransport = createTransport({\n      host: this.configService.get('EMAIL_SERVICE'),\n      port: Number(this.configService.get('EMAIL_PORT')),\n      secure: true,\n      auth: {\n        user: this.configService.get('EMAIL_USER'),\n        pass: this.configService.get('EMAIL_PASSWORD'),\n      },\n    });\n  }\n\n  sendMail(options: Mail.Options) {\n    return this.nodemailerTransport.sendMail({\n      ...options,\n      from: `${this.configService.get('EMAIL_USER')}`,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmailVerificationController.html":{"url":"controllers/EmailVerificationController.html","title":"controller - EmailVerificationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmailVerificationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email-verification/email-verification.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                email-verification\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                confirm\n                            \n                            \n                                    Async\n                                resendConfirmationLink\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        confirm\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirm(confirmationData: ConfirmEmailDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('confirm')\n                \n            \n\n            \n                \n                    Defined in src/email-verification/email-verification.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    confirmationData\n                                    \n                                                ConfirmEmailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        resendConfirmationLink\n                        \n                    \n                \n            \n            \n                \n                    \n                    resendConfirmationLink(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('resend-confirmation-link')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/email-verification/email-verification.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  ClassSerializerInterceptor,\n  UseInterceptors,\n  Post,\n  Body,\n  UseGuards,\n  Req,\n} from '@nestjs/common';\nimport { ConfirmEmailDto } from './dto/confirm-email.dto';\nimport { EmailVerificationService } from './email-verification.service';\nimport { JwtAuthenticationGuard } from 'src/authentication/guards/jwt-authentication.guard';\nimport { RequestWithUser } from 'src/authentication/types/request-with-user.types';\n\n@Controller('email-verification')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class EmailVerificationController {\n  constructor(\n    private readonly emailConfirmationService: EmailVerificationService,\n  ) {}\n\n  @Post('resend-confirmation-link')\n  @UseGuards(JwtAuthenticationGuard)\n  async resendConfirmationLink(@Req() request: RequestWithUser) {\n    await this.emailConfirmationService.resendConfirmationLink(request.user.id);\n  }\n\n  @Post('confirm')\n  async confirm(@Body() confirmationData: ConfirmEmailDto) {\n    const email = await this.emailConfirmationService.decodeConfirmationToken(\n      confirmationData.token,\n    );\n    await this.emailConfirmationService.confirmEmail(email);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailVerificationModule.html":{"url":"modules/EmailVerificationModule.html","title":"module - EmailVerificationModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailVerificationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmailVerificationModule\n\n\n\ncluster_EmailVerificationModule_exports\n\n\n\ncluster_EmailVerificationModule_imports\n\n\n\ncluster_EmailVerificationModule_providers\n\n\n\n\nEmailModule\n\nEmailModule\n\n\n\nEmailVerificationModule\n\nEmailVerificationModule\n\nEmailVerificationModule -->\n\nEmailModule->EmailVerificationModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nEmailVerificationModule -->\n\nUsersModule->EmailVerificationModule\n\n\n\n\n\nEmailVerificationService \n\nEmailVerificationService \n\nEmailVerificationService  -->\n\nEmailVerificationModule->EmailVerificationService \n\n\n\n\n\nEmailVerificationService\n\nEmailVerificationService\n\nEmailVerificationModule -->\n\nEmailVerificationService->EmailVerificationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/email-verification/email-verification.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailVerificationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EmailVerificationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EmailModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EmailVerificationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { EmailVerificationService } from './email-verification.service';\nimport { EmailModule } from 'src/email/email.module';\nimport { UsersModule } from 'src/users/users.module';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigModule } from '@nestjs/config';\nimport { EmailVerificationController } from './email-verification.controller';\n\n@Module({\n  imports: [UsersModule, EmailModule, JwtModule, ConfigModule],\n  providers: [EmailVerificationService],\n  exports: [EmailVerificationService],\n  controllers: [EmailVerificationController],\n})\nexport class EmailVerificationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailVerificationService.html":{"url":"injectables/EmailVerificationService.html","title":"injectable - EmailVerificationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailVerificationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email-verification/email-verification.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                confirmEmail\n                            \n                            \n                                    Public\n                                    Async\n                                decodeConfirmationToken\n                            \n                            \n                                    Public\n                                    Async\n                                resendConfirmationLink\n                            \n                            \n                                    Public\n                                sendVerificationLink\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, configService: ConfigService, emailService: EmailService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/email-verification/email-verification.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        confirmEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirmEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/email-verification/email-verification.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        decodeConfirmationToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    decodeConfirmationToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/email-verification/email-verification.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        resendConfirmationLink\n                        \n                    \n                \n            \n            \n                \n                    \n                    resendConfirmationLink(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/email-verification/email-verification.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        sendVerificationLink\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendVerificationLink(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/email-verification/email-verification.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { VerificationTokenPayload } from './types/verification-payload.types';\nimport { EmailService } from 'src/email/email.service';\nimport { UsersService } from 'src/users/services';\n\n@Injectable()\nexport class EmailVerificationService {\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n    private readonly emailService: EmailService,\n    private readonly usersService: UsersService,\n  ) {}\n\n  public sendVerificationLink(email: string) {\n    const payload: VerificationTokenPayload = { email };\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('EMAIL_VERIFICATION_TOKEN_SECRET'),\n      expiresIn: `${this.configService.get(\n        'EMAIL_VERIFICATION_TOKEN_EXPIRATION_TIME',\n      )}s`,\n    });\n\n    const url = `${this.configService.get(\n      'EMAIL_CONFIRMATION_URL',\n    )}?token=${token}`;\n\n    const text = `Welcome to the application. To confirm the email address, click here: ${token}`;\n\n    return this.emailService.sendMail({\n      to: email,\n      subject: 'Email confirmation',\n      text,\n    });\n  }\n\n  public async resendConfirmationLink(userId: number) {\n    const user = await this.usersService.getById(userId);\n    if (user.isEmailVerified) {\n      throw new BadRequestException('Email already confirmed');\n    }\n    await this.sendVerificationLink(user.email);\n  }\n\n  public async confirmEmail(email: string) {\n    const user = await this.usersService.getByEmail(email);\n    if (user.isEmailVerified) {\n      throw new BadRequestException('Email already confirmed');\n    }\n    await this.usersService.markEmailAsConfirmed(email);\n  }\n\n  public async decodeConfirmationToken(token: string) {\n    try {\n      const payload = await this.jwtService.verify(token, {\n        secret: this.configService.get('EMAIL_VERIFICATION_TOKEN_SECRET'),\n      });\n\n      if (typeof payload === 'object' && 'email' in payload) {\n        return payload.email;\n      }\n      throw new BadRequestException();\n    } catch (error) {\n      if (error?.name === 'TokenExpiredError') {\n        throw new BadRequestException('Email confirmation token expired');\n      }\n      throw new BadRequestException('Bad confirmation token');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthenticationGuard.html":{"url":"injectables/JwtAuthenticationGuard.html","title":"injectable - JwtAuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/guards/jwt-authentication.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthenticationGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshGuard.html":{"url":"injectables/JwtRefreshGuard.html","title":"injectable - JwtRefreshGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/guards/jwt-token-refresh.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtRefreshGuard extends AuthGuard('jwt-refresh-token') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshTokenStrategy.html":{"url":"injectables/JwtRefreshTokenStrategy.html","title":"injectable - JwtRefreshTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/strategies/jwt-refresh-token.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/strategies/jwt-refresh-token.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(request: Request, payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/strategies/jwt-refresh-token.strategy.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\nimport { UsersService } from 'src/users/services';\nimport { TokenPayload } from '../types/token-payload.types';\n\n@Injectable()\nexport class JwtRefreshTokenStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh-token',\n) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) => {\n          return request?.cookies?.Refresh;\n        },\n      ]),\n      secretOrKey: configService.get('JWT_REFRESH_TOKEN_SECRET'),\n      passReqToCallback: true,\n    });\n  }\n\n  async validate(request: Request, payload: TokenPayload) {\n    const refreshToken = request.cookies?.Refresh;\n    const user = await this.userService.getUserIfRefreshTokenMatches(\n      refreshToken,\n      payload.userId,\n    );\n    user.currentHashedRefreshToken = undefined;\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/strategies/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/strategies/jwt.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/strategies/jwt.strategy.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\nimport { UsersService } from 'src/users/services';\nimport { TokenPayload } from '../types/token-payload.types';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly configService: ConfigService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) => {\n          return request?.cookies?.Authentication;\n        },\n      ]),\n      secretOrKey: configService.get('JWT_ACCESS_TOKEN_SECRET'),\n    });\n  }\n\n  async validate(payload: TokenPayload) {\n    return this.usersService.getById(payload.userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthenticationGuard.html":{"url":"injectables/LocalAuthenticationGuard.html","title":"injectable - LocalAuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/guards/local-authentication.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthenticationGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/strategies/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authenticationService: AuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/strategies/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authenticationService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/strategies/local.strategy.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { AuthenticationService } from '../authentication.service';\nimport { User } from '@prisma/client';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authenticationService: AuthenticationService) {\n    super({\n      usernameField: 'email',\n    });\n  }\n  async validate(email: string, password: string): Promise {\n    return this.authenticationService.getAuthenticatedUser(email, password);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginDto.html":{"url":"classes/LoginDto.html","title":"class - LoginDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/dto/login.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/login.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/login.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString, IsNotEmpty, MinLength } from 'class-validator';\n\nexport class LoginDto {\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/dto/register.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString, IsNotEmpty, MinLength } from 'class-validator';\n\nexport class RegisterDto {\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser.html":{"url":"interfaces/RequestWithUser.html","title":"interface - RequestWithUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/types/request-with-user.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:     User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     User\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { User } from '@prisma/client';\nimport { Request } from 'express';\n\nexport interface RequestWithUser extends Request {\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ShopOpenRequestDto.html":{"url":"classes/ShopOpenRequestDto.html","title":"class - ShopOpenRequestDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ShopOpenRequestDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shops/dto/shop-open-request.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                address\n                            \n                            \n                                businessDocuments\n                            \n                            \n                                city\n                            \n                            \n                                contactEmail\n                            \n                            \n                                contactPhone\n                            \n                            \n                                country\n                            \n                            \n                                coverPhoto\n                            \n                            \n                                description\n                            \n                            \n                                logo\n                            \n                            \n                                name\n                            \n                            \n                                state\n                            \n                            \n                                zip\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shops/dto/shop-open-request.dto.ts:39\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        businessDocuments\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MemoryStoredFile[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsFiles()@HasMimeType(['application/pdf'], {each: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shops/dto/shop-open-request.dto.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shops/dto/shop-open-request.dto.ts:43\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        contactEmail\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shops/dto/shop-open-request.dto.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        contactPhone\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shops/dto/shop-open-request.dto.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shops/dto/shop-open-request.dto.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        coverPhoto\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MemoryStoredFile\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsFile()@HasMimeType(['image/png', 'image/jpeg', 'image/webp'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shops/dto/shop-open-request.dto.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shops/dto/shop-open-request.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        logo\n                        \n                    \n                \n            \n                \n                    \n                        Type :     MemoryStoredFile\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsFile()@HasMimeType(['image/png', 'image/jpeg', 'image/webp'])\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shops/dto/shop-open-request.dto.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shops/dto/shop-open-request.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shops/dto/shop-open-request.dto.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        zip\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsNotEmpty()@IsString()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shops/dto/shop-open-request.dto.ts:55\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsEmail } from 'class-validator';\nimport {\n  IsFiles,\n  IsFile,\n  HasMimeType,\n  MemoryStoredFile,\n} from 'nestjs-form-data';\n\nexport class ShopOpenRequestDto {\n  @IsNotEmpty()\n  @IsString()\n  name: string;\n\n  @IsNotEmpty()\n  @IsString()\n  description: string;\n\n  @IsFile()\n  @HasMimeType(['image/png', 'image/jpeg', 'image/webp'])\n  coverPhoto: MemoryStoredFile;\n\n  @IsFile()\n  @HasMimeType(['image/png', 'image/jpeg', 'image/webp'])\n  logo: MemoryStoredFile;\n\n  @IsFiles()\n  @HasMimeType(['application/pdf'], { each: true })\n  businessDocuments: MemoryStoredFile[];\n\n  @IsEmail()\n  contactEmail: string;\n\n  @IsNotEmpty()\n  @IsString()\n  contactPhone: string;\n\n  @IsNotEmpty()\n  @IsString()\n  address: string;\n\n  @IsNotEmpty()\n  @IsString()\n  city: string;\n\n  @IsNotEmpty()\n  @IsString()\n  state: string;\n\n  @IsNotEmpty()\n  @IsString()\n  country: string;\n\n  @IsNotEmpty()\n  @IsString()\n  zip: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/ShopsController.html":{"url":"controllers/ShopsController.html","title":"controller - ShopsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  ShopsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shops/shops.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                shops\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                approveShopOpenRequests\n                            \n                            \n                                create\n                            \n                            \n                                getAllShopOpenRequests\n                            \n                            \n                                getUserShopOpenRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        approveShopOpenRequests\n                        \n                    \n                \n            \n            \n                \napproveShopOpenRequests(requestId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@UseGuards(EmailConfirmationGuard)@UseGuards(JwtAuthenticationGuard)@Post('/open-requests/:requestId')\n                \n            \n\n            \n                \n                    Defined in src/shops/shops.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    requestId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(undefined: RequestWithUser, data: ShopOpenRequestDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(EmailConfirmationGuard)@UseGuards(JwtAuthenticationGuard)@FormDataRequest()@Post('/open-requests')\n                \n            \n\n            \n                \n                    Defined in src/shops/shops.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    data\n                                    \n                                                ShopOpenRequestDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllShopOpenRequests\n                        \n                    \n                \n            \n            \n                \ngetAllShopOpenRequests()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(undefined)@UseGuards(EmailConfirmationGuard)@UseGuards(JwtAuthenticationGuard)@Get('/open-requests/all')\n                \n            \n\n            \n                \n                    Defined in src/shops/shops.controller.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUserShopOpenRequest\n                        \n                    \n                \n            \n            \n                \ngetUserShopOpenRequest(undefined: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(EmailConfirmationGuard)@UseGuards(JwtAuthenticationGuard)@Get('/open-requests')\n                \n            \n\n            \n                \n                    Defined in src/shops/shops.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Patch,\n  Param,\n  Delete,\n  UseGuards,\n  Req,\n  ParseIntPipe,\n} from '@nestjs/common';\nimport { FormDataRequest } from 'nestjs-form-data';\nimport { EmailConfirmationGuard } from 'src/authentication/guards/email-confirmation.guard';\nimport { JwtAuthenticationGuard } from 'src/authentication/guards/jwt-authentication.guard';\nimport { RoleGuard } from 'src/authentication/guards/role.guard';\nimport { RequestWithUser } from 'src/authentication/types/request-with-user.types';\nimport { ShopsService } from './shops.service';\nimport { CreateShopDto } from './dto/create-shop.dto';\nimport { UpdateShopDto } from './dto/update-shop.dto';\nimport { ShopOpenRequestDto } from './dto/shop-open-request.dto';\n\n@Controller('shops')\nexport class ShopsController {\n  constructor(private readonly shopsService: ShopsService) {}\n  @UseGuards(EmailConfirmationGuard)\n  @UseGuards(JwtAuthenticationGuard)\n  @FormDataRequest()\n  @Post('/open-requests')\n  create(@Req() { user }: RequestWithUser, @Body() data: ShopOpenRequestDto) {\n    return this.shopsService.sendAShopOpenRequest(user.id, data);\n  }\n\n  @UseGuards(RoleGuard('Admin'))\n  @UseGuards(EmailConfirmationGuard)\n  @UseGuards(JwtAuthenticationGuard)\n  @Get('/open-requests/all')\n  getAllShopOpenRequests() {\n    return this.shopsService.getAllShopOpenRequests();\n  }\n\n  @UseGuards(EmailConfirmationGuard)\n  @UseGuards(JwtAuthenticationGuard)\n  @Get('/open-requests')\n  getUserShopOpenRequest(@Req() { user }: RequestWithUser) {\n    return this.shopsService.getUserShopOpenRequest(user.id);\n  }\n\n  @UseGuards(RoleGuard('Admin'))\n  @UseGuards(EmailConfirmationGuard)\n  @UseGuards(JwtAuthenticationGuard)\n  @Post('/open-requests/:requestId')\n  approveShopOpenRequests(@Param('requestId', ParseIntPipe) requestId: number) {\n    return this.shopsService.approveShopOpenRequest(requestId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ShopsModule.html":{"url":"modules/ShopsModule.html","title":"module - ShopsModule","body":"\n                   \n\n\n\n\n    Modules\n    ShopsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ShopsModule\n\n\n\ncluster_ShopsModule_providers\n\n\n\n\nShopsService\n\nShopsService\n\n\n\nShopsModule\n\nShopsModule\n\nShopsModule -->\n\nShopsService->ShopsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/shops/shops.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ShopsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            ShopsController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { ConfigModule } from '@nestjs/config';\nimport { NestjsFormDataModule } from 'nestjs-form-data';\nimport { ShopsService } from './shops.service';\nimport { ShopsController } from './shops.controller';\n\n@Module({\n  imports: [NestjsFormDataModule, ConfigModule],\n  controllers: [ShopsController],\n  providers: [ShopsService],\n})\nexport class ShopsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ShopsService.html":{"url":"injectables/ShopsService.html","title":"injectable - ShopsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ShopsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shops/shops.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                prisma\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                approveShopOpenRequest\n                            \n                            \n                                    Async\n                                getAllShopOpenRequests\n                            \n                            \n                                    Async\n                                getUserShopOpenRequest\n                            \n                            \n                                    Async\n                                rejectShopOpenRequest\n                            \n                            \n                                    Async\n                                sendAShopOpenRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/shops/shops.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        approveShopOpenRequest\n                        \n                    \n                \n            \n            \n                \n                    \n                    approveShopOpenRequest(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/shops/shops.service.ts:108\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllShopOpenRequests\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllShopOpenRequests()\n                \n            \n\n\n            \n                \n                    Defined in src/shops/shops.service.ts:92\n                \n            \n\n\n            \n                \n                    Get all the shop open requests\n\n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserShopOpenRequest\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserShopOpenRequest(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/shops/shops.service.ts:100\n                \n            \n\n\n            \n                \n                    Returns the shop open requests of the given user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ID of the user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        rejectShopOpenRequest\n                        \n                    \n                \n            \n            \n                \n                    \n                    rejectShopOpenRequest(id: number, reason: string)\n                \n            \n\n\n            \n                \n                    Defined in src/shops/shops.service.ts:167\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    reason\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendAShopOpenRequest\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendAShopOpenRequest(id: number, undefined: ShopOpenRequestDto)\n                \n            \n\n\n            \n                \n                    Defined in src/shops/shops.service.ts:22\n                \n            \n\n\n            \n                \n                    Send a shop open request to the admins\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ID of the user who's requesting to open a shop\n\n                                    \n                                \n                                \n                                    \n                                                ShopOpenRequestDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        prisma\n                        \n                    \n                \n            \n                \n                    \n                        Type :     PrismaClient\n\n                    \n                \n                    \n                        \n                                Defined in src/shops/shops.service.ts:11\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ShopOpenRequestDto } from './dto/shop-open-request.dto';\nimport { CreateShopDto } from './dto/create-shop.dto';\nimport { UpdateShopDto } from './dto/update-shop.dto';\nimport { PrismaClient } from '@prisma/client';\nimport { S3 } from 'aws-sdk';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class ShopsService {\n  prisma: PrismaClient;\n\n  constructor(private readonly configService: ConfigService) {\n    this.prisma = new PrismaClient();\n  }\n\n  /**\n   *Send a shop open request to the admins\n   * @param id ID of the user who's requesting to open a shop\n   * @param data Data about the shop to open\n   */\n  async sendAShopOpenRequest(\n    id: number,\n    {\n      address,\n      city,\n      contactEmail,\n      contactPhone,\n      country,\n      description,\n      name,\n      state,\n      zip,\n      businessDocuments,\n      coverPhoto,\n      logo,\n    }: ShopOpenRequestDto,\n  ) {\n    const s3 = new S3();\n    const { Location: coverPhotoURL } = await s3\n      .upload({\n        Bucket: this.configService.get('AWS_S3_PUBLIC_BUCKET_NAME'),\n        Key: `${id}/business/${coverPhoto.originalName}`,\n        Body: coverPhoto.buffer,\n      })\n      .promise();\n    const { Location: logoURL } = await s3\n      .upload({\n        Bucket: this.configService.get('AWS_S3_PUBLIC_BUCKET_NAME'),\n        Key: `${id}/business/images/${logo.originalName}`,\n        Body: logo.buffer,\n      })\n      .promise();\n\n    const businessDocumentURLS: string[] = [];\n\n    for (const businessDocument of businessDocuments) {\n      const { Location: businessDocumentURL } = await s3\n        .upload({\n          Bucket: this.configService.get('AWS_S3_PUBLIC_BUCKET_NAME'),\n          Key: `${id}/business/documents/${businessDocument.originalName}`,\n          Body: businessDocument.buffer,\n        })\n        .promise();\n      businessDocumentURLS.push(businessDocumentURL);\n    }\n\n    return this.prisma.shopOpenRequest.create({\n      data: {\n        address,\n        city,\n        contactEmail,\n        contactPhone,\n        country,\n        description,\n        name,\n        state,\n        zip,\n        userId: id,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        coverPhoto: coverPhotoURL,\n        logo: logoURL,\n        businessDocuments: businessDocumentURLS,\n      },\n    });\n  }\n\n  /**\n   *Get all the shop open requests\n   */\n  async getAllShopOpenRequests() {\n    return this.prisma.shopOpenRequest.findMany();\n  }\n\n  /**\n   * Returns the shop open requests of the given user\n   * @param id ID of the user\n   */\n  async getUserShopOpenRequest(id: number) {\n    return this.prisma.shopOpenRequest.findFirst({\n      where: {\n        userId: id,\n      },\n    });\n  }\n\n  async approveShopOpenRequest(id: number) {\n    const {\n      address,\n      businessDocuments,\n      city,\n      contactEmail,\n      contactPhone,\n      country,\n      coverPhoto,\n      description,\n      logo,\n      name,\n      state,\n      userId,\n      zip,\n    } = await this.prisma.shopOpenRequest.findUnique({\n      where: {\n        id,\n      },\n    });\n\n    await this.prisma.user.update({\n      where: {\n        id: userId,\n      },\n      data: {\n        roles: {\n          push: 'Seller',\n        },\n        Shop: {\n          create: {\n            businessDocuments,\n            contactEmail,\n            contactPhone,\n            coverPhoto,\n            description,\n            logo,\n            name,\n            physicalAddress: {\n              create: {\n                address,\n                city,\n                country,\n                state,\n                zip,\n              },\n            },\n          },\n        },\n      },\n    });\n\n    await this.prisma.shopOpenRequest.delete({\n      where: {\n        id,\n      },\n    });\n  }\n\n  async rejectShopOpenRequest(id: number, reason: string) {\n    await this.prisma.shopOpenRequest.update({\n      where: {\n        id,\n      },\n      data: {\n        rejected: true,\n        rejectedReason: reason,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/StripePaymentsController.html":{"url":"controllers/StripePaymentsController.html","title":"controller - StripePaymentsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  StripePaymentsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripe-payments/stripe-payments.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                charge\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCharge\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createCharge\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCharge(charge: CreateChargeDto, request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/stripe-payments/stripe-payments.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    charge\n                                    \n                                                CreateChargeDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post, Req, UseGuards } from '@nestjs/common';\nimport { StripePaymentsService } from './stripe-payments.service';\nimport { CreateChargeDto } from './dto/create-charge.dto';\nimport { JwtAuthenticationGuard } from 'src/authentication/guards/jwt-authentication.guard';\nimport { RequestWithUser } from 'src/authentication/types/request-with-user.types';\n\n@Controller('charge')\nexport class StripePaymentsController {\n  constructor(private readonly stripePaymentsService: StripePaymentsService) {}\n\n  @Post()\n  @UseGuards(JwtAuthenticationGuard)\n  async createCharge(\n    @Body() charge: CreateChargeDto,\n    @Req() request: RequestWithUser,\n  ) {\n    await this.stripePaymentsService.charge(\n      charge.amount,\n      charge.paymentMethodId,\n      request.user.stripeCustomerId,\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StripePaymentsModule.html":{"url":"modules/StripePaymentsModule.html","title":"module - StripePaymentsModule","body":"\n                   \n\n\n\n\n    Modules\n    StripePaymentsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_StripePaymentsModule\n\n\n\ncluster_StripePaymentsModule_providers\n\n\n\ncluster_StripePaymentsModule_exports\n\n\n\n\nStripePaymentsService \n\nStripePaymentsService \n\n\n\nStripePaymentsModule\n\nStripePaymentsModule\n\nStripePaymentsService  -->\n\nStripePaymentsModule->StripePaymentsService \n\n\n\n\n\nStripePaymentsService\n\nStripePaymentsService\n\nStripePaymentsModule -->\n\nStripePaymentsService->StripePaymentsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/stripe-payments/stripe-payments.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            StripePaymentsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            StripePaymentsController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            StripePaymentsService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { StripePaymentsService } from './stripe-payments.service';\nimport { StripePaymentsController } from './stripe-payments.controller';\nimport { ConfigModule } from '@nestjs/config';\n\n@Module({\n  imports: [ConfigModule],\n  providers: [StripePaymentsService],\n  controllers: [StripePaymentsController],\n  exports: [StripePaymentsService],\n})\nexport class StripePaymentsModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StripePaymentsService.html":{"url":"injectables/StripePaymentsService.html","title":"injectable - StripePaymentsService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StripePaymentsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/stripe-payments/stripe-payments.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                stripe\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                charge\n                            \n                            \n                                    Public\n                                    Async\n                                createCustomer\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/stripe-payments/stripe-payments.service.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        charge\n                        \n                    \n                \n            \n            \n                \n                    \n                    charge(amount: number, paymentMethodId: string, customerId: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe-payments/stripe-payments.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    amount\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    paymentMethodId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    customerId\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        createCustomer\n                        \n                    \n                \n            \n            \n                \n                    \n                    createCustomer(name: string, email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/stripe-payments/stripe-payments.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        stripe\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Stripe\n\n                    \n                \n                    \n                        \n                                Defined in src/stripe-payments/stripe-payments.service.ts:7\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport Stripe from 'stripe';\n\n@Injectable()\nexport class StripePaymentsService {\n  private stripe: Stripe;\n  constructor(private readonly configService: ConfigService) {\n    this.stripe = new Stripe(configService.get('STRIPE_SECRET_KEY'), {\n      apiVersion: '2020-08-27',\n    });\n  }\n\n  public async createCustomer(name: string, email: string) {\n    const response = await this.stripe.customers.create({\n      name,\n      email,\n    });\n    return response;\n  }\n\n  public async charge(\n    amount: number,\n    paymentMethodId: string,\n    customerId: string,\n  ) {\n    return this.stripe.paymentIntents.create({\n      amount,\n      customer: customerId,\n      payment_method: paymentMethodId,\n      currency: this.configService.get('STRIPE_CURRENCY'),\n      confirm: true,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayload.html":{"url":"interfaces/TokenPayload.html","title":"interface - TokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/types/token-payload.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TokenPayload {\n  userId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateShopDto.html":{"url":"classes/UpdateShopDto.html","title":"class - UpdateShopDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateShopDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shops/dto/update-shop.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateShopDto } from './create-shop.dto';\n\nexport class UpdateShopDto extends PartialType(CreateShopDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserAddressDto.html":{"url":"classes/UpdateUserAddressDto.html","title":"class - UpdateUserAddressDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserAddressDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/update-user-address.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                address\n                            \n                            \n                                    Optional\n                                city\n                            \n                            \n                                    Optional\n                                country\n                            \n                            \n                                    Optional\n                                state\n                            \n                            \n                                    Optional\n                                zip\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        address\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user-address.dto.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        city\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user-address.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        country\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user-address.dto.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user-address.dto.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        zip\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@IsOptional()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/users/dto/update-user-address.dto.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty, IsOptional } from 'class-validator';\n\nexport class UpdateUserAddressDto {\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  address?: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  city?: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  state?: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  country?: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @IsOptional()\n  zip?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersAddressesController.html":{"url":"controllers/UsersAddressesController.html","title":"controller - UsersAddressesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersAddressesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/controllers/users-addresses.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users/addresses\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserAddress\n                            \n                            \n                                    Async\n                                getAllUserAddresses\n                            \n                            \n                                    Async\n                                getUserAddressById\n                            \n                            \n                                    Async\n                                removeUserAddress\n                            \n                            \n                                    Async\n                                updateUserAddress\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserAddress\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserAddress(undefined: RequestWithUser, addressData: AddUserAddressDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UseGuards(EmailConfirmationGuard)@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-addresses.controller.ts:43\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    addressData\n                                    \n                                                AddUserAddressDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllUserAddresses\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUserAddresses(undefined: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(EmailConfirmationGuard)@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-addresses.controller.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserAddressById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserAddressById(addressId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:addressId')@UseGuards(EmailConfirmationGuard)@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-addresses.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    addressId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeUserAddress\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUserAddress(undefined: RequestWithUser, addressId: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:addressId')@UseGuards(EmailConfirmationGuard)@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-addresses.controller.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    addressId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserAddress\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserAddress(undefined: RequestWithUser, addressId: number, addressData: UpdateUserAddressDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:addressId')@UseGuards(EmailConfirmationGuard)@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users-addresses.controller.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    addressId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    addressData\n                                    \n                                                UpdateUserAddressDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Delete,\n  UseGuards,\n  Body,\n  Req,\n  Param,\n  ParseIntPipe,\n  Patch,\n} from '@nestjs/common';\nimport { UsersAddressesService } from '../services';\nimport { JwtAuthenticationGuard } from 'src/authentication/guards/jwt-authentication.guard';\nimport { EmailConfirmationGuard } from 'src/authentication/guards/email-confirmation.guard';\nimport { RequestWithUser } from 'src/authentication/types/request-with-user.types';\nimport { AddUserAddressDto } from '../dto/add-user-address.dto';\nimport { UpdateUserAddressDto } from '../dto/update-user-address.dto';\n\n@Controller('users/addresses')\nexport class UsersAddressesController {\n  constructor(private readonly usersAddressesService: UsersAddressesService) {}\n\n  @Get()\n  @UseGuards(EmailConfirmationGuard)\n  @UseGuards(JwtAuthenticationGuard)\n  async getAllUserAddresses(@Req() { user }: RequestWithUser) {\n    return this.usersAddressesService.getUserAddresses(user.id);\n  }\n\n  @Get('/:addressId')\n  @UseGuards(EmailConfirmationGuard)\n  @UseGuards(JwtAuthenticationGuard)\n  async getUserAddressById(\n    @Param('addressId', ParseIntPipe) addressId: number,\n  ) {\n    return this.usersAddressesService.getUserAddressById(addressId);\n  }\n\n  @Post()\n  @UseGuards(EmailConfirmationGuard)\n  @UseGuards(JwtAuthenticationGuard)\n  async addUserAddress(\n    @Req() { user }: RequestWithUser,\n    @Body() addressData: AddUserAddressDto,\n  ) {\n    return this.usersAddressesService.addUserAddress(user.id, addressData);\n  }\n\n  @Patch('/:addressId')\n  @UseGuards(EmailConfirmationGuard)\n  @UseGuards(JwtAuthenticationGuard)\n  async updateUserAddress(\n    @Req() { user }: RequestWithUser,\n    @Param('addressId', ParseIntPipe) addressId: number,\n    @Body() addressData: UpdateUserAddressDto,\n  ) {\n    return this.usersAddressesService.updateUserAddress(\n      user.id,\n      addressId,\n      addressData,\n    );\n  }\n\n  @Delete('/:addressId')\n  @UseGuards(EmailConfirmationGuard)\n  @UseGuards(JwtAuthenticationGuard)\n  async removeUserAddress(\n    @Req() { user }: RequestWithUser,\n    @Param('addressId', ParseIntPipe) addressId: number,\n  ) {\n    return this.usersAddressesService.removeUserAddress(user.id, addressId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersAddressesService.html":{"url":"injectables/UsersAddressesService.html","title":"injectable - UsersAddressesService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersAddressesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/services/users-addresses.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                prisma\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addUserAddress\n                            \n                            \n                                    Async\n                                getUserAddressById\n                            \n                            \n                                    Async\n                                getUserAddresses\n                            \n                            \n                                    Async\n                                removeUserAddress\n                            \n                            \n                                    Async\n                                updateUserAddress\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/users/services/users-addresses.service.ts:11\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        addUserAddress\n                        \n                    \n                \n            \n            \n                \n                    \n                    addUserAddress(id: number, undefined: AddUserAddressDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/services/users-addresses.service.ts:48\n                \n            \n\n\n            \n                \n                    Adds a new address to the user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ID of the desired user\n\n                                    \n                                \n                                \n                                    \n                                                AddUserAddressDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserAddressById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserAddressById(addressId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/services/users-addresses.service.ts:34\n                \n            \n\n\n            \n                \n                    Get user address by the given id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    addressId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ID of the desired address\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserAddresses\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserAddresses(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/services/users-addresses.service.ts:21\n                \n            \n\n\n            \n                \n                    Get all the saved addresses of the user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Desired user's id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeUserAddress\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeUserAddress(id: number, addressId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/services/users-addresses.service.ts:115\n                \n            \n\n\n            \n                \n                    Deletes the given user address\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ID of the desired user\n\n                                    \n                                \n                                \n                                    addressId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ID of the desired address\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUserAddress\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUserAddress(id: number, addressId: number, undefined: UpdateUserAddressDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/services/users-addresses.service.ts:79\n                \n            \n\n\n            \n                \n                    Updates the given user address\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ID of the desired user\n\n                                    \n                                \n                                \n                                    addressId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ID of the desired address\n\n                                    \n                                \n                                \n                                    \n                                                UpdateUserAddressDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        prisma\n                        \n                    \n                \n            \n                \n                    \n                        Type :     PrismaClient\n\n                    \n                \n                    \n                        \n                                Defined in src/users/services/users-addresses.service.ts:11\n                        \n                    \n\n            \n                \n                    The prisma client\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\nimport { AddUserAddressDto } from '../dto/add-user-address.dto';\nimport { UpdateUserAddressDto } from '../dto/update-user-address.dto';\n\n@Injectable()\nexport class UsersAddressesService {\n  /**\n   * The prisma client\n   */\n  prisma: PrismaClient;\n\n  constructor() {\n    this.prisma = new PrismaClient();\n  }\n\n  /**\n   * Get all the saved addresses of the user\n   * @param id Desired user's id\n   */\n  async getUserAddresses(id: number) {\n    const addresses = await this.prisma.userAddress.findMany({\n      where: {\n        userId: id,\n      },\n    });\n    return addresses;\n  }\n\n  /**\n   * Get user address by the given id\n   * @param addressId ID of the desired address\n   */\n  async getUserAddressById(addressId: number) {\n    const address = await this.prisma.userAddress.findUnique({\n      where: {\n        id: addressId,\n      },\n    });\n    return address;\n  }\n\n  /**\n   * Adds a new address to the user\n   * @param id ID of the desired user\n   * @param addressData Address data DTO\n   */\n  async addUserAddress(\n    id: number,\n    { address, city, state, zip, country }: AddUserAddressDto,\n  ) {\n    const updatedUser = await this.prisma.user.update({\n      where: { id },\n      data: {\n        addresses: {\n          create: {\n            address,\n            city,\n            state,\n            zip,\n            country,\n          },\n        },\n      },\n      include: {\n        addresses: true,\n      },\n    });\n\n    return updatedUser;\n  }\n\n  /**\n   * Updates the given user address\n   * @param id ID of the desired user\n   * @param addressId ID of the desired address\n   * @param addressData Address data DTO\n   */\n  async updateUserAddress(\n    id: number,\n    addressId: number,\n    { address, city, state, zip, country }: UpdateUserAddressDto,\n  ) {\n    await this.prisma.userAddress.updateMany({\n      where: {\n        id: addressId,\n        userId: id,\n      },\n      data: {\n        address,\n        city,\n        state,\n        zip,\n        country,\n      },\n    });\n    const user = await this.prisma.user.findUnique({\n      where: {\n        id,\n      },\n\n      include: {\n        addresses: true,\n      },\n    });\n\n    return user;\n  }\n\n  /**\n   * Deletes the given user address\n   * @param id ID of the desired user\n   * @param addressId ID of the desired address\n   */\n  async removeUserAddress(id: number, addressId: number) {\n    await this.prisma.userAddress.deleteMany({\n      where: {\n        id: addressId,\n      },\n    });\n\n    const user = await this.prisma.user.findUnique({\n      where: {\n        id,\n      },\n\n      include: {\n        addresses: true,\n      },\n    });\n\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/controllers/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAllUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUsers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@UseGuards(EmailConfirmationGuard)@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/users/controllers/users.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, UseGuards } from '@nestjs/common';\nimport { UsersService, UsersAddressesService } from '../services';\nimport { JwtAuthenticationGuard } from 'src/authentication/guards/jwt-authentication.guard';\nimport { EmailConfirmationGuard } from 'src/authentication/guards/email-confirmation.guard';\n\n@Controller('users')\nexport class UsersController {\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly usersAddressesService: UsersAddressesService,\n  ) {}\n\n  @Get()\n  @UseGuards(EmailConfirmationGuard)\n  @UseGuards(JwtAuthenticationGuard)\n  async getAllUsers() {\n    return 'This action returns all users';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\ncluster_UsersModule_imports\n\n\n\n\nStripePaymentsModule\n\nStripePaymentsModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nStripePaymentsModule->UsersModule\n\n\n\n\n\nUsersAddressesService \n\nUsersAddressesService \n\nUsersAddressesService  -->\n\nUsersModule->UsersAddressesService \n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersAddressesService\n\nUsersAddressesService\n\nUsersModule -->\n\nUsersAddressesService->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersAddressesService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                        \n                            UsersAddressesController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            StripePaymentsModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersAddressesService\n                        \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService, UsersAddressesService } from './services';\nimport { UsersAddressesController, UsersController } from './controllers';\nimport { StripePaymentsModule } from 'src/stripe-payments/stripe-payments.module';\n\n@Module({\n  imports: [StripePaymentsModule],\n  providers: [UsersService, UsersAddressesService],\n  controllers: [UsersController, UsersAddressesController],\n  exports: [UsersService, UsersAddressesService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/services/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                prisma\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                getByEmail\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getUserIfRefreshTokenMatches\n                            \n                            \n                                    Async\n                                markEmailAsConfirmed\n                            \n                            \n                                    Async\n                                removeRefreshToken\n                            \n                            \n                                    Async\n                                setCurrentRefreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(stripePaymentsService: StripePaymentsService)\n                    \n                \n                        \n                            \n                                Defined in src/users/services/users.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        stripePaymentsService\n                                                  \n                                                        \n                                                                        StripePaymentsService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(undefined: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/services/users.service.ts:91\n                \n            \n\n\n            \n                \n                    Creates a new user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/services/users.service.ts:24\n                \n            \n\n\n            \n                \n                    Returns the user if email exists, otherwise throws an 404\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        email address of the desired user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/services/users.service.ts:41\n                \n            \n\n\n            \n                \n                    Returns the user if id exists, otherwise throws an 404\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        id of the desired user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserIfRefreshTokenMatches\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserIfRefreshTokenMatches(refreshToken: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/services/users.service.ts:59\n                \n            \n\n\n            \n                \n                    Returns the user if refresh token matches.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Refresh token to be compared\n\n                                    \n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Desired user's id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        markEmailAsConfirmed\n                        \n                    \n                \n            \n            \n                \n                    \n                    markEmailAsConfirmed(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/services/users.service.ts:110\n                \n            \n\n\n            \n                \n                    Marks a user's email as verified\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The verified email\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeRefreshToken(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/services/users.service.ts:76\n                \n            \n\n\n            \n                \n                    Removes the user's refresh token\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Desired user's id\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        setCurrentRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    setCurrentRefreshToken(refreshToken: string, id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/services/users.service.ts:127\n                \n            \n\n\n            \n                \n                    Sets the refresh token after hashing to the given user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Refresh token to be set\n\n                                    \n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        ID of the desired user\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        prisma\n                        \n                    \n                \n            \n                \n                    \n                        Type :     PrismaClient\n\n                    \n                \n                    \n                        \n                                Defined in src/users/services/users.service.ts:14\n                        \n                    \n\n            \n                \n                    The prisma client\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, HttpException, HttpStatus } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\nimport { hash as bcryptHash, compare as bcryptCompare } from 'bcrypt';\nimport { CreateUserDto } from '../dto/create-user.dto';\nimport { AddUserAddressDto } from '../dto/add-user-address.dto';\nimport { UpdateUserAddressDto } from '../dto/update-user-address.dto';\nimport { StripePaymentsService } from 'src/stripe-payments/stripe-payments.service';\n\n@Injectable()\nexport class UsersService {\n  /**\n   * The prisma client\n   */\n  prisma: PrismaClient;\n\n  constructor(private readonly stripePaymentsService: StripePaymentsService) {\n    this.prisma = new PrismaClient();\n  }\n\n  /**\n   * Returns the user if email exists, otherwise throws an 404\n   * @param email email address of the desired user\n   */\n  async getByEmail(email: string) {\n    const user = await this.prisma.user.findUnique({\n      where: {\n        email,\n      },\n    });\n    if (user) return user;\n    throw new HttpException(\n      'User with this email does not exist',\n      HttpStatus.NOT_FOUND,\n    );\n  }\n\n  /**\n   * Returns the user if id exists, otherwise throws an 404\n   * @param id id of the desired user\n   */\n  async getById(id: number) {\n    const user = await this.prisma.user.findUnique({\n      where: {\n        id,\n      },\n    });\n    if (user) return user;\n    throw new HttpException(\n      'User with this id does not exist',\n      HttpStatus.NOT_FOUND,\n    );\n  }\n\n  /**\n   * Returns the user if refresh token matches.\n   * @param refreshToken Refresh token to be compared\n   * @param userId Desired user's id\n   */\n  async getUserIfRefreshTokenMatches(refreshToken: string, userId: number) {\n    const user = await this.getById(userId);\n\n    const isRefreshTokenMatching = await bcryptCompare(\n      refreshToken,\n      user.currentHashedRefreshToken,\n    );\n\n    if (isRefreshTokenMatching) {\n      return user;\n    }\n  }\n\n  /**\n   * Removes the user's refresh token\n   * @param id Desired user's id\n   */\n  async removeRefreshToken(id: number) {\n    return this.prisma.user.update({\n      where: {\n        id,\n      },\n      data: {\n        currentHashedRefreshToken: null,\n      },\n    });\n  }\n\n  /**\n   * Creates a new user\n   * @param userData user data\n   */\n  async create({ email, name, password }: CreateUserDto) {\n    const newUser = await this.prisma.user.create({\n      data: {\n        email,\n        name,\n        password,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        roles: ['User'],\n      },\n    });\n    await this.stripePaymentsService.createCustomer(name, email);\n    return newUser;\n  }\n\n  /**\n   * Marks a user's email as verified\n   * @param email The verified email\n   */\n  async markEmailAsConfirmed(email: string) {\n    const user = await this.prisma.user.update({\n      where: {\n        email,\n      },\n      data: {\n        isEmailVerified: true,\n      },\n    });\n    return user;\n  }\n\n  /**\n   * Sets the refresh token after hashing to the given user\n   * @param refreshToken Refresh token to be set\n   * @param id ID of the desired user\n   */\n  async setCurrentRefreshToken(refreshToken: string, id: number) {\n    const currentHashedRefreshToken = await bcryptHash(refreshToken, 10);\n    await this.prisma.user.update({\n      where: {\n        id,\n      },\n      data: {\n        currentHashedRefreshToken,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/VerificationTokenPayload.html":{"url":"interfaces/VerificationTokenPayload.html","title":"interface - VerificationTokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  VerificationTokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email-verification/types/verification-payload.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface VerificationTokenPayload {\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/authentication/authentication.controller.ts\n            \n            controller\n            AuthenticationController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/authentication/authentication.service.ts\n            \n            injectable\n            AuthenticationService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/authentication/dto/login.dto.ts\n            \n            class\n            LoginDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/authentication/guards/email-confirmation.guard.ts\n            \n            guard\n            EmailConfirmationGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/guards/jwt-authentication.guard.ts\n            \n            injectable\n            JwtAuthenticationGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/guards/jwt-token-refresh.guard.ts\n            \n            injectable\n            JwtRefreshGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/guards/local-authentication.guard.ts\n            \n            injectable\n            LocalAuthenticationGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/guards/role.guard.ts\n            \n            variable\n            RoleGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/strategies/jwt-refresh-token.strategy.ts\n            \n            injectable\n            JwtRefreshTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/types/request-with-user.types.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/types/token-payload.types.ts\n            \n            interface\n            TokenPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/email-verification/dto/confirm-email.dto.ts\n            \n            class\n            ConfirmEmailDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/email-verification/email-verification.controller.ts\n            \n            controller\n            EmailVerificationController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/email-verification/email-verification.service.ts\n            \n            injectable\n            EmailVerificationService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/email-verification/types/verification-payload.types.ts\n            \n            interface\n            VerificationTokenPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/email/email.controller.ts\n            \n            controller\n            EmailController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/email/email.service.ts\n            \n            injectable\n            EmailService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shops/dto/create-shop.dto.ts\n            \n            class\n            CreateShopDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shops/dto/shop-open-request.dto.ts\n            \n            class\n            ShopOpenRequestDto\n            \n                0 %\n                (0/13)\n            \n        \n        \n            \n                \n                src/shops/dto/update-shop.dto.ts\n            \n            class\n            UpdateShopDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shops/shops.controller.ts\n            \n            controller\n            ShopsController\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/shops/shops.service.ts\n            \n            injectable\n            ShopsService\n            \n                37 %\n                (3/8)\n            \n        \n        \n            \n                \n                src/stripe-payments/dto/create-charge.dto.ts\n            \n            class\n            CreateChargeDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/stripe-payments/stripe-payments.controller.ts\n            \n            controller\n            StripePaymentsController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/stripe-payments/stripe-payments.service.ts\n            \n            injectable\n            StripePaymentsService\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/users/controllers/users-addresses.controller.ts\n            \n            controller\n            UsersAddressesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/controllers/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/dto/add-user-address.dto.ts\n            \n            class\n            AddUserAddressDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/dto/update-user-address.dto.ts\n            \n            class\n            UpdateUserAddressDto\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/users/services/users-addresses.service.ts\n            \n            injectable\n            UsersAddressesService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/users/services/users.service.ts\n            \n            injectable\n            UsersService\n            \n                80 %\n                (8/10)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @hapi/joi : ^17.1.1\n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^2.1.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.1\n        \n            @nestjs/passport : ^8.2.2\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/swagger : ^5.2.1\n        \n            @prisma/client : ^3.15.2\n        \n            aws-sdk : ^2.1161.0\n        \n            bcrypt : ^5.0.1\n        \n            cache-manager : ^4.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            cookie-parser : ^1.4.6\n        \n            nestjs-form-data : ^1.6.4\n        \n            nodemailer : ^6.7.5\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            stripe : ^9.9.0\n        \n            swagger-ui-express : ^4.4.0\n        \n            uuid : ^8.3.2\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostgresErrorCodes   (src/.../postgres-error-code.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/enums/postgres-error-code.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostgresErrorCodes\n                    \n                \n                        \n                            \n                                 UniqueViolation\n                            \n                        \n                        \n                            \n                                Value : 23505\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthenticationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailVerificationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ShopsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StripePaymentsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\ncluster_EmailVerificationModule\n\n\n\ncluster_EmailVerificationModule_exports\n\n\n\ncluster_EmailVerificationModule_providers\n\n\n\ncluster_ShopsModule\n\n\n\ncluster_ShopsModule_providers\n\n\n\ncluster_StripePaymentsModule\n\n\n\ncluster_StripePaymentsModule_exports\n\n\n\ncluster_StripePaymentsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nEmailModule\n\nEmailModule\n\n\n\nEmailVerificationModule\n\nEmailVerificationModule\n\nEmailVerificationModule -->\n\nEmailModule->EmailVerificationModule\n\n\n\nAppModule -->\n\nEmailModule->AppModule\n\n\n\n\n\nEmailService \n\nEmailService \n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\nAuthenticationModule -->\n\nEmailVerificationModule->AuthenticationModule\n\n\n\nAppModule -->\n\nEmailVerificationModule->AppModule\n\n\n\n\n\nEmailVerificationService \n\nEmailVerificationService \n\nEmailVerificationService  -->\n\nEmailVerificationModule->EmailVerificationService \n\n\n\n\n\nShopsModule\n\nShopsModule\n\nAppModule -->\n\nShopsModule->AppModule\n\n\n\n\n\nStripePaymentsModule\n\nStripePaymentsModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nStripePaymentsModule->UsersModule\n\n\n\nAppModule -->\n\nStripePaymentsModule->AppModule\n\n\n\n\n\nStripePaymentsService \n\nStripePaymentsService \n\nStripePaymentsService  -->\n\nStripePaymentsModule->StripePaymentsService \n\n\n\nAuthenticationModule -->\n\nUsersModule->AuthenticationModule\n\n\n\nEmailVerificationModule -->\n\nUsersModule->EmailVerificationModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersAddressesService \n\nUsersAddressesService \n\nUsersAddressesService  -->\n\nUsersModule->UsersAddressesService \n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nJwtRefreshTokenStrategy\n\nJwtRefreshTokenStrategy\n\nAuthenticationModule -->\n\nJwtRefreshTokenStrategy->AuthenticationModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthenticationModule -->\n\nJwtStrategy->AuthenticationModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthenticationModule -->\n\nLocalStrategy->AuthenticationModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\nEmailVerificationService\n\nEmailVerificationService\n\nEmailVerificationModule -->\n\nEmailVerificationService->EmailVerificationModule\n\n\n\n\n\nShopsService\n\nShopsService\n\nShopsModule -->\n\nShopsService->ShopsModule\n\n\n\n\n\nStripePaymentsService\n\nStripePaymentsService\n\nStripePaymentsModule -->\n\nStripePaymentsService->StripePaymentsModule\n\n\n\n\n\nUsersAddressesService\n\nUsersAddressesService\n\nUsersModule -->\n\nUsersAddressesService->UsersModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    7 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    13 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    10 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            RoleGuard   (src/.../role.guard.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/authentication/guards/role.guard.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RoleGuard\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (role: Role): Type => {\n  class RoleGuardMixin extends JwtAuthenticationGuard {\n    async canActivate(context: ExecutionContext) {\n      await super.canActivate(context);\n      const request = context.switchToHttp().getRequest();\n      const user = request.user;\n      return user?.roles.includes(role);\n    }\n  }\n\n  return mixin(RoleGuardMixin);\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
