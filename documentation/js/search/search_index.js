var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.239,1,2.11]],["body/modules/AppModule.html",[0,1.583,1,4.057,2,1.327,3,1.861,4,2.474,5,2.474,6,3.325,7,0.03,8,3.025,9,3.025,10,2.768,11,2.213,12,1.578,13,1.578,14,0.261,15,0.226,16,0.226,17,2.953,18,2.697,19,0.735,20,0.457,21,2.953,22,1.923,23,1.129,24,2.953,25,2.474,26,2.953,27,2.953,28,0.965,29,1.444,30,2.474,31,2.953,32,2.953,33,2.953,34,2.953,35,6.107,36,2.953,37,2.474,38,2.953,39,2.474,40,2.474,41,2.953,42,2.953,43,2.953,44,2.953,45,1.129,46,1.735,47,0.261,48,0.193,49,0.019,50,0.019]],["title/controllers/AuthenticationController.html",[51,1.342,52,2.11]],["body/controllers/AuthenticationController.html",[7,0.03,14,0.163,15,0.141,16,0.141,19,0.671,20,0.285,29,0.901,45,0.705,47,0.163,48,0.12,49,0.013,50,0.013,51,0.763,52,1.896,53,1.544,54,1.2,55,1.544,56,0.285,57,0.952,58,2.912,59,1.874,60,2.912,61,2.912,62,1.556,63,2.44,64,1.843,65,3.055,66,2.387,67,1.843,68,1.155,69,1.843,70,1.578,71,1.351,72,0.904,73,1.578,74,2.835,75,1.46,76,1.843,77,1.843,78,1.843,79,1.308,80,1.843,81,1.843,82,1.843,83,1.843,84,1.843,85,1.843,86,1.544,87,2.409,88,2.912,89,1.843,90,2.44,91,1.347,92,1.544,93,1.843,94,1.347,95,1.347,96,1.765,97,1.347,98,1.275,99,1.083,100,1.765,101,0.828,102,1.347,103,1.544,104,1.2,105,1.843,106,2.129,107,0.985,108,2.912,109,1.2,110,0.901,111,1.843,112,1.544,113,1.347,114,1.843,115,0.763,116,1.765,117,1.494,118,1.843,119,2.431,120,2.133,121,2.006,122,1.843,123,1.843,124,1.843,125,1.449,126,2.912,127,1.843,128,1.843,129,1.843,130,4.101,131,1.843,132,1.843,133,1.843,134,1.843,135,1.843,136,1.843,137,2.912,138,2.639,139,1.843,140,2.44,141,2.129,142,1.843,143,1.843,144,1.843,145,1.843,146,1.843,147,2.912,148,2.129,149,1.843,150,1.843,151,1.843,152,1.843,153,2.912,154,1.843,155,1.843,156,1.843,157,1.843]],["title/modules/AuthenticationModule.html",[0,1.239,6,1.904]],["body/modules/AuthenticationModule.html",[0,1.436,2,1.158,3,1.689,6,3.683,7,0.03,9,2.891,10,2.645,11,2.009,12,1.378,13,1.378,14,0.228,15,0.197,16,0.197,18,2.888,19,0.76,20,0.399,22,2.888,23,0.985,29,1.261,30,2.16,45,1.436,46,2.208,47,0.228,48,0.168,49,0.017,50,0.017,52,2.888,59,0.911,62,1.378,96,2.645,97,1.885,101,1.158,158,2.16,159,2.16,160,2.578,161,3.177,162,3.177,163,3.177,164,2.578,165,3.758,166,1.158,167,2.16,168,2.578,169,2.578,170,2.578,171,2.578,172,2.578,173,2.16,174,1.515,175,2.383,176,2.578,177,2.578,178,2.578,179,1.885,180,2.578,181,2.578,182,1.885,183,2.578]],["title/injectables/AuthenticationService.html",[96,1.585,184,0.455]],["body/injectables/AuthenticationService.html",[7,0.03,14,0.129,15,0.112,16,0.112,19,0.597,20,0.226,23,0.558,28,0.788,37,1.222,47,0.129,48,0.095,49,0.011,50,0.011,55,1.222,56,0.226,57,0.788,59,1.728,62,0.78,63,2.02,68,1.167,70,1.507,71,1.29,72,0.863,73,1.507,75,1.394,79,1.083,86,2.02,87,2.101,90,2.02,96,1.179,98,1.507,99,0.857,103,1.222,110,1.749,115,0.998,116,2.086,117,1.275,119,2.392,120,1.384,121,1.937,125,1.399,138,2.252,140,2.02,141,1.762,174,0.857,175,2.207,179,1.762,182,1.762,184,0.338,185,0.516,186,1.222,187,4.645,188,2.411,189,3.577,190,2.411,191,2.411,192,3.08,193,1.222,194,3.781,195,1.459,196,2.411,197,2.456,198,4.265,199,1.459,200,1.459,201,2.411,202,2.777,203,1.459,204,2.329,205,2.411,206,1.459,207,1.459,208,1.459,209,4.265,210,1.459,211,3.318,212,1.222,213,1.222,214,1.222,215,1.222,216,2.02,217,1.067,218,1.222,219,1.222,220,2.252,221,1.459,222,1.646,223,1.067,224,0.95,225,1.459,226,1.067,227,2.02,228,2.411,229,1.459,230,0.95,231,1.459,232,2.02,233,1.459,234,1.459,235,2.329,236,2.101,237,1.222,238,1.459,239,3.08,240,1.459,241,1.459,242,3.08,243,1.459,244,1.222,245,1.459,246,2.411,247,2.411,248,3.577,249,3.577,250,3.577,251,2.411,252,1.57,253,2.02,254,1.459,255,1.459,256,1.459,257,2.411,258,1.459,259,1.459,260,1.459,261,1.459,262,2.411]],["title/classes/ConfirmEmailDto.html",[48,0.211,263,2.11]],["body/classes/ConfirmEmailDto.html",[7,0.029,14,0.368,15,0.319,16,0.319,19,0.526,47,0.368,48,0.339,49,0.024,50,0.024,56,0.644,66,2.224,68,1.076,72,0.842,101,2.336,110,2.774,197,2.336,263,3.386,264,2.71,265,4.357,266,3.487,267,1.988,268,3.487,269,4.161,270,4.357,271,4.357,272,3.042]],["title/classes/CreateUserDto.html",[48,0.211,273,2.11]],["body/classes/CreateUserDto.html",[7,0.029,14,0.357,15,0.31,16,0.31,28,1.83,47,0.357,48,0.264,49,0.023,50,0.023,56,0.625,68,1.447,71,1.693,72,1.133,197,2.783,230,3.645,264,2.633,267,1.952,273,3.326,274,4.927,275,3.387,276,4.043,277,4.043,278,4.043]],["title/guards/EmailConfirmationGuard.html",[279,2.369,280,2.11]],["body/guards/EmailConfirmationGuard.html",[7,0.03,14,0.322,15,0.279,16,0.279,19,0.604,20,0.564,28,1.192,47,0.322,48,0.238,49,0.022,50,0.022,56,0.564,57,1.562,65,2.554,68,0.943,70,1.288,71,1.103,72,0.738,73,1.288,74,1.949,75,1.192,112,3.055,113,2.665,119,1.783,125,1.288,184,0.67,235,2.374,236,2.142,280,3.112,281,3.646,282,3.493,283,3.055,284,5.656,285,4.778,286,5.656,287,3.646,288,3.646,289,3.646,290,3.646,291,3.646,292,3.646,293,3.646,294,3.646,295,3.646,296,2.374]],["title/controllers/EmailController.html",[51,1.342,297,2.11]],["body/controllers/EmailController.html",[7,0.03,14,0.318,15,0.276,16,0.276,19,0.67,20,0.557,28,1.549,45,1.376,47,0.318,48,0.235,49,0.022,50,0.022,51,1.49,54,2.344,56,0.557,57,1.549,59,1.872,66,1.924,68,0.931,70,1.272,71,1.089,72,0.729,73,1.272,75,1.177,79,1.617,91,2.632,94,2.632,117,1.49,121,1.761,125,1.272,297,3.086,298,3.016,299,3.97,300,3.6,301,4.438,302,4.738,303,3.6,304,3.97,305,2.59,306,3.016,307,3.016,308,3.016,309,3.016,310,2.344,311,3.6,312,3.6,313,3.6]],["title/modules/EmailModule.html",[0,1.239,8,1.732]],["body/modules/EmailModule.html",[0,1.816,2,1.624,3,2.135,7,0.03,8,3.275,11,2.54,12,1.932,13,1.932,14,0.319,15,0.277,16,0.277,18,2.354,19,0.713,20,0.559,22,3.094,23,1.382,45,1.816,46,2.792,47,0.319,48,0.236,49,0.022,50,0.022,175,1.768,297,3.456,305,3.148,306,3.029,314,3.029,315,3.029,316,3.029,317,3.615,318,3.473,319,3.615]],["title/injectables/EmailService.html",[184,0.455,305,1.585]],["body/injectables/EmailService.html",[7,0.03,14,0.276,15,0.239,16,0.239,19,0.672,20,0.484,23,1.195,47,0.276,48,0.204,49,0.02,50,0.02,56,0.484,57,1.408,68,1.275,70,1.522,71,1.303,72,0.998,73,1.522,75,1.022,115,1.294,116,2.411,117,1.294,120,1.404,125,1.104,175,2.817,184,0.604,185,1.104,267,1.647,296,2.035,299,3.609,301,4.13,305,2.107,307,4.13,308,2.619,310,2.035,320,2.619,321,4.93,322,2.619,323,4.308,324,4.308,325,3.125,326,4.308,327,4.308,328,2.619,329,3.125,330,3.125,331,3.125,332,3.125,333,3.125,334,3.125,335,3.125,336,4.308,337,3.125,338,3.125,339,3.125]],["title/controllers/EmailVerificationController.html",[51,1.342,340,2.11]],["body/controllers/EmailVerificationController.html",[7,0.03,14,0.248,15,0.215,16,0.215,19,0.677,20,0.434,28,1.521,29,2.275,45,1.073,47,0.248,48,0.183,49,0.018,50,0.018,51,1.162,54,1.828,56,0.434,57,1.306,59,1.967,65,2.709,66,2.135,68,1.033,70,1.412,71,1.208,72,0.809,73,1.412,74,2.135,75,1.306,91,2.052,92,2.352,94,2.052,95,2.052,100,1.954,101,2.09,102,2.052,106,2.052,107,1.5,113,2.052,115,1.162,116,1.373,117,1.162,119,1.373,121,2.275,148,2.052,263,3.301,309,2.352,340,2.602,341,2.352,342,3.995,343,3.348,344,3.348,345,2.807,346,3.995,347,2.807,348,3.995,349,2.807,350,3.995,351,3.348,352,2.807,353,2.807,354,2.807,355,2.807,356,2.807,357,2.807,358,1.649,359,2.052,360,2.807,361,2.807,362,2.807,363,2.807,364,2.807,365,2.807,366,2.807,367,2.807,368,2.807]],["title/modules/EmailVerificationModule.html",[0,1.239,9,1.732]],["body/modules/EmailVerificationModule.html",[0,1.647,2,1.404,3,1.936,7,0.03,8,3.079,9,3.335,10,2.817,11,2.303,12,1.67,13,1.67,14,0.276,15,0.239,16,0.239,18,2.805,19,0.747,20,0.484,22,2.805,23,1.195,28,1.408,29,1.529,45,1.647,46,2.531,47,0.276,48,0.204,49,0.02,50,0.02,100,3.077,101,1.404,102,2.285,167,2.619,173,3.609,174,1.836,318,3.149,340,3.21,369,2.619,370,2.619,371,2.619,372,3.125,373,3.125,374,3.125,375,3.125]],["title/injectables/EmailVerificationService.html",[100,1.585,184,0.455]],["body/injectables/EmailVerificationService.html",[7,0.03,14,0.155,15,0.134,16,0.134,19,0.588,20,0.272,23,0.671,28,1.594,29,2.273,39,1.471,40,1.471,47,0.155,48,0.115,49,0.013,50,0.013,56,0.272,57,0.916,59,1.845,68,1.128,70,1.541,71,1.319,72,0.883,73,1.541,75,1.304,79,0.789,98,1.723,99,1.032,100,1.37,101,2.088,110,2.132,115,1.16,116,1.952,117,1.652,119,2.385,120,1.259,121,2.132,125,0.99,174,1.032,175,2.385,179,2.048,182,1.284,184,0.393,185,0.621,187,4.662,194,3.894,197,2.346,202,2.277,204,1.144,220,1.284,224,1.144,227,1.471,232,1.471,235,2.84,236,2.562,237,2.348,244,1.471,252,2.599,253,1.471,305,2.385,343,1.471,344,2.348,351,2.929,376,1.471,377,2.802,378,2.802,379,2.802,380,1.756,381,1.756,382,2.802,383,1.756,384,2.802,385,1.756,386,2.802,387,1.756,388,2.802,389,1.756,390,2.802,391,1.825,392,1.756,393,1.756,394,2.802,395,2.802,396,1.756,397,1.756,398,1.756,399,2.802,400,1.756,401,1.756,402,1.756,403,1.756,404,1.471,405,1.756,406,1.756,407,1.756,408,2.802,409,3.496,410,2.802,411,1.756,412,1.756,413,1.756,414,1.756,415,1.756,416,1.756,417,1.756,418,1.756,419,1.756,420,1.756]],["title/injectables/JwtAuthenticationGuard.html",[107,1.732,184,0.455]],["body/injectables/JwtAuthenticationGuard.html",[7,0.029,14,0.397,15,0.344,16,0.344,19,0.689,20,0.695,47,0.397,48,0.293,49,0.025,50,0.025,107,2.912,166,2.017,184,0.764,185,1.586,358,2.638,421,3.282,422,3.282,423,2.196,424,3.762]],["title/injectables/JwtRefreshGuard.html",[109,2.11,184,0.455]],["body/injectables/JwtRefreshGuard.html",[7,0.029,14,0.39,15,0.338,16,0.338,19,0.683,20,0.684,47,0.39,48,0.288,49,0.025,50,0.025,62,2.362,109,3.515,110,2.64,166,1.986,184,0.757,185,1.562,358,2.597,422,3.231,423,2.162,424,3.703,425,3.703]],["title/injectables/JwtRefreshTokenStrategy.html",[161,1.904,184,0.455]],["body/injectables/JwtRefreshTokenStrategy.html",[7,0.03,14,0.234,15,0.203,16,0.203,19,0.712,20,0.41,23,1.013,47,0.234,48,0.173,49,0.018,50,0.018,56,0.41,57,1.253,59,1.592,62,2.639,68,0.991,70,1.355,71,1.16,72,0.776,73,1.355,74,3.01,75,0.866,79,1.191,98,1.744,99,1.557,110,1.296,115,1.587,116,1.875,117,1.587,119,1.875,120,1.723,121,1.296,125,1.355,141,1.937,161,2.253,166,1.191,175,2.67,184,0.538,185,0.936,222,2.639,223,1.937,224,1.726,252,2.934,296,1.726,322,2.22,423,1.296,426,3.774,427,2.22,428,2.803,429,4.505,430,2.65,431,3.834,432,2.65,433,2.22,434,2.803,435,1.726,436,2.803,437,2.803,438,1.726,439,1.937,440,2.22,441,2.22,442,2.65,443,2.22,444,2.65,445,2.65,446,3.212,447,2.65,448,2.65,449,2.65,450,2.22]],["title/injectables/JwtStrategy.html",[162,1.904,184,0.455]],["body/injectables/JwtStrategy.html",[7,0.03,14,0.262,15,0.227,16,0.227,19,0.736,20,0.458,23,1.132,47,0.262,48,0.193,49,0.019,50,0.019,56,0.458,57,1.357,59,1.693,68,1.073,70,1.467,71,1.255,72,0.84,73,1.467,74,2.561,75,0.968,79,1.331,98,2.002,99,1.741,115,1.718,116,2.03,117,1.718,125,1.467,162,2.439,166,1.331,175,2.845,184,0.582,185,1.047,193,2.482,222,2.775,223,2.166,224,1.929,252,1.929,423,1.449,428,3.034,433,2.482,434,2.166,435,1.929,436,2.166,437,2.166,438,1.929,439,2.166,440,2.482,441,2.482,443,2.482,451,2.482,452,2.963,453,4.151,454,2.963,455,2.482,456,2.963,457,2.963,458,2.963]],["title/injectables/LocalAuthenticationGuard.html",[104,2.11,184,0.455]],["body/injectables/LocalAuthenticationGuard.html",[7,0.029,14,0.397,15,0.344,16,0.344,19,0.689,20,0.695,47,0.397,48,0.293,49,0.025,50,0.025,104,3.548,166,2.017,184,0.764,185,1.586,421,3.282,422,3.282,423,2.196,459,3.762,460,4.49]],["title/injectables/LocalStrategy.html",[163,1.904,184,0.455]],["body/injectables/LocalStrategy.html",[7,0.03,14,0.287,15,0.248,16,0.248,19,0.714,20,0.502,28,1.445,47,0.287,48,0.212,49,0.02,50,0.02,56,0.502,57,1.445,59,1.776,68,1.143,70,1.562,71,1.337,72,0.895,73,1.562,75,1.06,96,2.849,97,2.372,115,1.343,120,1.458,125,1.146,163,2.596,166,1.458,184,0.62,185,1.146,197,2.618,230,3.515,310,2.113,423,1.587,428,3.231,434,2.372,435,2.113,437,2.372,439,2.372,455,2.718,461,2.718,462,3.244,463,3.244,464,4.419,465,3.244,466,4.419,467,2.718,468,2.113,469,3.244,470,3.244]],["title/classes/RegisterDto.html",[48,0.211,87,1.904]],["body/classes/RegisterDto.html",[7,0.03,14,0.326,15,0.283,16,0.283,19,0.467,28,1.753,47,0.326,48,0.314,49,0.022,50,0.022,56,0.571,66,2.867,68,1.387,71,1.622,72,1.086,87,2.831,197,2.717,230,3.493,264,2.405,267,1.842,268,3.094,270,4.493,271,4.493,272,2.7,471,3.094,472,5.363,473,3.693,474,3.693,475,3.693,476,3.693,477,3.693,478,3.693]],["title/interfaces/RequestWithUser.html",[65,1.732,479,1.585]],["body/interfaces/RequestWithUser.html",[7,0.03,14,0.369,15,0.32,16,0.32,19,0.66,47,0.369,49,0.024,50,0.024,56,0.647,65,2.788,72,0.846,74,3.038,120,2.877,267,1.994,359,3.057,423,2.551,438,2.723,468,2.723,479,2.045,480,2.723,481,3.504]],["title/interfaces/TokenPayload.html",[222,1.732,479,1.585]],["body/interfaces/TokenPayload.html",[7,0.029,14,0.397,15,0.344,16,0.344,47,0.397,49,0.025,50,0.025,56,0.695,72,0.909,202,3.821,204,3.973,222,2.912,267,2.083,479,2.196,480,2.924,482,3.762,483,3.282]],["title/controllers/UsersController.html",[51,1.342,484,2.11]],["body/controllers/UsersController.html",[7,0.03,14,0.321,15,0.278,16,0.278,19,0.714,20,0.562,45,1.388,47,0.321,48,0.237,49,0.022,50,0.022,51,1.503,54,2.364,56,0.562,57,1.557,59,1.879,66,1.94,68,0.939,75,1.557,79,1.631,95,2.654,98,1.879,106,2.654,107,1.94,117,1.503,125,1.283,148,2.654,280,2.364,282,2.654,310,2.364,358,2.133,484,3.103,485,3.042,486,4.765,487,5.647,488,3.631,489,3.631,490,3.042,491,3.631,492,3.631,493,3.631,494,3.631,495,3.631]],["title/modules/UsersModule.html",[0,1.239,10,1.585]],["body/modules/UsersModule.html",[0,1.858,2,1.681,3,2.184,7,0.03,10,3.021,11,2.597,12,2,13,2,14,0.33,15,0.286,16,0.286,19,0.683,20,0.579,45,1.858,46,2.855,47,0.33,48,0.244,49,0.022,50,0.022,98,2.286,318,3.552,484,3.515,490,3.135,496,3.135,497,3.135,498,3.135,499,3.742,500,3.742]],["title/injectables/UsersService.html",[98,1.145,184,0.455]],["body/injectables/UsersService.html",[7,0.03,14,0.145,15,0.126,16,0.126,19,0.485,20,0.254,28,1.377,47,0.145,48,0.107,49,0.012,50,0.012,56,0.254,57,0.868,59,2.123,68,1.32,70,1.677,71,1.435,72,1,73,1.677,75,1.551,79,2.026,98,0.938,115,1.383,119,2.321,120,2.455,121,2.416,125,1.593,184,0.372,185,0.58,197,2.455,202,3.558,204,2.176,211,2.799,212,1.375,213,1.375,214,1.375,215,1.375,216,2.224,217,1.2,226,1.2,235,1.728,236,2.476,267,1.014,273,2.499,296,1.069,304,3.216,446,2.799,450,1.375,468,1.069,501,1.375,502,3.341,503,2.654,504,2.654,505,2.654,506,2.654,507,2.654,508,2.654,509,2.654,510,2.654,511,2.654,512,1.641,513,2.654,514,2.654,515,1.641,516,2.654,517,1.641,518,5.103,519,2.654,520,1.641,521,2.654,522,1.641,523,2.654,524,1.641,525,2.654,526,1.641,527,3.838,528,1.641,529,1.641,530,1.641,531,2.654,532,2.654,533,2.654,534,1.641,535,2.654,536,3.341,537,3.341,538,1.641,539,2.654,540,1.641,541,1.641,542,2.654,543,1.641,544,1.641,545,1.641]],["title/interfaces/VerificationTokenPayload.html",[391,2.11,479,1.585]],["body/interfaces/VerificationTokenPayload.html",[7,0.029,14,0.394,15,0.342,16,0.342,28,1.991,47,0.394,49,0.025,50,0.025,56,0.691,72,0.904,101,2.007,197,2.63,267,2.076,391,3.537,479,2.184,480,2.908,483,3.265,546,3.742]],["title/coverage.html",[547,3.228]],["body/coverage.html",[7,0.03,16,0.201,29,1.862,48,0.292,49,0.017,50,0.017,51,2.035,52,1.71,53,2.2,62,1.403,65,1.403,72,0.531,87,1.543,96,1.284,98,0.928,100,1.284,101,2.209,104,1.71,107,1.403,109,1.71,110,1.284,161,1.543,162,1.543,163,1.543,184,0.835,186,2.2,222,1.403,236,1.543,263,1.71,265,2.2,266,2.2,273,1.71,274,2.2,275,2.2,279,1.919,280,1.71,282,1.919,283,2.2,297,1.71,298,2.2,305,1.284,320,2.2,340,1.71,341,2.2,358,2.237,359,1.919,376,2.2,391,1.71,421,2.784,425,2.2,426,2.2,427,2.2,451,2.2,459,2.2,461,2.2,471,2.2,479,2.192,481,2.2,482,2.2,483,2.784,484,1.71,485,2.2,501,2.2,546,2.2,547,1.919,548,2.626,549,2.626,550,2.626,551,6.449,552,3.808,553,2.626,554,4.481,555,5.615,556,4.915,557,4.915,558,2.2,559,2.626,560,2.2,561,2.626,562,2.626,563,2.626]],["title/dependencies.html",[3,1.75,564,2.27]],["body/dependencies.html",[3,1.659,7,0.03,20,0.571,23,1.412,25,3.094,48,0.314,49,0.022,50,0.022,138,2.7,166,1.659,174,2.17,217,2.7,272,2.7,328,3.094,435,3.493,436,2.7,438,2.405,467,3.094,468,2.405,565,3.693,566,5.363,567,3.693,568,3.693,569,3.693,570,3.693,571,3.693,572,3.693,573,3.693,574,3.693,575,3.693,576,3.693,577,3.693,578,3.693,579,3.693,580,3.693,581,3.693,582,3.693,583,3.693,584,3.693,585,3.693,586,3.693,587,3.693,588,3.693,589,3.693]],["title/miscellaneous/enumerations.html",[590,1.765,591,3.264]],["body/miscellaneous/enumerations.html",[7,0.027,49,0.026,50,0.026,56,0.729,218,4.7,219,3.948,220,4.101,590,3.069,591,3.948,592,4.713,593,5.61,594,4.713,595,4.713,596,4.713]],["title/miscellaneous/functions.html",[590,1.765,597,3.264]],["body/miscellaneous/functions.html",[7,0.026,49,0.026,50,0.026,56,0.758,558,4.107,560,5.102,590,3.192,597,4.107,598,4.902]],["title/index.html",[56,0.419,599,2.71,600,2.71]],["body/index.html",[7,0.03,15,0.253,49,0.02,50,0.02,404,2.771,547,2.417,601,3.307,602,3.307,603,4.477,604,3.307,605,3.307,606,3.307,607,3.307,608,3.307,609,3.307,610,2.771,611,5.076,612,3.307,613,3.307,614,3.307,615,3.307,616,5.992,617,3.307,618,3.307,619,3.307,620,5.86,621,3.307,622,3.307,623,4.477,624,3.307,625,3.307,626,3.307,627,3.307,628,4.477,629,4.477,630,3.307,631,3.307,632,3.307,633,4.477,634,4.477,635,3.307,636,3.307,637,3.307,638,3.307,639,3.307,640,2.771,641,3.307,642,3.307,643,3.307,644,3.307,645,3.307,646,3.307,647,3.307,648,3.307,649,3.307,650,2.771,651,3.307,652,3.307,653,3.307,654,3.307,655,3.307,656,3.307,657,2.771]],["title/modules.html",[2,1.984]],["body/modules.html",[1,2.893,2,1.996,6,2.61,7,0.025,8,2.375,9,2.375,10,2.173,49,0.025,50,0.025,640,5.221,658,6.232,659,6.232,660,6.232]],["title/overview.html",[661,3.7]],["body/overview.html",[1,3.946,2,1.278,3,1.812,4,2.383,5,2.383,6,3.716,7,0.03,8,3.073,9,3.276,10,2.873,11,2.156,12,1.52,13,1.52,45,1.087,49,0.018,50,0.018,96,2.292,98,2.032,100,2.812,158,2.383,159,2.383,161,2.753,162,2.753,163,2.753,185,1.005,226,2.079,264,1.852,279,2.079,305,2.812,314,2.383,315,2.383,316,2.383,369,2.383,370,2.383,371,2.383,480,1.852,496,2.383,497,2.383,498,2.383,661,2.383,662,2.844,663,2.844,664,4.033,665,2.844]],["title/properties.html",[267,1.489,564,2.27]],["body/properties.html",[7,0.03,49,0.026,50,0.026,267,1.842,610,4.038,650,4.038,657,4.038,666,4.819,667,4.819,668,4.819]]],"invertedIndex":[["",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateUserDto.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":551,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":667,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":585,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":576,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":575,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":580,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":556,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":561,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":555,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":557,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":554,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":552,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":553,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":665,"title":{},"body":{"overview.html":{}}}],["1.0.0",{"_index":582,"title":{},"body":{"dependencies.html":{}}}],["1.4.6",{"_index":578,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":226,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["17.1.1",{"_index":565,"title":{},"body":{"dependencies.html":{}}}],["2.1.0",{"_index":567,"title":{},"body":{"dependencies.html":{}}}],["23505",{"_index":596,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["3",{"_index":664,"title":{},"body":{"overview.html":{}}}],["3.0.2",{"_index":587,"title":{},"body":{"dependencies.html":{}}}],["3.15.2",{"_index":572,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":663,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":581,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":662,"title":{},"body":{"overview.html":{}}}],["5.0.1",{"_index":573,"title":{},"body":{"dependencies.html":{}}}],["6.7.5",{"_index":579,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":589,"title":{},"body":{"dependencies.html":{}}}],["8.0.0",{"_index":566,"title":{},"body":{"dependencies.html":{}}}],["8.0.1",{"_index":569,"title":{},"body":{"dependencies.html":{}}}],["8.2.2",{"_index":570,"title":{},"body":{"dependencies.html":{}}}],["accesstokencookie",{"_index":130,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["action",{"_index":495,"title":{},"body":{"controllers/UsersController.html":{}}}],["address",{"_index":402,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["age=${this.configservice.get",{"_index":257,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["age=0",{"_index":251,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["already",{"_index":237,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{}}}],["amazing",{"_index":641,"title":{},"body":{"index.html":{}}}],["app",{"_index":618,"title":{},"body":{"index.html":{}}}],["application",{"_index":401,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["applications",{"_index":609,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["async",{"_index":59,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"controllers/EmailController.html":{},"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":335,"title":{},"body":{"injectables/EmailService.html":{}}}],["authenticate",{"_index":58,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["authenticate(@req",{"_index":157,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["authenticate(request",{"_index":64,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["authentication",{"_index":55,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["authentication.controller",{"_index":168,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["authentication.guard",{"_index":106,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailVerificationController.html":{},"controllers/UsersController.html":{}}}],["authentication.guard.ts",{"_index":421,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/LocalAuthenticationGuard.html":{},"coverage.html":{}}}],["authentication.service",{"_index":97,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/LocalStrategy.html":{}}}],["authentication/authentication.module",{"_index":26,"title":{},"body":{"modules/AppModule.html":{}}}],["authentication=${token",{"_index":256,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["authenticationcontroller",{"_index":52,"title":{"controllers/AuthenticationController.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"coverage.html":{}}}],["authenticationmodule",{"_index":6,"title":{"modules/AuthenticationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules.html":{},"overview.html":{}}}],["authenticationservice",{"_index":96,"title":{"injectables/AuthenticationService.html":{}},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["authguard",{"_index":422,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/LocalAuthenticationGuard.html":{}}}],["authguard('jwt",{"_index":424,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{}}}],["authguard('local",{"_index":460,"title":{},"body":{"injectables/LocalAuthenticationGuard.html":{}}}],["author",{"_index":650,"title":{},"body":{"index.html":{},"properties.html":{}}}],["await",{"_index":121,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/EmailController.html":{},"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/UsersService.html":{}}}],["backers",{"_index":642,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":390,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["badrequestexception('bad",{"_index":420,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["badrequestexception('email",{"_index":409,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["bcrypt",{"_index":217,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["bcryptcompare",{"_index":216,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["bcrypthash",{"_index":214,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["bcrypthash(refreshtoken",{"_index":545,"title":{},"body":{"injectables/UsersService.html":{}}}],["bcrypthash(registrationdata.password",{"_index":225,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["body",{"_index":91,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailController.html":{},"controllers/EmailVerificationController.html":{}}}],["boolean",{"_index":289,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["bootstrap",{"_index":560,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":660,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":658,"title":{},"body":{"modules.html":{}}}],["building",{"_index":604,"title":{},"body":{"index.html":{}}}],["canactivate",{"_index":284,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["canactivate(context",{"_index":285,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["catch",{"_index":232,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{}}}],["class",{"_index":48,"title":{"classes/ConfirmEmailDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateUserDto.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/RegisterDto.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":264,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"classes/CreateUserDto.html":{},"classes/RegisterDto.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":354,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["click",{"_index":403,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["cluster_appmodule",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule",{"_index":158,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_authenticationmodule_imports",{"_index":160,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["cluster_authenticationmodule_providers",{"_index":159,"title":{},"body":{"modules/AuthenticationModule.html":{},"overview.html":{}}}],["cluster_emailmodule",{"_index":314,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_exports",{"_index":315,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailmodule_providers",{"_index":316,"title":{},"body":{"modules/EmailModule.html":{},"overview.html":{}}}],["cluster_emailverificationmodule",{"_index":369,"title":{},"body":{"modules/EmailVerificationModule.html":{},"overview.html":{}}}],["cluster_emailverificationmodule_exports",{"_index":370,"title":{},"body":{"modules/EmailVerificationModule.html":{},"overview.html":{}}}],["cluster_emailverificationmodule_imports",{"_index":372,"title":{},"body":{"modules/EmailVerificationModule.html":{}}}],["cluster_emailverificationmodule_providers",{"_index":371,"title":{},"body":{"modules/EmailVerificationModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":496,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":497,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_providers",{"_index":498,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["code.enum",{"_index":221,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["code.enum.ts",{"_index":593,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["compare",{"_index":215,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["configmodule",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailModule.html":{},"modules/EmailVerificationModule.html":{}}}],["configmodule.forroot",{"_index":31,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":175,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('jwt_access_secret",{"_index":180,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["configservice.get('jwt_access_token_expires_in",{"_index":183,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["configservice.get('jwt_access_token_secret",{"_index":457,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["configservice.get('jwt_refresh_token_secret",{"_index":444,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["confirm",{"_index":343,"title":{},"body":{"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{}}}],["confirm(@body",{"_index":365,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["confirm(confirmationdata",{"_index":345,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["confirmation",{"_index":351,"title":{},"body":{"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{}}}],["confirmation.guard",{"_index":491,"title":{},"body":{"controllers/UsersController.html":{}}}],["confirmation.guard.ts",{"_index":283,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"coverage.html":{}}}],["confirmation.guard.ts:11",{"_index":287,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["confirmationdata",{"_index":348,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["confirmationdata.token",{"_index":367,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["confirmed",{"_index":410,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["confirmemail",{"_index":377,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["confirmemail(email",{"_index":382,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["confirmemaildto",{"_index":263,"title":{"classes/ConfirmEmailDto.html":{}},"body":{"classes/ConfirmEmailDto.html":{},"controllers/EmailVerificationController.html":{},"coverage.html":{}}}],["console.log('refresh",{"_index":145,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["console.log(cookies",{"_index":154,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["const",{"_index":119,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":115,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["constructor(authenticationservice",{"_index":462,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["constructor(configservice",{"_index":322,"title":{},"body":{"injectables/EmailService.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["constructor(jwtservice",{"_index":380,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["constructor(private",{"_index":310,"title":{},"body":{"controllers/EmailController.html":{},"injectables/EmailService.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{}}}],["constructor(usersservice",{"_index":193,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtStrategy.html":{}}}],["context",{"_index":288,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":292,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["controller",{"_index":51,"title":{"controllers/AuthenticationController.html":{},"controllers/EmailController.html":{},"controllers/EmailVerificationController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailController.html":{},"controllers/EmailVerificationController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('authentication",{"_index":114,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["controller('email",{"_index":309,"title":{},"body":{"controllers/EmailController.html":{},"controllers/EmailVerificationController.html":{}}}],["controller('users",{"_index":492,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["cookie",{"_index":138,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"dependencies.html":{}}}],["cookies",{"_index":152,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["coverage",{"_index":547,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":503,"title":{},"body":{"injectables/UsersService.html":{}}}],["create(userdata",{"_index":511,"title":{},"body":{"injectables/UsersService.html":{}}}],["createdat",{"_index":541,"title":{},"body":{"injectables/UsersService.html":{}}}],["createduser",{"_index":228,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["createduser.password",{"_index":231,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["createtransport",{"_index":327,"title":{},"body":{"injectables/EmailService.html":{}}}],["createuserdto",{"_index":273,"title":{"classes/CreateUserDto.html":{}},"body":{"classes/CreateUserDto.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["credentials",{"_index":246,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["currenthashedrefreshtoken",{"_index":537,"title":{},"body":{"injectables/UsersService.html":{}}}],["data",{"_index":304,"title":{},"body":{"controllers/EmailController.html":{},"injectables/UsersService.html":{}}}],["database_url",{"_index":34,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":542,"title":{},"body":{"injectables/UsersService.html":{}}}],["decodeconfirmationtoken",{"_index":378,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["decodeconfirmationtoken(token",{"_index":384,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["decorators",{"_index":66,"title":{},"body":{"controllers/AuthenticationController.html":{},"classes/ConfirmEmailDto.html":{},"controllers/EmailController.html":{},"controllers/EmailVerificationController.html":{},"classes/RegisterDto.html":{},"controllers/UsersController.html":{}}}],["defined",{"_index":68,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateUserDto.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/RegisterDto.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailModule.html":{},"modules/EmailVerificationModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":610,"title":{},"body":{"index.html":{},"properties.html":{}}}],["development",{"_index":619,"title":{},"body":{"index.html":{}}}],["documentation",{"_index":548,"title":{},"body":{"coverage.html":{}}}],["dto/confirm",{"_index":356,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["dto/create",{"_index":528,"title":{},"body":{"injectables/UsersService.html":{}}}],["dto/register.dto",{"_index":103,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["e2e",{"_index":630,"title":{},"body":{"index.html":{}}}],["efficient",{"_index":605,"title":{},"body":{"index.html":{}}}],["email",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"injectables/LocalStrategy.html":{},"classes/RegisterDto.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{}}}],["email.controller",{"_index":319,"title":{},"body":{"modules/EmailModule.html":{}}}],["email.dto",{"_index":357,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["email.dto.ts",{"_index":266,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"coverage.html":{}}}],["email.dto.ts:6",{"_index":269,"title":{},"body":{"classes/ConfirmEmailDto.html":{}}}],["email.service",{"_index":306,"title":{},"body":{"controllers/EmailController.html":{},"modules/EmailModule.html":{}}}],["email/email.module",{"_index":27,"title":{},"body":{"modules/AppModule.html":{}}}],["email_confirmation_url",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailVerificationService.html":{}}}],["email_password",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["email_port",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["email_service",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["email_user",{"_index":43,"title":{},"body":{"modules/AppModule.html":{}}}],["email_verification_token_expiration_time",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"injectables/EmailVerificationService.html":{}}}],["email_verification_token_secret",{"_index":38,"title":{},"body":{"modules/AppModule.html":{}}}],["emailconfirmationguard",{"_index":280,"title":{"guards/EmailConfirmationGuard.html":{}},"body":{"guards/EmailConfirmationGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["emailconfirmationservice",{"_index":361,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["emailcontroller",{"_index":297,"title":{"controllers/EmailController.html":{}},"body":{"controllers/EmailController.html":{},"modules/EmailModule.html":{},"coverage.html":{}}}],["emailmodule",{"_index":8,"title":{"modules/EmailModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EmailModule.html":{},"modules/EmailVerificationModule.html":{},"modules.html":{},"overview.html":{}}}],["emailservice",{"_index":305,"title":{"injectables/EmailService.html":{}},"body":{"controllers/EmailController.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"injectables/EmailVerificationService.html":{},"coverage.html":{},"overview.html":{}}}],["emailverificationcontroller",{"_index":340,"title":{"controllers/EmailVerificationController.html":{}},"body":{"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"coverage.html":{}}}],["emailverificationmodule",{"_index":9,"title":{"modules/EmailVerificationModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailVerificationModule.html":{},"modules.html":{},"overview.html":{}}}],["emailverificationservice",{"_index":100,"title":{"injectables/EmailVerificationService.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"coverage.html":{},"overview.html":{}}}],["enumerations",{"_index":591,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":220,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{},"miscellaneous/enumerations.html":{}}}],["error?.code",{"_index":233,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["error?.name",{"_index":417,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["executioncontext",{"_index":286,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["exist",{"_index":532,"title":{},"body":{"injectables/UsersService.html":{}}}],["exists",{"_index":238,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["expired",{"_index":419,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["expiresin",{"_index":182,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{}}}],["export",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateUserDto.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{}}}],["exports",{"_index":318,"title":{},"body":{"modules/EmailModule.html":{},"modules/EmailVerificationModule.html":{},"modules/UsersModule.html":{}}}],["express",{"_index":438,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{},"dependencies.html":{}}}],["extends",{"_index":423,"title":{},"body":{"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"interfaces/RequestWithUser.html":{}}}],["extractjwt",{"_index":433,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["extractjwt.fromextractors",{"_index":441,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["file",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateUserDto.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["first",{"_index":295,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["framework",{"_index":603,"title":{},"body":{"index.html":{}}}],["function",{"_index":559,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":597,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["get('/getallusers",{"_index":493,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/getallusers')@useguards(emailconfirmationguard)@useguards(jwtauthenticationguard",{"_index":488,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('refresh",{"_index":143,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["getallusers",{"_index":487,"title":{},"body":{"controllers/UsersController.html":{}}}],["getauthenticateduser",{"_index":188,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getauthenticateduser(email",{"_index":196,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getbyemail",{"_index":504,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyemail(email",{"_index":514,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyid",{"_index":505,"title":{},"body":{"injectables/UsersService.html":{}}}],["getbyid(id",{"_index":516,"title":{},"body":{"injectables/UsersService.html":{}}}],["getcookiesforlogout",{"_index":189,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtaccesstoken",{"_index":190,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtaccesstoken(userid",{"_index":201,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtrefreshtoken",{"_index":191,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getcookiewithjwtrefreshtoken(userid",{"_index":205,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["getting",{"_index":599,"title":{"index.html":{}},"body":{}}],["getuserifrefreshtokenmatches",{"_index":506,"title":{},"body":{"injectables/UsersService.html":{}}}],["getuserifrefreshtokenmatches(refreshtoken",{"_index":519,"title":{},"body":{"injectables/UsersService.html":{}}}],["grow",{"_index":637,"title":{},"body":{"index.html":{}}}],["guard",{"_index":279,"title":{"guards/EmailConfirmationGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":281,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["guards/jwt",{"_index":108,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["guards/local",{"_index":105,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["hapi/joi",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["hash",{"_index":213,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["hashedpassword",{"_index":209,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["here",{"_index":404,"title":{},"body":{"injectables/EmailVerificationService.html":{},"index.html":{}}}],["host",{"_index":330,"title":{},"body":{"injectables/EmailService.html":{}}}],["httpcode",{"_index":93,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpcode(200",{"_index":126,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpcode(200)@useguards(localauthenticationguard)@post('login",{"_index":77,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["httpexception",{"_index":211,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["httponly",{"_index":248,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["https://nestjs.com",{"_index":654,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":212,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/UsersService.html":{}}}],["httpstatus.bad_request",{"_index":239,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpstatus.internal_server_error",{"_index":243,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["httpstatus.not_found",{"_index":533,"title":{},"body":{"injectables/UsersService.html":{}}}],["id",{"_index":518,"title":{},"body":{"injectables/UsersService.html":{}}}],["identifier",{"_index":549,"title":{},"body":{"coverage.html":{}}}],["implements",{"_index":291,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["import",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["imports",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailModule.html":{},"modules/EmailVerificationModule.html":{}}}],["index",{"_index":56,"title":{"index.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateUserDto.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateUserDto.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{}}}],["inject",{"_index":177,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["injectable",{"_index":184,"title":{"injectables/AuthenticationService.html":{},"injectables/EmailService.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthenticationService.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailService.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":185,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailService.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["installation",{"_index":615,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":617,"title":{},"body":{"index.html":{}}}],["interface",{"_index":479,"title":{"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"interfaces/VerificationTokenPayload.html":{}},"body":{"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["interfaces",{"_index":480,"title":{},"body":{"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"interfaces/VerificationTokenPayload.html":{},"overview.html":{}}}],["isemail",{"_index":472,"title":{},"body":{"classes/RegisterDto.html":{}}}],["isemailverified",{"_index":544,"title":{},"body":{"injectables/UsersService.html":{}}}],["isnotempty",{"_index":271,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"classes/RegisterDto.html":{}}}],["ispasswordmatching",{"_index":262,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["isrefreshtokenmatching",{"_index":535,"title":{},"body":{"injectables/UsersService.html":{}}}],["isstring",{"_index":270,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"classes/RegisterDto.html":{}}}],["isstring()@isnotempty",{"_index":268,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"classes/RegisterDto.html":{}}}],["isstring()@isnotempty()@minlength(8",{"_index":475,"title":{},"body":{"classes/RegisterDto.html":{}}}],["joi",{"_index":24,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.object",{"_index":33,"title":{},"body":{"modules/AppModule.html":{}}}],["joi.string().required",{"_index":35,"title":{},"body":{"modules/AppModule.html":{}}}],["join",{"_index":644,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":436,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt_access_token_expires_in",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthenticationService.html":{}}}],["jwt_access_token_secret",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["jwt_refresh_token_expires_in",{"_index":261,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["jwtauthenticationguard",{"_index":107,"title":{"injectables/JwtAuthenticationGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailVerificationController.html":{},"injectables/JwtAuthenticationGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":440,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":173,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/EmailVerificationModule.html":{}}}],["jwtmodule.registerasync",{"_index":176,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["jwtrefreshguard",{"_index":109,"title":{"injectables/JwtRefreshGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["jwtrefreshtokenstrategy",{"_index":161,"title":{"injectables/JwtRefreshTokenStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["jwtservice",{"_index":194,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{}}}],["jwtstrategy",{"_index":162,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":651,"title":{},"body":{"index.html":{}}}],["license",{"_index":657,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":634,"title":{},"body":{"index.html":{}}}],["link",{"_index":362,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["link')@useguards(jwtauthenticationguard",{"_index":352,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["local",{"_index":467,"title":{},"body":{"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["localauthenticationguard",{"_index":104,"title":{"injectables/LocalAuthenticationGuard.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/LocalAuthenticationGuard.html":{},"coverage.html":{}}}],["localstrategy",{"_index":163,"title":{"injectables/LocalStrategy.html":{}},"body":{"modules/AuthenticationModule.html":{},"injectables/LocalStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["login",{"_index":60,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["login(@req",{"_index":129,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["login(request",{"_index":76,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logout",{"_index":61,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logout(@req",{"_index":150,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["logout(request",{"_index":80,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["mail",{"_index":307,"title":{},"body":{"controllers/EmailController.html":{},"injectables/EmailService.html":{}}}],["mail.options",{"_index":301,"title":{},"body":{"controllers/EmailController.html":{},"injectables/EmailService.html":{}}}],["markemailasconfirmed",{"_index":507,"title":{},"body":{"injectables/UsersService.html":{}}}],["markemailasconfirmed(email",{"_index":521,"title":{},"body":{"injectables/UsersService.html":{}}}],["matching",{"_index":50,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateUserDto.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["max",{"_index":250,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["metadata",{"_index":584,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":57,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":477,"title":{},"body":{"classes/RegisterDto.html":{}}}],["minlength(8",{"_index":478,"title":{},"body":{"classes/RegisterDto.html":{}}}],["miscellaneous",{"_index":590,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":633,"title":{},"body":{"index.html":{}}}],["mode",{"_index":623,"title":{},"body":{"index.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailModule.html":{},"modules/EmailVerificationModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailModule.html":{},"modules/EmailVerificationModule.html":{},"modules/UsersModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailModule.html":{},"modules/EmailVerificationModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["more",{"_index":647,"title":{},"body":{"index.html":{}}}],["myśliwiec",{"_index":652,"title":{},"body":{"index.html":{}}}],["name",{"_index":71,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/RegisterDto.html":{},"injectables/UsersService.html":{}}}],["nest",{"_index":611,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":656,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":568,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":174,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":166,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":571,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":236,"title":{},"body":{"injectables/AuthenticationService.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailVerificationService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newuser",{"_index":539,"title":{},"body":{"injectables/UsersService.html":{}}}],["node.js",{"_index":602,"title":{},"body":{"index.html":{}}}],["nodemailer",{"_index":328,"title":{},"body":{"injectables/EmailService.html":{},"dependencies.html":{}}}],["nodemailer/lib/mailer",{"_index":308,"title":{},"body":{"controllers/EmailController.html":{},"injectables/EmailService.html":{}}}],["nodemailertransport",{"_index":321,"title":{},"body":{"injectables/EmailService.html":{}}}],["npm",{"_index":616,"title":{},"body":{"index.html":{}}}],["null",{"_index":538,"title":{},"body":{"injectables/UsersService.html":{}}}],["number",{"_index":202,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{},"interfaces/TokenPayload.html":{},"injectables/UsersService.html":{}}}],["number(this.configservice.get('email_port",{"_index":333,"title":{},"body":{"injectables/EmailService.html":{}}}],["object",{"_index":415,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["open",{"_index":635,"title":{},"body":{"index.html":{}}}],["optional",{"_index":73,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["options",{"_index":326,"title":{},"body":{"injectables/EmailService.html":{}}}],["out",{"_index":13,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailModule.html":{},"modules/EmailVerificationModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["overview",{"_index":661,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":564,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["parameters",{"_index":70,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"injectables/UsersService.html":{}}}],["parser",{"_index":577,"title":{},"body":{"dependencies.html":{}}}],["pass",{"_index":337,"title":{},"body":{"injectables/EmailService.html":{}}}],["passport",{"_index":435,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":165,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["passportstrategy",{"_index":437,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passportstrategy(strategy",{"_index":455,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["passreqtocallback",{"_index":445,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["password",{"_index":230,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/CreateUserDto.html":{},"injectables/LocalStrategy.html":{},"classes/RegisterDto.html":{}}}],["path",{"_index":249,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["payload",{"_index":252,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["payload.email",{"_index":416,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["payload.types",{"_index":224,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["payload.types.ts",{"_index":483,"title":{},"body":{"interfaces/TokenPayload.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["payload.userid",{"_index":449,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["plaintextpassword",{"_index":198,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["please",{"_index":645,"title":{},"body":{"index.html":{}}}],["port",{"_index":332,"title":{},"body":{"injectables/EmailService.html":{}}}],["post",{"_index":94,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailController.html":{},"controllers/EmailVerificationController.html":{}}}],["post('confirm",{"_index":346,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["post('login",{"_index":128,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('logout",{"_index":149,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('register",{"_index":88,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["post('resend",{"_index":350,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["post('send",{"_index":302,"title":{},"body":{"controllers/EmailController.html":{}}}],["postgreserrorcodes",{"_index":218,"title":{},"body":{"injectables/AuthenticationService.html":{},"miscellaneous/enumerations.html":{}}}],["postgreserrorcodes.uniqueviolation",{"_index":234,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["prefix",{"_index":54,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailController.html":{},"controllers/EmailVerificationController.html":{},"controllers/UsersController.html":{}}}],["prisma",{"_index":502,"title":{},"body":{"injectables/UsersService.html":{}}}],["prisma/client",{"_index":468,"title":{},"body":{"injectables/LocalStrategy.html":{},"interfaces/RequestWithUser.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["prismaclient",{"_index":527,"title":{},"body":{"injectables/UsersService.html":{}}}],["private",{"_index":116,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["production",{"_index":625,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":601,"title":{},"body":{"index.html":{}}}],["project",{"_index":636,"title":{},"body":{"index.html":{}}}],["promise",{"_index":466,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["properties",{"_index":267,"title":{"properties.html":{}},"body":{"classes/ConfirmEmailDto.html":{},"classes/CreateUserDto.html":{},"injectables/EmailService.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"properties.html":{}}}],["provided",{"_index":247,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["providers",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailModule.html":{},"modules/EmailVerificationModule.html":{},"modules/UsersModule.html":{}}}],["public",{"_index":187,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{}}}],["read",{"_index":646,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":117,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{}}}],["reflect",{"_index":583,"title":{},"body":{"dependencies.html":{}}}],["refresh",{"_index":62,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["refresh(@req",{"_index":144,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh(request",{"_index":83,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh.guard",{"_index":111,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refresh.guard.ts",{"_index":425,"title":{},"body":{"injectables/JwtRefreshGuard.html":{},"coverage.html":{}}}],["refresh=${token",{"_index":260,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["refreshtoken",{"_index":446,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/UsersService.html":{}}}],["refreshtokencookie",{"_index":132,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refreshtokencookie.cookie",{"_index":139,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["refreshtokencookie.token",{"_index":135,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["register",{"_index":63,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["register(@body",{"_index":118,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["register(registrationdata",{"_index":86,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["registerdto",{"_index":87,"title":{"classes/RegisterDto.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/RegisterDto.html":{},"coverage.html":{}}}],["registrationdata",{"_index":90,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["registrationdata.email",{"_index":124,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["removerefreshtoken",{"_index":508,"title":{},"body":{"injectables/UsersService.html":{}}}],["removerefreshtoken(id",{"_index":523,"title":{},"body":{"injectables/UsersService.html":{}}}],["repository",{"_index":614,"title":{},"body":{"index.html":{}}}],["req",{"_index":92,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailVerificationController.html":{}}}],["request",{"_index":74,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailVerificationController.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"interfaces/RequestWithUser.html":{}}}],["request.cookies?.refresh",{"_index":447,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["request.res.setheader",{"_index":155,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["request.res.setheader('set",{"_index":137,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["request.user",{"_index":147,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["request.user?.isemailverified",{"_index":293,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["request?.cookies?.authentication",{"_index":456,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["request?.cookies?.refresh",{"_index":442,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["requestwithuser",{"_index":65,"title":{"interfaces/RequestWithUser.html":{}},"body":{"controllers/AuthenticationController.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailVerificationController.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["resendconfirmationlink",{"_index":344,"title":{},"body":{"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{}}}],["resendconfirmationlink(@req",{"_index":363,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["resendconfirmationlink(request",{"_index":349,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["resendconfirmationlink(userid",{"_index":386,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["reset",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailModule.html":{},"modules/EmailVerificationModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["results",{"_index":49,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateUserDto.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":125,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["returns",{"_index":75,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["rimraf",{"_index":586,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":620,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":588,"title":{},"body":{"dependencies.html":{}}}],["s",{"_index":396,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["scalable",{"_index":606,"title":{},"body":{"index.html":{}}}],["secret",{"_index":179,"title":{},"body":{"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{}}}],["secretorkey",{"_index":443,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["secure",{"_index":334,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendmail",{"_index":299,"title":{},"body":{"controllers/EmailController.html":{},"injectables/EmailService.html":{}}}],["sendmail(@body",{"_index":311,"title":{},"body":{"controllers/EmailController.html":{}}}],["sendmail(data",{"_index":300,"title":{},"body":{"controllers/EmailController.html":{}}}],["sendmail(options",{"_index":324,"title":{},"body":{"injectables/EmailService.html":{}}}],["sendverificationlink",{"_index":379,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["sendverificationlink(email",{"_index":388,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["sent",{"_index":313,"title":{},"body":{"controllers/EmailController.html":{}}}],["server",{"_index":607,"title":{},"body":{"index.html":{}}}],["set",{"_index":156,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["setcurrentrefreshtoken",{"_index":509,"title":{},"body":{"injectables/UsersService.html":{}}}],["setcurrentrefreshtoken(refreshtoken",{"_index":525,"title":{},"body":{"injectables/UsersService.html":{}}}],["side",{"_index":608,"title":{},"body":{"index.html":{}}}],["signoptions",{"_index":181,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["something",{"_index":240,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["source",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateUserDto.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"modules/EmailModule.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalAuthenticationGuard.html":{},"injectables/LocalStrategy.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"index.html":{}}}],["sponsors",{"_index":639,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":598,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../postgres",{"_index":592,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.module.ts",{"_index":17,"title":{},"body":{"modules/AppModule.html":{}}}],["src/authentication/authentication.controller.ts",{"_index":53,"title":{},"body":{"controllers/AuthenticationController.html":{},"coverage.html":{}}}],["src/authentication/authentication.controller.ts:28",{"_index":89,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:39",{"_index":78,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:60",{"_index":85,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:72",{"_index":82,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.controller.ts:84",{"_index":69,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["src/authentication/authentication.module.ts",{"_index":164,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["src/authentication/authentication.service.ts",{"_index":186,"title":{},"body":{"injectables/AuthenticationService.html":{},"coverage.html":{}}}],["src/authentication/authentication.service.ts:11",{"_index":195,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:18",{"_index":207,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:40",{"_index":199,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:54",{"_index":200,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:61",{"_index":203,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:72",{"_index":206,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/authentication.service.ts:87",{"_index":210,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["src/authentication/dto/register.dto.ts",{"_index":471,"title":{},"body":{"classes/RegisterDto.html":{},"coverage.html":{}}}],["src/authentication/dto/register.dto.ts:14",{"_index":476,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:5",{"_index":473,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/dto/register.dto.ts:9",{"_index":474,"title":{},"body":{"classes/RegisterDto.html":{}}}],["src/authentication/guards/email",{"_index":282,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["src/authentication/guards/jwt",{"_index":358,"title":{},"body":{"controllers/EmailVerificationController.html":{},"injectables/JwtAuthenticationGuard.html":{},"injectables/JwtRefreshGuard.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["src/authentication/guards/local",{"_index":459,"title":{},"body":{"injectables/LocalAuthenticationGuard.html":{},"coverage.html":{}}}],["src/authentication/strategies/jwt",{"_index":426,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["src/authentication/strategies/jwt.strategy.ts",{"_index":451,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/authentication/strategies/jwt.strategy.ts:10",{"_index":452,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/authentication/strategies/jwt.strategy.ts:25",{"_index":454,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/authentication/strategies/local.strategy.ts",{"_index":461,"title":{},"body":{"injectables/LocalStrategy.html":{},"coverage.html":{}}}],["src/authentication/strategies/local.strategy.ts:14",{"_index":465,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/authentication/strategies/local.strategy.ts:8",{"_index":463,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["src/authentication/types/request",{"_index":359,"title":{},"body":{"controllers/EmailVerificationController.html":{},"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["src/authentication/types/token",{"_index":482,"title":{},"body":{"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["src/common/enums/postgres",{"_index":219,"title":{},"body":{"injectables/AuthenticationService.html":{},"miscellaneous/enumerations.html":{}}}],["src/email",{"_index":101,"title":{},"body":{"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"classes/ConfirmEmailDto.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["src/email/email.controller.ts",{"_index":298,"title":{},"body":{"controllers/EmailController.html":{},"coverage.html":{}}}],["src/email/email.controller.ts:10",{"_index":303,"title":{},"body":{"controllers/EmailController.html":{}}}],["src/email/email.module",{"_index":374,"title":{},"body":{"modules/EmailVerificationModule.html":{}}}],["src/email/email.module.ts",{"_index":317,"title":{},"body":{"modules/EmailModule.html":{}}}],["src/email/email.service",{"_index":393,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["src/email/email.service.ts",{"_index":320,"title":{},"body":{"injectables/EmailService.html":{},"coverage.html":{}}}],["src/email/email.service.ts:22",{"_index":325,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/email/email.service.ts:8",{"_index":323,"title":{},"body":{"injectables/EmailService.html":{}}}],["src/main.ts",{"_index":558,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/users/dto/create",{"_index":274,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["src/users/users.controller.ts",{"_index":485,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/users/users.controller.ts:13",{"_index":489,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/users/users.module",{"_index":167,"title":{},"body":{"modules/AuthenticationModule.html":{},"modules/EmailVerificationModule.html":{}}}],["src/users/users.module.ts",{"_index":499,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/users/users.service",{"_index":99,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["src/users/users.service.ts",{"_index":501,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/users/users.service.ts:14",{"_index":515,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:27",{"_index":517,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:40",{"_index":520,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:53",{"_index":524,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:64",{"_index":512,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:75",{"_index":522,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:8",{"_index":510,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/users/users.service.ts:87",{"_index":526,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":621,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":624,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":626,"title":{},"body":{"index.html":{}}}],["started",{"_index":600,"title":{"index.html":{}},"body":{}}],["starter",{"_index":613,"title":{},"body":{"index.html":{}}}],["statements",{"_index":550,"title":{},"body":{"coverage.html":{}}}],["stay",{"_index":648,"title":{},"body":{"index.html":{}}}],["strategies/jwt",{"_index":171,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["strategies/jwt.strategy",{"_index":170,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["strategies/local.strategy",{"_index":169,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["strategy",{"_index":434,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["string",{"_index":197,"title":{},"body":{"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateUserDto.html":{},"injectables/EmailVerificationService.html":{},"injectables/LocalStrategy.html":{},"classes/RegisterDto.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{}}}],["subject",{"_index":406,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["super",{"_index":439,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["support",{"_index":640,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":659,"title":{},"body":{"modules.html":{}}}],["table",{"_index":563,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":562,"title":{},"body":{"coverage.html":{}}}],["test",{"_index":629,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":632,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":631,"title":{},"body":{"index.html":{}}}],["tests",{"_index":628,"title":{},"body":{"index.html":{}}}],["text",{"_index":399,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["thanks",{"_index":638,"title":{},"body":{"index.html":{}}}],["this.authenticationservice.getauthenticateduser(email",{"_index":470,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["this.authenticationservice.getcookiesforlogout",{"_index":153,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtaccesstoken(request.user.id",{"_index":146,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtaccesstoken(user.id",{"_index":131,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.getcookiewithjwtrefreshtoken(user.id",{"_index":133,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.authenticationservice.register(registrationdata",{"_index":122,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.configservice.get",{"_index":395,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["this.configservice.get('email_password",{"_index":338,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get('email_service",{"_index":331,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get('email_user",{"_index":336,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.configservice.get('email_verification_token_secret",{"_index":394,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["this.configservice.get('jwt_access_token_expires_in",{"_index":255,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.configservice.get('jwt_access_token_secret",{"_index":254,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.configservice.get('jwt_refresh_token_expires_in",{"_index":259,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.configservice.get('jwt_refresh_token_secret",{"_index":258,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.emailconfirmationservice.confirmemail(email",{"_index":368,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["this.emailconfirmationservice.decodeconfirmationtoken",{"_index":366,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["this.emailconfirmationservice.resendconfirmationlink(request.user.id",{"_index":364,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["this.emailservice.sendmail",{"_index":405,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["this.emailservice.sendmail(data",{"_index":312,"title":{},"body":{"controllers/EmailController.html":{}}}],["this.emailverificationservice.sendverificationlink",{"_index":123,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.getbyid(userid",{"_index":534,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.jwtservice.sign(payload",{"_index":253,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{}}}],["this.jwtservice.verify(token",{"_index":413,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["this.nodemailertransport",{"_index":329,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.nodemailertransport.sendmail",{"_index":339,"title":{},"body":{"injectables/EmailService.html":{}}}],["this.prisma",{"_index":530,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.create",{"_index":540,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.findunique",{"_index":531,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.prisma.user.update",{"_index":536,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.sendverificationlink(user.email",{"_index":411,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["this.userservice.getuserifrefreshtokenmatches",{"_index":448,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["this.usersservice.create",{"_index":229,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["this.usersservice.getbyemail(email",{"_index":244,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{}}}],["this.usersservice.getbyid(payload.userid",{"_index":458,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.usersservice.getbyid(userid",{"_index":407,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["this.usersservice.markemailasconfirmed(email",{"_index":412,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["this.usersservice.removerefreshtoken(request.user.id",{"_index":151,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.usersservice.setcurrentrefreshtoken",{"_index":134,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["this.verifypassword(plaintextpassword",{"_index":245,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["throw",{"_index":235,"title":{},"body":{"injectables/AuthenticationService.html":{},"guards/EmailConfirmationGuard.html":{},"injectables/EmailVerificationService.html":{},"injectables/UsersService.html":{}}}],["token",{"_index":110,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshGuard.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["token.strategy",{"_index":172,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["token.strategy.ts",{"_index":427,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"coverage.html":{}}}],["token.strategy.ts:13",{"_index":430,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["token.strategy.ts:29",{"_index":432,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["token=${token",{"_index":398,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["tokenexpirederror",{"_index":418,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["tokenpayload",{"_index":222,"title":{"interfaces/TokenPayload.html":{}},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"interfaces/TokenPayload.html":{},"coverage.html":{}}}],["touch",{"_index":649,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":574,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":296,"title":{},"body":{"guards/EmailConfirmationGuard.html":{},"injectables/EmailService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/UsersService.html":{}}}],["try",{"_index":227,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{}}}],["twitter",{"_index":655,"title":{},"body":{"index.html":{}}}],["type",{"_index":72,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"classes/ConfirmEmailDto.html":{},"classes/CreateUserDto.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailController.html":{},"injectables/EmailService.html":{},"controllers/EmailVerificationController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{},"classes/RegisterDto.html":{},"interfaces/RequestWithUser.html":{},"interfaces/TokenPayload.html":{},"injectables/UsersService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["typeof",{"_index":414,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["types/request",{"_index":112,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/EmailConfirmationGuard.html":{}}}],["types/token",{"_index":223,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{}}}],["types/verification",{"_index":392,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["typescript",{"_index":612,"title":{},"body":{"index.html":{}}}],["unauthorizedexception",{"_index":290,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["unauthorizedexception('confirm",{"_index":294,"title":{},"body":{"guards/EmailConfirmationGuard.html":{}}}],["undefined",{"_index":141,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{}}}],["uniqueviolation",{"_index":594,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unit",{"_index":627,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":79,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"controllers/EmailController.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["unlicensed",{"_index":668,"title":{},"body":{"properties.html":{}}}],["updatedat",{"_index":543,"title":{},"body":{"injectables/UsersService.html":{}}}],["url",{"_index":397,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["usefactory",{"_index":178,"title":{},"body":{"modules/AuthenticationModule.html":{}}}],["useguards",{"_index":95,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailVerificationController.html":{},"controllers/UsersController.html":{}}}],["useguards(emailconfirmationguard",{"_index":494,"title":{},"body":{"controllers/UsersController.html":{}}}],["useguards(jwtauthenticationguard",{"_index":148,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailVerificationController.html":{},"controllers/UsersController.html":{}}}],["useguards(jwtauthenticationguard)@get",{"_index":67,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwtauthenticationguard)@httpcode(200)@post('logout",{"_index":81,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwtrefreshguard",{"_index":142,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(jwtrefreshguard)@get('refresh",{"_index":84,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useguards(localauthenticationguard",{"_index":127,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["useinterceptors",{"_index":355,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":360,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["user",{"_index":120,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailService.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/LocalStrategy.html":{},"interfaces/RequestWithUser.html":{},"injectables/UsersService.html":{}}}],["user.currenthashedrefreshtoken",{"_index":450,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/UsersService.html":{}}}],["user.dto",{"_index":529,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":275,"title":{},"body":{"classes/CreateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:2",{"_index":276,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:3",{"_index":277,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.dto.ts:4",{"_index":278,"title":{},"body":{"classes/CreateUserDto.html":{}}}],["user.id",{"_index":136,"title":{},"body":{"controllers/AuthenticationController.html":{}}}],["user.isemailverified",{"_index":408,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["user.password",{"_index":140,"title":{},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{}}}],["user.types",{"_index":113,"title":{},"body":{"controllers/AuthenticationController.html":{},"guards/EmailConfirmationGuard.html":{},"controllers/EmailVerificationController.html":{}}}],["user.types.ts",{"_index":481,"title":{},"body":{"interfaces/RequestWithUser.html":{},"coverage.html":{}}}],["userdata",{"_index":513,"title":{},"body":{"injectables/UsersService.html":{}}}],["userid",{"_index":204,"title":{},"body":{"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{},"interfaces/TokenPayload.html":{},"injectables/UsersService.html":{}}}],["usernamefield",{"_index":469,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["users",{"_index":486,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":500,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":490,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["users/users.module",{"_index":21,"title":{},"body":{"modules/AppModule.html":{}}}],["userscontroller",{"_index":484,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["userservice",{"_index":429,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["usersmodule",{"_index":10,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailVerificationModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":98,"title":{"injectables/UsersService.html":{}},"body":{"controllers/AuthenticationController.html":{},"injectables/AuthenticationService.html":{},"injectables/EmailVerificationService.html":{},"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["validate",{"_index":428,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{},"injectables/JwtStrategy.html":{},"injectables/LocalStrategy.html":{}}}],["validate(email",{"_index":464,"title":{},"body":{"injectables/LocalStrategy.html":{}}}],["validate(payload",{"_index":453,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(request",{"_index":431,"title":{},"body":{"injectables/JwtRefreshTokenStrategy.html":{}}}],["validationschema",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["validator",{"_index":272,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"classes/RegisterDto.html":{},"dependencies.html":{}}}],["value",{"_index":595,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["verification",{"_index":342,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["verification.controller",{"_index":375,"title":{},"body":{"modules/EmailVerificationModule.html":{}}}],["verification.controller.ts",{"_index":341,"title":{},"body":{"controllers/EmailVerificationController.html":{},"coverage.html":{}}}],["verification.controller.ts:24",{"_index":353,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["verification.controller.ts:29",{"_index":347,"title":{},"body":{"controllers/EmailVerificationController.html":{}}}],["verification.module",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{}}}],["verification.module.ts",{"_index":373,"title":{},"body":{"modules/EmailVerificationModule.html":{}}}],["verification.service",{"_index":102,"title":{},"body":{"controllers/AuthenticationController.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{}}}],["verification.service.ts",{"_index":376,"title":{},"body":{"injectables/EmailVerificationService.html":{},"coverage.html":{}}}],["verification.service.ts:17",{"_index":389,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["verification.service.ts:39",{"_index":387,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["verification.service.ts:47",{"_index":383,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["verification.service.ts:55",{"_index":385,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["verification.service.ts:9",{"_index":381,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["verification/dto/confirm",{"_index":265,"title":{},"body":{"classes/ConfirmEmailDto.html":{},"coverage.html":{}}}],["verification/email",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthenticationController.html":{},"modules/AuthenticationModule.html":{},"controllers/EmailVerificationController.html":{},"modules/EmailVerificationModule.html":{},"injectables/EmailVerificationService.html":{},"coverage.html":{}}}],["verification/types/verification",{"_index":546,"title":{},"body":{"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["verificationtokenpayload",{"_index":391,"title":{"interfaces/VerificationTokenPayload.html":{}},"body":{"injectables/EmailVerificationService.html":{},"interfaces/VerificationTokenPayload.html":{},"coverage.html":{}}}],["verifypassword",{"_index":192,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["verifypassword(plaintextpassword",{"_index":208,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["version",{"_index":666,"title":{},"body":{"properties.html":{}}}],["watch",{"_index":622,"title":{},"body":{"index.html":{}}}],["website",{"_index":653,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":400,"title":{},"body":{"injectables/EmailVerificationService.html":{}}}],["went",{"_index":241,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["wrong",{"_index":242,"title":{},"body":{"injectables/AuthenticationService.html":{}}}],["you'd",{"_index":643,"title":{},"body":{"index.html":{}}}],["zoom",{"_index":11,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthenticationModule.html":{},"modules/EmailModule.html":{},"modules/EmailVerificationModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nEmailModule\n\nEmailModule\n\nAppModule -->\n\nEmailModule->AppModule\n\n\n\n\n\nEmailVerificationModule\n\nEmailVerificationModule\n\nAppModule -->\n\nEmailVerificationModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthenticationModule\n                        \n                        \n                            EmailModule\n                        \n                        \n                            EmailVerificationModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersModule } from './users/users.module';\nimport { ConfigModule } from '@nestjs/config';\nimport * as Joi from '@hapi/joi';\nimport { AuthenticationModule } from './authentication/authentication.module';\nimport { EmailModule } from './email/email.module';\nimport { EmailVerificationModule } from './email-verification/email-verification.module';\n\n@Module({\n  imports: [\n    UsersModule,\n    AuthenticationModule,\n    ConfigModule.forRoot({\n      validationSchema: Joi.object({\n        DATABASE_URL: Joi.string().required(),\n        JWT_ACCESS_TOKEN_SECRET: Joi.string().required(),\n        JWT_ACCESS_TOKEN_EXPIRES_IN: Joi.string().required(),\n        EMAIL_VERIFICATION_TOKEN_SECRET: Joi.string().required(),\n        EMAIL_VERIFICATION_TOKEN_EXPIRATION_TIME: Joi.string().required(),\n        EMAIL_CONFIRMATION_URL: Joi.string().required(),\n        EMAIL_SERVICE: Joi.string().required(),\n        EMAIL_PORT: Joi.string().required(),\n        EMAIL_USER: Joi.string().required(),\n        EMAIL_PASSWORD: Joi.string().required(),\n      }),\n    }),\n    EmailModule,\n    EmailVerificationModule,\n  ],\n  controllers: [],\n  providers: [],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthenticationController.html":{"url":"controllers/AuthenticationController.html","title":"controller - AuthenticationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthenticationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/authentication.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                authentication\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                authenticate\n                            \n                            \n                                    Async\n                                logIn\n                            \n                            \n                                    Async\n                                logOut\n                            \n                            \n                                refresh\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        authenticate\n                        \n                    \n                \n            \n            \n                \nauthenticate(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthenticationGuard)@Get()\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:84\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    logIn(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HttpCode(200)@UseGuards(LocalAuthenticationGuard)@Post('login')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        logOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    logOut(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtAuthenticationGuard)@HttpCode(200)@Post('logout')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        refresh\n                        \n                    \n                \n            \n            \n                \nrefresh(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(JwtRefreshGuard)@Get('refresh')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registrationData: RegisterDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('register')\n                \n            \n\n            \n                \n                    Defined in src/authentication/authentication.controller.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registrationData\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Body,\n  Req,\n  HttpCode,\n  Post,\n  UseGuards,\n  Get,\n} from '@nestjs/common';\nimport { AuthenticationService } from './authentication.service';\nimport { UsersService } from 'src/users/users.service';\nimport { EmailVerificationService } from 'src/email-verification/email-verification.service';\nimport { RegisterDto } from './dto/register.dto';\nimport { LocalAuthenticationGuard } from './guards/local-authentication.guard';\nimport { JwtAuthenticationGuard } from './guards/jwt-authentication.guard';\nimport { JwtRefreshGuard } from './guards/jwt-token-refresh.guard';\nimport { RequestWithUser } from './types/request-with-user.types';\n\n@Controller('authentication')\nexport class AuthenticationController {\n  constructor(\n    private readonly authenticationService: AuthenticationService,\n    private readonly usersService: UsersService,\n    private readonly emailVerificationService: EmailVerificationService,\n  ) {}\n\n  @Post('register')\n  async register(@Body() registrationData: RegisterDto) {\n    const user = await this.authenticationService.register(registrationData);\n    await this.emailVerificationService.sendVerificationLink(\n      registrationData.email,\n    );\n    return user;\n  }\n\n  @HttpCode(200)\n  @UseGuards(LocalAuthenticationGuard)\n  @Post('login')\n  async logIn(@Req() request: RequestWithUser) {\n    const { user } = request;\n    const accessTokenCookie =\n      this.authenticationService.getCookieWithJwtAccessToken(user.id);\n    const refreshTokenCookie =\n      this.authenticationService.getCookieWithJwtRefreshToken(user.id);\n    await this.usersService.setCurrentRefreshToken(\n      refreshTokenCookie.token,\n      user.id,\n    );\n\n    request.res.setHeader('Set-Cookie', [\n      accessTokenCookie,\n      refreshTokenCookie.cookie,\n    ]);\n    user.password = undefined;\n    return user;\n  }\n\n  @UseGuards(JwtRefreshGuard)\n  @Get('refresh')\n  refresh(@Req() request: RequestWithUser) {\n    console.log('refresh');\n    const accessTokenCookie =\n      this.authenticationService.getCookieWithJwtAccessToken(request.user.id);\n\n    request.res.setHeader('Set-Cookie', accessTokenCookie);\n    return request.user;\n  }\n\n  @UseGuards(JwtAuthenticationGuard)\n  @HttpCode(200)\n  @Post('logout')\n  async logOut(@Req() request: RequestWithUser) {\n    await this.usersService.removeRefreshToken(request.user.id);\n    const cookies = this.authenticationService.getCookiesForLogOut();\n    console.log(cookies);\n    request.res.setHeader(\n      'Set-Cookie',\n      this.authenticationService.getCookiesForLogOut(),\n    );\n  }\n\n  @UseGuards(JwtAuthenticationGuard)\n  @Get()\n  authenticate(@Req() request: RequestWithUser) {\n    const user = request.user;\n    user.password = undefined;\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthenticationModule.html":{"url":"modules/AuthenticationModule.html","title":"module - AuthenticationModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthenticationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\ncluster_AuthenticationModule_imports\n\n\n\n\nEmailVerificationModule\n\nEmailVerificationModule\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\nAuthenticationModule -->\n\nEmailVerificationModule->AuthenticationModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthenticationModule -->\n\nUsersModule->AuthenticationModule\n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nJwtRefreshTokenStrategy\n\nJwtRefreshTokenStrategy\n\nAuthenticationModule -->\n\nJwtRefreshTokenStrategy->AuthenticationModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthenticationModule -->\n\nJwtStrategy->AuthenticationModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthenticationModule -->\n\nLocalStrategy->AuthenticationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/authentication/authentication.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthenticationService\n                        \n                        \n                            JwtRefreshTokenStrategy\n                        \n                        \n                            JwtStrategy\n                        \n                        \n                            LocalStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthenticationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EmailVerificationModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { PassportModule } from '@nestjs/passport';\nimport { UsersModule } from 'src/users/users.module';\nimport { AuthenticationService } from './authentication.service';\nimport { AuthenticationController } from './authentication.controller';\nimport { LocalStrategy } from './strategies/local.strategy';\nimport { JwtStrategy } from './strategies/jwt.strategy';\nimport { JwtRefreshTokenStrategy } from './strategies/jwt-refresh-token.strategy';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { EmailVerificationModule } from 'src/email-verification/email-verification.module';\n\n@Module({\n  imports: [\n    EmailVerificationModule,\n    UsersModule,\n    PassportModule,\n    ConfigModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get('JWT_ACCESS_SECRET'),\n        signOptions: {\n          expiresIn: configService.get('JWT_ACCESS_TOKEN_EXPIRES_IN'),\n        },\n      }),\n    }),\n  ],\n  providers: [\n    AuthenticationService,\n    LocalStrategy,\n    JwtStrategy,\n    JwtRefreshTokenStrategy,\n  ],\n  controllers: [AuthenticationController],\n})\nexport class AuthenticationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthenticationService.html":{"url":"injectables/AuthenticationService.html","title":"injectable - AuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/authentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                getAuthenticatedUser\n                            \n                            \n                                    Public\n                                getCookiesForLogOut\n                            \n                            \n                                    Public\n                                getCookieWithJwtAccessToken\n                            \n                            \n                                    Public\n                                getCookieWithJwtRefreshToken\n                            \n                            \n                                    Public\n                                    Async\n                                register\n                            \n                            \n                                    Private\n                                    Async\n                                verifyPassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/authentication.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        getAuthenticatedUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAuthenticatedUser(email: string, plainTextPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    plainTextPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookiesForLogOut\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookiesForLogOut()\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     {}\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookieWithJwtAccessToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookieWithJwtAccessToken(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        getCookieWithJwtRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    getCookieWithJwtRefreshToken(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     { cookie: string; token: any; }\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(registrationData: RegisterDto)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    registrationData\n                                    \n                                                RegisterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        Async\n                        verifyPassword\n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyPassword(plainTextPassword: string, hashedPassword: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/authentication.service.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    plainTextPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    hashedPassword\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { hash as bcryptHash, compare as bcryptCompare } from 'bcrypt';\nimport { UsersService } from 'src/users/users.service';\nimport { RegisterDto } from './dto/register.dto';\nimport { PostgresErrorCodes } from 'src/common/enums/postgres-error-code.enum';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { TokenPayload } from './types/token-payload.types';\n\n@Injectable()\nexport class AuthenticationService {\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n  ) {}\n\n  public async register(registrationData: RegisterDto) {\n    const hashedPassword = await bcryptHash(registrationData.password, 10);\n    try {\n      const createdUser = await this.usersService.create({\n        ...registrationData,\n        password: hashedPassword,\n      });\n      createdUser.password = undefined;\n      return createdUser;\n    } catch (error) {\n      if (error?.code === PostgresErrorCodes.UniqueViolation) {\n        throw new HttpException(\n          'User with that email already exists',\n          HttpStatus.BAD_REQUEST,\n        );\n      }\n      throw new HttpException(\n        'Something went wrong',\n        HttpStatus.INTERNAL_SERVER_ERROR,\n      );\n    }\n  }\n  public async getAuthenticatedUser(email: string, plainTextPassword: string) {\n    try {\n      const user = await this.usersService.getByEmail(email);\n      await this.verifyPassword(plainTextPassword, user.password);\n      user.password = undefined;\n      return user;\n    } catch (error) {\n      throw new HttpException(\n        'Wrong credentials provided',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n  }\n\n  public getCookiesForLogOut() {\n    return [\n      'Authentication=; HttpOnly; Path=/; Max-Age=0',\n      'Refresh=; HttpOnly; Path=/; Max-Age=0',\n    ];\n  }\n\n  public getCookieWithJwtAccessToken(userId: number) {\n    const payload: TokenPayload = { userId };\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_ACCESS_TOKEN_SECRET'),\n      expiresIn: this.configService.get('JWT_ACCESS_TOKEN_EXPIRES_IN'),\n    });\n    return `Authentication=${token}; HttpOnly; Path=/; Max-Age=${this.configService.get(\n      'JWT_ACCESS_TOKEN_EXPIRES_IN',\n    )}`;\n  }\n\n  public getCookieWithJwtRefreshToken(userId: number) {\n    const payload: TokenPayload = { userId };\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('JWT_REFRESH_TOKEN_SECRET'),\n      expiresIn: this.configService.get('JWT_REFRESH_TOKEN_EXPIRES_IN'),\n    });\n    const cookie = `Refresh=${token}; HttpOnly; Path=/; Max-Age=${this.configService.get(\n      'JWT_REFRESH_TOKEN_EXPIRES_IN',\n    )}`;\n    return {\n      cookie,\n      token,\n    };\n  }\n\n  private async verifyPassword(\n    plainTextPassword: string,\n    hashedPassword: string,\n  ) {\n    const isPasswordMatching = await bcryptCompare(\n      plainTextPassword,\n      hashedPassword,\n    );\n    if (!isPasswordMatching) {\n      throw new HttpException(\n        'Wrong credentials provided',\n        HttpStatus.BAD_REQUEST,\n      );\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConfirmEmailDto.html":{"url":"classes/ConfirmEmailDto.html","title":"class - ConfirmEmailDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConfirmEmailDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email-verification/dto/confirm-email.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                token\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/email-verification/dto/confirm-email.dto.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsString, IsNotEmpty } from 'class-validator';\n\nexport class ConfirmEmailDto {\n  @IsString()\n  @IsNotEmpty()\n  token: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDto.html":{"url":"classes/CreateUserDto.html","title":"class - CreateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/dto/create-user.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:2\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:3\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/users/dto/create-user.dto.ts:4\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        export class CreateUserDto {\n  email: string;\n  name: string;\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/EmailConfirmationGuard.html":{"url":"guards/EmailConfirmationGuard.html","title":"guard - EmailConfirmationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    EmailConfirmationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/authentication/guards/email-confirmation.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/guards/email-confirmation.guard.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import {\n  Injectable,\n  CanActivate,\n  ExecutionContext,\n  UnauthorizedException,\n} from '@nestjs/common';\nimport { RequestWithUser } from '../types/request-with-user.types';\n\n@Injectable()\nexport class EmailConfirmationGuard implements CanActivate {\n  canActivate(context: ExecutionContext) {\n    const request: RequestWithUser = context.switchToHttp().getRequest();\n\n    if (!request.user?.isEmailVerified) {\n      throw new UnauthorizedException('Confirm your email first');\n    }\n\n    return true;\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmailController.html":{"url":"controllers/EmailController.html","title":"controller - EmailController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmailController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email/email.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                email\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                sendMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        sendMail\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendMail(data: Mail.Options)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('send')\n                \n            \n\n            \n                \n                    Defined in src/email/email.controller.ts:10\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    data\n                                    \n                                            Mail.Options\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Post } from '@nestjs/common';\nimport { EmailService } from './email.service';\nimport * as Mail from 'nodemailer/lib/mailer';\n\n@Controller('email')\nexport class EmailController {\n  constructor(private readonly emailService: EmailService) {}\n\n  @Post('send')\n  async sendMail(@Body() data: Mail.Options) {\n    await this.emailService.sendMail(data);\n    return 'Email sent';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailModule.html":{"url":"modules/EmailModule.html","title":"module - EmailModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\n\nEmailService \n\nEmailService \n\n\n\nEmailModule\n\nEmailModule\n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/email/email.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EmailController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EmailService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { EmailService } from './email.service';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { EmailController } from './email.controller';\n\n@Module({\n  imports: [ConfigModule],\n  providers: [EmailService],\n  exports: [EmailService],\n  controllers: [EmailController],\n})\nexport class EmailModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailService.html":{"url":"injectables/EmailService.html","title":"injectable - EmailService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email/email.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                nodemailerTransport\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendMail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/email/email.service.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendMail\n                        \n                    \n                \n            \n            \n                \nsendMail(options: Mail.Options)\n                \n            \n\n\n            \n                \n                    Defined in src/email/email.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                            Mail.Options\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        nodemailerTransport\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Mail\n\n                    \n                \n                    \n                        \n                                Defined in src/email/email.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { createTransport } from 'nodemailer';\nimport * as Mail from 'nodemailer/lib/mailer';\nimport { ConfigService } from '@nestjs/config';\n\n@Injectable()\nexport class EmailService {\n  private nodemailerTransport: Mail;\n\n  constructor(private readonly configService: ConfigService) {\n    this.nodemailerTransport = createTransport({\n      host: this.configService.get('EMAIL_SERVICE'),\n      port: Number(this.configService.get('EMAIL_PORT')),\n      secure: true,\n      auth: {\n        user: this.configService.get('EMAIL_USER'),\n        pass: this.configService.get('EMAIL_PASSWORD'),\n      },\n    });\n  }\n\n  sendMail(options: Mail.Options) {\n    return this.nodemailerTransport.sendMail({\n      ...options,\n      from: `${this.configService.get('EMAIL_USER')}`,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EmailVerificationController.html":{"url":"controllers/EmailVerificationController.html","title":"controller - EmailVerificationController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EmailVerificationController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email-verification/email-verification.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                email-verification\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                confirm\n                            \n                            \n                                    Async\n                                resendConfirmationLink\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        confirm\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirm(confirmationData: ConfirmEmailDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('confirm')\n                \n            \n\n            \n                \n                    Defined in src/email-verification/email-verification.controller.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    confirmationData\n                                    \n                                                ConfirmEmailDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        resendConfirmationLink\n                        \n                    \n                \n            \n            \n                \n                    \n                    resendConfirmationLink(request: RequestWithUser)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('resend-confirmation-link')@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/email-verification/email-verification.controller.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                                RequestWithUser\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  ClassSerializerInterceptor,\n  UseInterceptors,\n  Post,\n  Body,\n  UseGuards,\n  Req,\n} from '@nestjs/common';\nimport { ConfirmEmailDto } from './dto/confirm-email.dto';\nimport { EmailVerificationService } from './email-verification.service';\nimport { JwtAuthenticationGuard } from 'src/authentication/guards/jwt-authentication.guard';\nimport { RequestWithUser } from 'src/authentication/types/request-with-user.types';\n\n@Controller('email-verification')\n@UseInterceptors(ClassSerializerInterceptor)\nexport class EmailVerificationController {\n  constructor(\n    private readonly emailConfirmationService: EmailVerificationService,\n  ) {}\n\n  @Post('resend-confirmation-link')\n  @UseGuards(JwtAuthenticationGuard)\n  async resendConfirmationLink(@Req() request: RequestWithUser) {\n    await this.emailConfirmationService.resendConfirmationLink(request.user.id);\n  }\n\n  @Post('confirm')\n  async confirm(@Body() confirmationData: ConfirmEmailDto) {\n    const email = await this.emailConfirmationService.decodeConfirmationToken(\n      confirmationData.token,\n    );\n    await this.emailConfirmationService.confirmEmail(email);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EmailVerificationModule.html":{"url":"modules/EmailVerificationModule.html","title":"module - EmailVerificationModule","body":"\n                   \n\n\n\n\n    Modules\n    EmailVerificationModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EmailVerificationModule\n\n\n\ncluster_EmailVerificationModule_exports\n\n\n\ncluster_EmailVerificationModule_providers\n\n\n\ncluster_EmailVerificationModule_imports\n\n\n\n\nEmailModule\n\nEmailModule\n\n\n\nEmailVerificationModule\n\nEmailVerificationModule\n\nEmailVerificationModule -->\n\nEmailModule->EmailVerificationModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nEmailVerificationModule -->\n\nUsersModule->EmailVerificationModule\n\n\n\n\n\nEmailVerificationService \n\nEmailVerificationService \n\nEmailVerificationService  -->\n\nEmailVerificationModule->EmailVerificationService \n\n\n\n\n\nEmailVerificationService\n\nEmailVerificationService\n\nEmailVerificationModule -->\n\nEmailVerificationService->EmailVerificationModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/email-verification/email-verification.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EmailVerificationService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EmailVerificationController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            EmailModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EmailVerificationService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { EmailVerificationService } from './email-verification.service';\nimport { EmailModule } from 'src/email/email.module';\nimport { UsersModule } from 'src/users/users.module';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigModule } from '@nestjs/config';\nimport { EmailVerificationController } from './email-verification.controller';\n\n@Module({\n  imports: [UsersModule, EmailModule, JwtModule, ConfigModule],\n  providers: [EmailVerificationService],\n  exports: [EmailVerificationService],\n  controllers: [EmailVerificationController],\n})\nexport class EmailVerificationModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EmailVerificationService.html":{"url":"injectables/EmailVerificationService.html","title":"injectable - EmailVerificationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EmailVerificationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email-verification/email-verification.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Async\n                                confirmEmail\n                            \n                            \n                                    Public\n                                    Async\n                                decodeConfirmationToken\n                            \n                            \n                                    Public\n                                    Async\n                                resendConfirmationLink\n                            \n                            \n                                    Public\n                                sendVerificationLink\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(jwtService: JwtService, configService: ConfigService, emailService: EmailService, usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/email-verification/email-verification.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        emailService\n                                                  \n                                                        \n                                                                        EmailService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        confirmEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    confirmEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/email-verification/email-verification.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        decodeConfirmationToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    decodeConfirmationToken(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/email-verification/email-verification.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        Async\n                        resendConfirmationLink\n                        \n                    \n                \n            \n            \n                \n                    \n                    resendConfirmationLink(userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/email-verification/email-verification.service.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Public\n                        sendVerificationLink\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendVerificationLink(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/email-verification/email-verification.service.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable } from '@nestjs/common';\nimport { JwtService } from '@nestjs/jwt';\nimport { ConfigService } from '@nestjs/config';\nimport { VerificationTokenPayload } from './types/verification-payload.types';\nimport { EmailService } from 'src/email/email.service';\nimport { UsersService } from 'src/users/users.service';\n\n@Injectable()\nexport class EmailVerificationService {\n  constructor(\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n    private readonly emailService: EmailService,\n    private readonly usersService: UsersService,\n  ) {}\n\n  public sendVerificationLink(email: string) {\n    const payload: VerificationTokenPayload = { email };\n    const token = this.jwtService.sign(payload, {\n      secret: this.configService.get('EMAIL_VERIFICATION_TOKEN_SECRET'),\n      expiresIn: `${this.configService.get(\n        'EMAIL_VERIFICATION_TOKEN_EXPIRATION_TIME',\n      )}s`,\n    });\n\n    const url = `${this.configService.get(\n      'EMAIL_CONFIRMATION_URL',\n    )}?token=${token}`;\n\n    const text = `Welcome to the application. To confirm the email address, click here: ${token}`;\n\n    return this.emailService.sendMail({\n      to: email,\n      subject: 'Email confirmation',\n      text,\n    });\n  }\n\n  public async resendConfirmationLink(userId: number) {\n    const user = await this.usersService.getById(userId);\n    if (user.isEmailVerified) {\n      throw new BadRequestException('Email already confirmed');\n    }\n    await this.sendVerificationLink(user.email);\n  }\n\n  public async confirmEmail(email: string) {\n    const user = await this.usersService.getByEmail(email);\n    if (user.isEmailVerified) {\n      throw new BadRequestException('Email already confirmed');\n    }\n    await this.usersService.markEmailAsConfirmed(email);\n  }\n\n  public async decodeConfirmationToken(token: string) {\n    try {\n      const payload = await this.jwtService.verify(token, {\n        secret: this.configService.get('EMAIL_VERIFICATION_TOKEN_SECRET'),\n      });\n\n      if (typeof payload === 'object' && 'email' in payload) {\n        return payload.email;\n      }\n      throw new BadRequestException();\n    } catch (error) {\n      if (error?.name === 'TokenExpiredError') {\n        throw new BadRequestException('Email confirmation token expired');\n      }\n      throw new BadRequestException('Bad confirmation token');\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthenticationGuard.html":{"url":"injectables/JwtAuthenticationGuard.html","title":"injectable - JwtAuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/guards/jwt-authentication.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthenticationGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshGuard.html":{"url":"injectables/JwtRefreshGuard.html","title":"injectable - JwtRefreshGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/guards/jwt-token-refresh.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtRefreshGuard extends AuthGuard('jwt-refresh-token') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtRefreshTokenStrategy.html":{"url":"injectables/JwtRefreshTokenStrategy.html","title":"injectable - JwtRefreshTokenStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtRefreshTokenStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/strategies/jwt-refresh-token.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService, userService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/strategies/jwt-refresh-token.strategy.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(request: Request, payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/strategies/jwt-refresh-token.strategy.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    request\n                                    \n                                            Request\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\nimport { UsersService } from 'src/users/users.service';\nimport { TokenPayload } from '../types/token-payload.types';\n\n@Injectable()\nexport class JwtRefreshTokenStrategy extends PassportStrategy(\n  Strategy,\n  'jwt-refresh-token',\n) {\n  constructor(\n    private readonly configService: ConfigService,\n    private readonly userService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) => {\n          return request?.cookies?.Refresh;\n        },\n      ]),\n      secretOrKey: configService.get('JWT_REFRESH_TOKEN_SECRET'),\n      passReqToCallback: true,\n    });\n  }\n\n  async validate(request: Request, payload: TokenPayload) {\n    const refreshToken = request.cookies?.Refresh;\n    const user = await this.userService.getUserIfRefreshTokenMatches(\n      refreshToken,\n      payload.userId,\n    );\n    user.currentHashedRefreshToken = undefined;\n    return user;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/strategies/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/strategies/jwt.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: TokenPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/strategies/jwt.strategy.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                TokenPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ExtractJwt, Strategy } from 'passport-jwt';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { Request } from 'express';\nimport { UsersService } from 'src/users/users.service';\nimport { TokenPayload } from '../types/token-payload.types';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly configService: ConfigService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromExtractors([\n        (request: Request) => {\n          return request?.cookies?.Authentication;\n        },\n      ]),\n      secretOrKey: configService.get('JWT_ACCESS_TOKEN_SECRET'),\n    });\n  }\n\n  async validate(payload: TokenPayload) {\n    return this.usersService.getById(payload.userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalAuthenticationGuard.html":{"url":"injectables/LocalAuthenticationGuard.html","title":"injectable - LocalAuthenticationGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalAuthenticationGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/guards/local-authentication.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class LocalAuthenticationGuard extends AuthGuard('local') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LocalStrategy.html":{"url":"injectables/LocalStrategy.html","title":"injectable - LocalStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LocalStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/strategies/local.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(authenticationService: AuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/authentication/strategies/local.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        authenticationService\n                                                  \n                                                        \n                                                                        AuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(email: string, password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/authentication/strategies/local.strategy.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Strategy } from 'passport-local';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { Injectable } from '@nestjs/common';\nimport { AuthenticationService } from '../authentication.service';\nimport { User } from '@prisma/client';\n\n@Injectable()\nexport class LocalStrategy extends PassportStrategy(Strategy) {\n  constructor(private authenticationService: AuthenticationService) {\n    super({\n      usernameField: 'email',\n    });\n  }\n  async validate(email: string, password: string): Promise {\n    return this.authenticationService.getAuthenticatedUser(email, password);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterDto.html":{"url":"classes/RegisterDto.html","title":"class - RegisterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/dto/register.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                name\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsEmail()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:5\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @IsString()@IsNotEmpty()@MinLength(8)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/authentication/dto/register.dto.ts:14\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsString, IsNotEmpty, MinLength } from 'class-validator';\n\nexport class RegisterDto {\n  @IsEmail()\n  email: string;\n\n  @IsString()\n  @IsNotEmpty()\n  name: string;\n\n  @IsString()\n  @IsNotEmpty()\n  @MinLength(8)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RequestWithUser.html":{"url":"interfaces/RequestWithUser.html","title":"interface - RequestWithUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RequestWithUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/types/request-with-user.types.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                    Request\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:     User\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     User\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { User } from '@prisma/client';\nimport { Request } from 'express';\n\nexport interface RequestWithUser extends Request {\n  user: User;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/TokenPayload.html":{"url":"interfaces/TokenPayload.html","title":"interface - TokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  TokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/authentication/types/token-payload.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            userId\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        userId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        userId:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface TokenPayload {\n  userId: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                getAllUsers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAllUsers\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAllUsers()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/getAllUsers')@UseGuards(EmailConfirmationGuard)@UseGuards(JwtAuthenticationGuard)\n                \n            \n\n            \n                \n                    Defined in src/users/users.controller.ts:13\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :     unknown\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get, UseGuards } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { JwtAuthenticationGuard } from 'src/authentication/guards/jwt-authentication.guard';\nimport { EmailConfirmationGuard } from 'src/authentication/guards/email-confirmation.guard';\n\n@Controller('users')\nexport class UsersController {\n  constructor(private readonly usersService: UsersService) {}\n\n  @Get('/getAllUsers')\n  @UseGuards(EmailConfirmationGuard)\n  @UseGuards(JwtAuthenticationGuard)\n  async getAllUsers() {\n    return 'This action returns all users';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nUsersService \n\nUsersService \n\n\n\nUsersModule\n\nUsersModule\n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/users/users.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UsersService } from './users.service';\nimport { UsersController } from './users.controller';\n\n@Module({\n  providers: [UsersService],\n  controllers: [UsersController],\n  exports: [UsersService],\n})\nexport class UsersModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/users/users.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                prisma\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                getByEmail\n                            \n                            \n                                    Async\n                                getById\n                            \n                            \n                                    Async\n                                getUserIfRefreshTokenMatches\n                            \n                            \n                                    Async\n                                markEmailAsConfirmed\n                            \n                            \n                                    Async\n                                removeRefreshToken\n                            \n                            \n                                    Async\n                                setCurrentRefreshToken\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/users/users.service.ts:8\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(userData: CreateUserDto)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userData\n                                    \n                                                CreateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getByEmail\n                        \n                    \n                \n            \n            \n                \n                    \n                    getByEmail(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getUserIfRefreshTokenMatches\n                        \n                    \n                \n            \n            \n                \n                    \n                    getUserIfRefreshTokenMatches(refreshToken: string, userId: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        markEmailAsConfirmed\n                        \n                    \n                \n            \n            \n                \n                    \n                    markEmailAsConfirmed(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeRefreshToken(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        setCurrentRefreshToken\n                        \n                    \n                \n            \n            \n                \n                    \n                    setCurrentRefreshToken(refreshToken: string, id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/users/users.service.ts:87\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    refreshToken\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        prisma\n                        \n                    \n                \n            \n                \n                    \n                        Type :     PrismaClient\n\n                    \n                \n                    \n                        \n                                Defined in src/users/users.service.ts:8\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, HttpException, HttpStatus } from '@nestjs/common';\nimport { PrismaClient } from '@prisma/client';\nimport { CreateUserDto } from './dto/create-user.dto';\nimport { hash as bcryptHash, compare as bcryptCompare } from 'bcrypt';\n\n@Injectable()\nexport class UsersService {\n  prisma: PrismaClient;\n\n  constructor() {\n    this.prisma = new PrismaClient();\n  }\n\n  async getByEmail(email: string) {\n    const user = await this.prisma.user.findUnique({\n      where: {\n        email,\n      },\n    });\n    if (user) return user;\n    throw new HttpException(\n      'User with this email does not exist',\n      HttpStatus.NOT_FOUND,\n    );\n  }\n\n  async getById(id: number) {\n    const user = await this.prisma.user.findUnique({\n      where: {\n        id,\n      },\n    });\n    if (user) return user;\n    throw new HttpException(\n      'User with this id does not exist',\n      HttpStatus.NOT_FOUND,\n    );\n  }\n\n  async getUserIfRefreshTokenMatches(refreshToken: string, userId: number) {\n    const user = await this.getById(userId);\n\n    const isRefreshTokenMatching = await bcryptCompare(\n      refreshToken,\n      user.currentHashedRefreshToken,\n    );\n\n    if (isRefreshTokenMatching) {\n      return user;\n    }\n  }\n\n  async removeRefreshToken(id: number) {\n    return this.prisma.user.update({\n      where: {\n        id,\n      },\n      data: {\n        currentHashedRefreshToken: null,\n      },\n    });\n  }\n\n  async create(userData: CreateUserDto) {\n    const newUser = await this.prisma.user.create({\n      data: {\n        ...userData,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      },\n    });\n    return newUser;\n  }\n\n  async markEmailAsConfirmed(email: string) {\n    const user = await this.prisma.user.update({\n      where: {\n        email,\n      },\n      data: {\n        isEmailVerified: true,\n      },\n    });\n    return user;\n  }\n\n  async setCurrentRefreshToken(refreshToken: string, id: number) {\n    const currentHashedRefreshToken = await bcryptHash(refreshToken, 10);\n    await this.prisma.user.update({\n      where: {\n        id,\n      },\n      data: {\n        currentHashedRefreshToken,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/VerificationTokenPayload.html":{"url":"interfaces/VerificationTokenPayload.html","title":"interface - VerificationTokenPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  VerificationTokenPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/email-verification/types/verification-payload.types.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface VerificationTokenPayload {\n  email: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/authentication/authentication.controller.ts\n            \n            controller\n            AuthenticationController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/authentication/authentication.service.ts\n            \n            injectable\n            AuthenticationService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/authentication/dto/register.dto.ts\n            \n            class\n            RegisterDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/authentication/guards/email-confirmation.guard.ts\n            \n            guard\n            EmailConfirmationGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/guards/jwt-authentication.guard.ts\n            \n            injectable\n            JwtAuthenticationGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/guards/jwt-token-refresh.guard.ts\n            \n            injectable\n            JwtRefreshGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/guards/local-authentication.guard.ts\n            \n            injectable\n            LocalAuthenticationGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/authentication/strategies/jwt-refresh-token.strategy.ts\n            \n            injectable\n            JwtRefreshTokenStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/strategies/local.strategy.ts\n            \n            injectable\n            LocalStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/authentication/types/request-with-user.types.ts\n            \n            interface\n            RequestWithUser\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/authentication/types/token-payload.types.ts\n            \n            interface\n            TokenPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/email-verification/dto/confirm-email.dto.ts\n            \n            class\n            ConfirmEmailDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/email-verification/email-verification.controller.ts\n            \n            controller\n            EmailVerificationController\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/email-verification/email-verification.service.ts\n            \n            injectable\n            EmailVerificationService\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/email-verification/types/verification-payload.types.ts\n            \n            interface\n            VerificationTokenPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/email/email.controller.ts\n            \n            controller\n            EmailController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/email/email.service.ts\n            \n            injectable\n            EmailService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/users/dto/create-user.dto.ts\n            \n            class\n            CreateUserDto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/users/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/users/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/10)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @hapi/joi : ^17.1.1\n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^2.1.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.1\n        \n            @nestjs/passport : ^8.2.2\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @prisma/client : ^3.15.2\n        \n            bcrypt : ^5.0.1\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            cookie-parser : ^1.4.6\n        \n            nodemailer : ^6.7.5\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            PostgresErrorCodes   (src/.../postgres-error-code.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/common/enums/postgres-error-code.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        PostgresErrorCodes\n                    \n                \n                        \n                            \n                                 UniqueViolation\n                            \n                        \n                        \n                            \n                                Value : 23505\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthenticationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EmailVerificationModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthenticationModule\n\n\n\ncluster_AuthenticationModule_providers\n\n\n\ncluster_EmailModule\n\n\n\ncluster_EmailModule_exports\n\n\n\ncluster_EmailModule_providers\n\n\n\ncluster_EmailVerificationModule\n\n\n\ncluster_EmailVerificationModule_exports\n\n\n\ncluster_EmailVerificationModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthenticationModule\n\nAuthenticationModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthenticationModule->AppModule\n\n\n\n\n\nEmailModule\n\nEmailModule\n\n\n\nEmailVerificationModule\n\nEmailVerificationModule\n\nEmailVerificationModule -->\n\nEmailModule->EmailVerificationModule\n\n\n\nAppModule -->\n\nEmailModule->AppModule\n\n\n\n\n\nEmailService \n\nEmailService \n\nEmailService  -->\n\nEmailModule->EmailService \n\n\n\nAuthenticationModule -->\n\nEmailVerificationModule->AuthenticationModule\n\n\n\nAppModule -->\n\nEmailVerificationModule->AppModule\n\n\n\n\n\nEmailVerificationService \n\nEmailVerificationService \n\nEmailVerificationService  -->\n\nEmailVerificationModule->EmailVerificationService \n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAuthenticationModule -->\n\nUsersModule->AuthenticationModule\n\n\n\nEmailVerificationModule -->\n\nUsersModule->EmailVerificationModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAuthenticationService\n\nAuthenticationService\n\nAuthenticationModule -->\n\nAuthenticationService->AuthenticationModule\n\n\n\n\n\nJwtRefreshTokenStrategy\n\nJwtRefreshTokenStrategy\n\nAuthenticationModule -->\n\nJwtRefreshTokenStrategy->AuthenticationModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthenticationModule -->\n\nJwtStrategy->AuthenticationModule\n\n\n\n\n\nLocalStrategy\n\nLocalStrategy\n\nAuthenticationModule -->\n\nLocalStrategy->AuthenticationModule\n\n\n\n\n\nEmailService\n\nEmailService\n\nEmailModule -->\n\nEmailService->EmailModule\n\n\n\n\n\nEmailVerificationService\n\nEmailVerificationService\n\nEmailVerificationModule -->\n\nEmailVerificationService->EmailVerificationModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        5 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    3 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
